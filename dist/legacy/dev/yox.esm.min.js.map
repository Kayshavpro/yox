{"version":3,"file":"yox.esm.min.js","sources":["../../../../../node_modules/yox-config/src/config.ts","../../../../../node_modules/yox-common/src/util/constant.ts","../../../../../node_modules/yox-common/src/util/is.ts","../../../../../node_modules/yox-common/src/function/execute.ts","../../../../../node_modules/yox-common/src/util/CustomEvent.ts","../../../../../node_modules/yox-common/src/util/array.ts","../../../../../node_modules/yox-common/src/util/string.ts","../../../../../node_modules/yox-common/src/util/keypath.ts","../../../../../node_modules/yox-common/src/util/holder.ts","../../../../../node_modules/yox-common/src/util/object.ts","../../../../../node_modules/yox-common/src/function/toString.ts","../../../../../node_modules/yox-common/src/util/logger.ts","../../../../../node_modules/yox-common/src/util/Emitter.ts","../../../../../node_modules/yox-common/src/function/isNative.ts","../../../../../node_modules/yox-common/src/function/nextTick.ts","../../../../../node_modules/yox-common/src/util/NextTask.ts","../../../../../node_modules/yox-snabbdom/src/field.ts","../../../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../../../node_modules/yox-snabbdom/src/directive.ts","../../../../../node_modules/yox-snabbdom/src/component.ts","../../../../../node_modules/yox-snabbdom/src/snabbdom.ts","../../../../../node_modules/yox-template-compiler/src/nodeType.ts","../../../../../node_modules/yox-template-compiler/src/helper.ts","../../../../../node_modules/yox-template-compiler/src/creator.ts","../../../../../node_modules/yox-template-compiler/src/platform/web.ts","../../../../../node_modules/yox-common/src/function/toNumber.ts","../../../../../node_modules/yox-expression-compiler/src/nodeType.ts","../../../../../node_modules/yox-common/src/function/isDef.ts","../../../../../node_modules/yox-expression-compiler/src/creator.ts","../../../../../node_modules/yox-expression-compiler/src/interpreter.ts","../../../../../node_modules/yox-expression-compiler/src/compiler.ts","../../../../../node_modules/yox-template-compiler/src/compiler.ts","../../../../../node_modules/yox-common/src/util/generator.ts","../../../../../node_modules/yox-template-compiler/src/generator.ts","../../../../../node_modules/yox-expression-compiler/src/generator.ts","../../../../../node_modules/yox-template-compiler/src/renderer.ts","../../../../../node_modules/yox-dom/src/dom.ts","../../../../../node_modules/yox-observer/src/Computed.ts","../../../../../node_modules/yox-observer/src/function/readValue.ts","../../../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../../../node_modules/yox-observer/src/function/diffString.ts","../../../../../node_modules/yox-observer/src/function/diffArray.ts","../../../../../node_modules/yox-observer/src/function/diffObject.ts","../../../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../../../node_modules/yox-observer/src/Observer.ts","../../../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!(?:\\s|--)/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\nexport const HOOK_BEFORE_PROPS_UPDATE = 'beforePropsUpdate'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as constant from './constant'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === constant.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== constant.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : context !== constant.UNDEFINED\n        ? fn.call(context, args)\n        : args !== constant.UNDEFINED\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from 'yox-type/src/yox'\n\nimport * as constant from './constant'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = constant.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = constant.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = constant.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}","import * as is from './is'\nimport * as constant from './constant'\n\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = constant.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        result = index\n        return constant.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    constant.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(constant.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as constant from './constant'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? constant.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? constant.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, start !== constant.UNDEFINED ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, end !== constant.UNDEFINED ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as is from './is'\nimport * as string from './string'\nimport * as constant from './constant'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += constant.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : constant.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, index: number, lastIndex: number) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  // is.array() 比 splitCache.hasOwnProperty(keypath) 快一些\n  // 虽然不如后者严谨，但在这里够用了\n\n  let list: string[]\n\n  if (is.array(splitCache[keypath])) {\n    list = splitCache[keypath]\n  }\n  else {\n    if (string.indexOf(keypath, constant.RAW_DOT) < 0) {\n      list = [keypath]\n    }\n    else {\n      list = keypath.split(constant.RAW_DOT)\n    }\n    splitCache[keypath] = list\n  }\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i, lastIndex) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + constant.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, constant.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import {\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as constant from './constant'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: constant.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as constant from './constant'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n\n      if (object != constant.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = value !== constant.UNDEFINED\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (index === lastIndex) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = constant.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = constant.UNDEFINED\n        return constant.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n      if (index === lastIndex) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return constant.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return object[key] !== constant.UNDEFINED\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != constant.NULL && target.toString\n    ? target.toString()\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as string\n      : constant.EMPTY_STRING\n}\n","import * as constant from './constant'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== constant.RAW_UNDEFINED ? console : constant.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n * 源码模式默认选 INFO，因为 DEBUG 输出的日志太多，会导致性能急剧下降\n */\ndefaultLogLevel = /yox/.test(toString(constant.EMPTY_FUNCTION)) ? INFO : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = constant.WINDOW && /edge|msie|trident/i.test(constant.WINDOW.navigator.userAgent)\n  ? constant.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : constant.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (constant.GLOBAL) {\n    const logLevel = constant.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  EmitterNamespace,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport execute from '../function/execute'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\nimport * as constant from './constant'\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || constant.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | EmitterNamespace,\n    args: any[] | void,\n    filter?: (\n      namespace: EmitterNamespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = constant.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : constant.UNDEFINED\n\n      // 这里不用 array.each，减少函数调用\n      for (let i = 0, length = list.length; i < length; i++) {\n\n        let options = list[i]\n\n        // 命名空间不匹配\n        if (!matchNamespace(namespace.ns, options)\n          // 在 fire 过程中被移除了\n          || !array.has(list, options)\n          // 传了 filter，则用 filter 判断是否过滤此 options\n          || (filter && !filter(namespace, args, options))\n        ) {\n          continue\n        }\n\n        // 为 event 对象加上当前正在处理的 listener\n        // 这样方便业务层移除事件绑定\n        // 比如 on('xx', function) 这样定义了匿名 listener\n        // 在这个 listener 里面获取不到当前 listener 的引用\n        // 为了能引用到，有时候会先定义 var listener = function\n        // 然后再 on('xx', listener) 这样其实是没有必要的\n        if (event) {\n          event.listener = options.fn\n        }\n\n        let result = execute(options.fn, options.ctx, args)\n\n        if (event) {\n          event.listener = constant.UNDEFINED\n        }\n\n        // 执行次数\n        options.num = options.num ? (options.num + 1) : 1\n\n        // 注册的 listener 可以指定最大执行次数\n        if (options.num === options.max) {\n          instance.off(namespace, options.fn)\n        }\n\n        // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n        if (event) {\n          if (result === constant.FALSE) {\n            event.prevent().stop()\n          }\n          else if (event.isStoped) {\n            result = constant.FALSE\n          }\n        }\n\n        if (result === constant.FALSE) {\n          isComplete = constant.FALSE\n          break\n        }\n\n      }\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | EmitterNamespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | EmitterNamespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          constant.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == constant.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | EmitterNamespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = constant.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = constant.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): EmitterNamespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: constant.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, constant.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return constant.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options.fn\n      }\n    : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : constant.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as constant from '../util/constant'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === constant.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === constant.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from 'yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.attr(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeAttr(node, name)\n      }\n    }\n\n  }\n\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.prop(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeProp(node, name)\n      }\n    }\n\n  }\n\n}","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || constant.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || constant.EMPTY_OBJECT\n\n\n    for (let name in newValue) {\n\n      const directive = newValue[name],\n\n      { once, bind, unbind } = directive.hooks\n\n      if (!oldValue[name]) {\n        bind(node, directive, vnode)\n      }\n      else if (once\n        || directive.value !== oldValue[name].value\n        || isKeypathChange\n      ) {\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n        bind(node, directive, vnode)\n      }\n\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        const { unbind } = oldValue[name].hooks\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n      }\n    }\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    for (let name in directives) {\n      const { unbind } = directives[name].hooks\n      if (unbind) {\n        unbind(node, directives[name], vnode)\n      }\n    }\n  }\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport * as object from 'yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from 'yox-type/src/type'\n\nimport {\n  DomApi,\n} from 'yox-type/src/api'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || constant.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = constant.FALSE\n\n  directive.update(vnode)\n  component.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = constant.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(constant.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = constant.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    directive.update(vnode)\n    component.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = constant.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = constant.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = constant.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : constant.UNDEFINED\n\n      // 移动元素\n      if (oldIndex !== constant.UNDEFINED) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = constant.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n\n  // 先处理 directive 再处理 component\n  // 因为组件只是单纯的更新 props，而 directive 则有可能要销毁\n  // 如果顺序反过来，会导致某些本该销毁的指令先被数据的变化触发执行了\n  directive.update(vnode, oldVnode)\n  component.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, constant.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, constant.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[constant.RAW_SLOT] =\nspecialTags[constant.RAW_TEMPLATE] =\n\nspecialAttrs[constant.RAW_KEY] =\nspecialAttrs[constant.RAW_REF] =\nspecialAttrs[constant.RAW_SLOT] = constant.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import {\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: constant.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, ns: string, modifier?: string): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    modifier,\n  }\n}\n\nexport function createProperty(name: string, hint: PropertyHint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: constant.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string | void): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n  }\n}\n\nexport function createElement(tag: string, dynamicTag: ExpressionNode | void, isSvg: boolean, isStyle: boolean, isComponent: boolean): Element {\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    dynamicTag,\n    isSvg,\n    isStyle,\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: constant.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== constant.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: constant.TRUE,\n    isLeaf: constant.TRUE,\n  }\n}","import {\n  HINT_STRING,\n  HINT_NUMBER,\n  HINT_BOOLEAN,\n} from 'yox-config/src/config'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport Element from '../node/Element'\nimport Attribute from '../node/Attribute'\nimport Property from '../node/Property'\n\nimport * as helper from '../helper'\nimport * as creator from '../creator'\nimport * as nodeType from '../nodeType'\n\n// 首字母大写，或中间包含 -\nconst componentNamePattern = /^[A-Z]|-/,\n\n// HTML 实体（中间最多 6 位，没见过更长的）\nhtmlEntityPattern = /&[#\\w\\d]{2,6};/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\nexport function isSelfClosing(tagName: string) {\n  return array.has(selfClosingTagNames, tagName)\n}\n\nexport function createAttribute(element: Element, name: string): Attribute | Property {\n\n  // 组件用驼峰格式\n  if (element.isComponent) {\n    return creator.createAttribute(\n      string.camelize(name)\n    )\n  }\n  // 原生 dom 属性\n  else {\n\n    // 把 attr 优化成 prop\n    const lowerName = string.lower(name)\n\n    // <slot> 、<template> 或 svg 中的属性不用识别为 property\n    if (helper.specialTags[element.tag] || element.isSvg) {\n      return creator.createAttribute(name)\n    }\n    // 尝试识别成 property\n    else if (array.has(stringProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_STRING\n      )\n    }\n    else if (array.has(numberProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_NUMBER\n      )\n    }\n    else if (array.has(booleanProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_BOOLEAN\n      )\n    }\n\n    // 没辙，还是个 attribute\n    return creator.createAttribute(name)\n\n  }\n}\n\nexport function getAttributeDefaultValue(element: Element, name: string) {\n  // 比如 <Dog isLive>\n  if (element.isComponent) {\n    return constant.TRUE\n  }\n  // <div data-name checked>\n  return string.startsWith(name, 'data-')\n    ? constant.EMPTY_STRING\n    : name\n}\n\nexport function createElement(staticTag: string, dynamicTag: ExpressionNode | void) {\n\n  let isSvg = constant.FALSE, isStyle = constant.FALSE, isComponent = constant.FALSE\n\n  if (dynamicTag) {\n    isComponent = constant.TRUE\n  }\n  else {\n    isSvg = array.has(svgTagNames, staticTag)\n\n    // 是 svg 就不可能是组件\n    // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n    if (!isSvg && componentNamePattern.test(staticTag)) {\n      isComponent = constant.TRUE\n    }\n    else if (staticTag === 'style') {\n      isStyle = constant.TRUE\n    }\n  }\n\n  return creator.createElement(\n    staticTag,\n    dynamicTag,\n    isSvg,\n    isStyle,\n    isComponent\n  )\n}\n\nexport function compatElement(element: Element) {\n\n  let { tag, attrs } = element, hasType = constant.FALSE, hasValue = constant.FALSE\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n\n        const name = attr.type === nodeType.PROPERTY\n          ? (attr as Property).name\n          : constant.UNDEFINED\n\n        if (name === 'type') {\n          hasType = constant.TRUE\n        }\n        else if (name === constant.RAW_VALUE) {\n          hasValue = constant.TRUE\n        }\n\n      }\n    )\n  }\n  // 补全 style 标签的 type\n\n  // style 如果没有 type 则加一个 type=\"text/css\"\n  // 因为低版本 IE 没这个属性，没法正常渲染样式\n  if (element.isStyle && !hasType) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      creator.createProperty('type', HINT_STRING, 'text/css')\n    )\n  }\n  // 低版本 IE 需要给 option 标签强制加 value\n  else if (tag === 'option' && !hasValue) {\n    element.isOption = constant.TRUE\n  }\n\n}\n\nexport function setElementText(element: Element, text: string) {\n  if (htmlEntityPattern.test(text)) {\n    element.html = text\n    return constant.TRUE\n  }\n}","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target !== constant.UNDEFINED\n}\n","import toString from 'yox-common/src/function/toString'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = constant.TRUE, offset = 0\n\n  if (name === constant.KEYPATH_CURRENT\n    || name === constant.KEYPATH_PARENT\n  ) {\n    lookup = constant.FALSE\n    if (name === constant.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = constant.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个节点\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  // 第一个节点要特殊处理\n  let firstNode = nodes.shift() as Node,\n\n  // 是否向上查找\n  lookup = constant.TRUE,\n\n  // 偏移量，默认从当前 context 开始查找\n  offset = 0\n\n  // 表示传入的 nodes 至少有两个节点（弹出了一个）\n  if (nodes.length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    // 是否全是 Literal 节点\n    let isLiteral = constant.TRUE,\n\n    // 静态节点\n    staticNodes: string[] = [],\n\n    // 对于 this.a.b[c] 这样的\n    // 要还原静态部分 this.a.b 的 raw\n    // 虽然 raw 没什么大用吧，谁让我是洁癖呢\n    staticRaw = constant.EMPTY_STRING,\n\n    // 动态节点\n    dynamicNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (isLiteral) {\n          if (node.type === nodeType.LITERAL) {\n            if ((node as Literal).raw === constant.KEYPATH_PARENT) {\n              offset += 1\n              staticRaw = staticRaw\n                ? staticRaw + constant.RAW_SLASH + constant.KEYPATH_PARENT\n                : constant.KEYPATH_PARENT\n              return\n            }\n            if ((node as Literal).raw !== constant.KEYPATH_CURRENT) {\n              const value = toString((node as Literal).value)\n              array.push(\n                staticNodes,\n                value\n              )\n              if (staticRaw) {\n                staticRaw += string.endsWith(staticRaw, constant.KEYPATH_PARENT)\n                  ? constant.RAW_SLASH\n                  : constant.RAW_DOT\n              }\n              staticRaw += value\n            }\n          }\n          else {\n            isLiteral = constant.FALSE\n          }\n        }\n\n        if (!isLiteral) {\n          array.push(\n            dynamicNodes,\n            node\n          )\n        }\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 static keypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      lookup = (firstNode as Identifier).lookup\n      offset += (firstNode as Identifier).offset\n\n      let firstName = (firstNode as Identifier).name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (firstName) {\n        array.unshift(staticNodes, firstName)\n      }\n\n      // 转成 Identifier\n      firstName = array.join(staticNodes, constant.RAW_DOT)\n\n      // a.b.c\n      if (isLiteral) {\n        firstNode = createIdentifierInner(raw, firstName, lookup, offset)\n      }\n      // a[b]\n      // this.a[b]\n      else {\n\n        // 当 isLiteral 为 false 时\n        // 需要为 lead 节点创建合适的 raw\n        let firstRaw = (firstNode as Identifier).raw\n        if (staticRaw) {\n          firstRaw += (\n            firstRaw === constant.KEYPATH_PARENT\n              ? constant.RAW_SLASH\n              : constant.RAW_DOT\n          ) + staticRaw\n        }\n\n        firstNode = createMemberInner(\n          raw,\n          createIdentifierInner(firstRaw, firstName, lookup, offset),\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n    else {\n      // 例子：\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, constant.RAW_DOT),\n          constant.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // 例子：\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n","import * as constant from 'yox-common/src/util/constant'\n\nexport const unary = {\n  '+': constant.TRUE,\n  '-': constant.TRUE,\n  '~': constant.TRUE,\n  '!': constant.TRUE,\n  '!!': constant.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = constant.MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? constant.MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (constant.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(constant.MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // 一元运算只有操作符没有表达式？\n        instance.fatal(index, `Expression expected.`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `Number expected.`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (constant.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，字符串还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = constant.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            // 对象的 keys 和 values 的长度不一致\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, 'The number of keys and values must be equal.')\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，对象还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = constant.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = constant.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  // 对象的 key 必须是字面量或标识符\n                  instance.fatal(startIndex, 'The key of an object must be a literal or identifier.')\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          // 类似这样 { key: }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // 对象的值没找到\n              instance.fatal(startIndex, `The value of the object was not found.`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (constant.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，tuple 还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (constant.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = constant.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = constant.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, constant.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(\n              startIndex,\n              `${(array.last(nodes) as Node).raw}/ must be followed by an identifier.`\n            )\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, constant.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // . 后面跟的都是啥玩意啊\n              instance.fatal(startIndex, 'Identifier or number expected.')\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            // [] 内部不能为空\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] is not allowed.`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && raw in keywordLiterals\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, 'The operator \"++\" is not supported.')\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, 'The operator \"--\" is not supported.')\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, 'Assignment statements are not supported.')\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (constant.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = constant.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, 'Invalid syntax.')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (constant.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanTernary()\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanTernary()\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // 三元表达式语法错误\n        instance.fatal(index, `Invalid ternary syntax.`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `\"${String.fromCharCode(endCode as number)}\" expected, \"${String.fromCharCode(instance.code)}\" actually.`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression\\n\\n${this.content}\\n\\nmessage: ${message}\\n`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, any> = {}\n\nkeywordLiterals[constant.RAW_TRUE] = constant.TRUE\nkeywordLiterals[constant.RAW_FALSE] = constant.FALSE\nkeywordLiterals[constant.RAW_NULL] = constant.NULL\nkeywordLiterals[constant.RAW_UNDEFINED] = constant.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","import {\n  SYNTAX_COMMENT,\n  SYNTAX_EACH,\n  SYNTAX_ELSE,\n  SYNTAX_ELSE_IF,\n  SYNTAX_IF,\n  SYNTAX_IMPORT,\n  SYNTAX_PARTIAL,\n  SYNTAX_SPREAD,\n  HINT_BOOLEAN,\n  HINT_NUMBER,\n  DIRECTIVE_ON,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_CUSTOM,\n  SLOT_NAME_DEFAULT,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport {\n  isSelfClosing,\n  createAttribute,\n  getAttributeDefaultValue,\n  createElement,\n  compatElement,\n  setElementText,\n} from './platform/web'\n\nimport toString from 'yox-common/src/function/toString'\nimport toNumber from 'yox-common/src/function/toNumber'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from 'yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 调用的方法\nmethodPattern = /^[_$a-z]([\\w]+)?$/,\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-$.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling template\\n\\n${content}\\n\\nmessage: ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && isSelfClosing(element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`End tag is \"${tagName}\"，but start tag is \"${element.tag}\".`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = constant.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement) {\n        if (isAttribute) {\n          if (isSpecialAttr(currentElement, node as Attribute)) {\n            bindSpecialAttr(currentElement, node as Attribute)\n          }\n        }\n        else if (isDirective) {\n          checkDirective(currentElement, node as Directive)\n        }\n      }\n\n      return node\n\n    }\n\n    // 出栈节点类型不匹配\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`The type of poping node is not expected.`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = constant.MINUS_ONE,\n\n    openText = constant.EMPTY_STRING,\n\n    closeIndex = constant.MINUS_ONE,\n\n    closeText = constant.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child, index) {\n        if (child.type === nodeType.TEXT) {\n          // 有了结束 index，这里的任务是配对开始 index\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              let startIndex = openIndex, endIndex = closeIndex\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                startIndex++\n              }\n              if (closeText) {\n                // 合并开始和结束文本，如 1<!-- {{x}}{{y}} -->2\n                // 这里要把 1 和 2 两个文本节点合并成一个\n                if (openText) {\n                  (children[openIndex] as Text).text += closeText\n                }\n                else {\n                  (children[closeIndex] as Text).text = closeText\n                  endIndex--\n                }\n              }\n\n              children.splice(startIndex, endIndex - startIndex + 1)\n\n              // 重置，再继续寻找结束 index\n              openIndex = closeIndex = constant.MINUS_ONE\n            }\n          }\n          else {\n            // 从后往前遍历\n            // 一旦发现能匹配 --> 就可以断定这是注释的结束 index\n            // 剩下的就是找开始 index\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      constant.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n    // 唯独需要在这特殊处理的是 html 实体\n    // 但这只是 WEB 平台的特殊逻辑，所以丢给 platform 处理\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && setElementText(element, child.text)\n    ) {\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && !child.safe\n    ) {\n      element.html = child.expr\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === HINT_BOOLEAN) {\n      prop.value = constant.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    // 这里需要严格校验格式，比如 width=\"100%\" 要打印报错信息，提示用户类型错误\n    if (prop.hint === HINT_NUMBER) {\n      if (process.env.NODE_ENV === 'development') {\n        if (is.numeric(text)) {\n          prop.value = +text\n        }\n        else {\n          fatal(`The value of \"${prop.name}\" is not a number: ${text}.`)\n        }\n      }\n      else {\n        prop.value = toNumber(text)\n      }\n    }\n    else if (prop.hint === HINT_BOOLEAN) {\n      prop.value = text === constant.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = constant.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = constant.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`The value of \"${attr.name}\" is empty.`)\n      }\n    }\n    else {\n      attr.value = getAttributeDefaultValue(element, attr.name)\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = constant.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = constant.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = constant.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    let { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    // 且命名空间不能用 native\n    isEvent = directive.ns === DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === DIRECTIVE_CUSTOM,\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    expr: ExpressionNode | void,\n\n    error: any\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch (e) {\n      error = e\n    }\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal('The value of lazy must be a number greater than 0.')\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          let methodName = (expr as ExpressionCall).name\n          if (methodName.type !== exprNodeType.IDENTIFIER) {\n            fatal('Invalid method name.')\n          }\n          // 函数调用调用方法，因此不能是 a.b() 的形式\n          else if (!methodPattern.test((methodName as ExpressionIdentifier).name)) {\n            fatal('Invalid method name.')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (eventPattern.test(raw) || eventNamespacePattern.test(raw)) {\n\n            // native 有特殊用处，不能给业务层用\n            if (eventNamespacePattern.test(raw)\n              && raw.split(constant.RAW_DOT)[1] === MODIFER_NATIVE\n            ) {\n              fatal(`The event namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n            }\n\n            // <Button on-click=\"click\"> 这种写法没有意义\n            if (currentElement\n              && currentElement.isComponent\n              && directive.name === raw\n            ) {\n              fatal(`The event name listened and fired can't be the same.`)\n            }\n\n          }\n          // 事件转换名称只能是 [name] 或 [name.namespace] 格式\n          else {\n            fatal('The event name and namespace must be an identifier.')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal('The value of the model must be an identifier.')\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      // 自定义指令支持错误的表达式\n      // 反正是自定义的规则，爱怎么写就怎么写\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          throw error\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = constant.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    // 这里会去掉没有子节点的空分支\n\n    // 从最后一个节点往前遍历\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | void,\n\n    hasNext: boolean | void\n\n    while (constant.TRUE) {\n      // 当前分支有子节点\n      if (currentNode.children) {\n        // 从后往前遍历第一次发现非空分支\n        // 此时，可以删掉后面的空分支\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = constant.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅在 checkCondition 函数中用作逆向遍历\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 所有分支都没有子节点，删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n      return\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, slot } = element, isTemplate = tag === constant.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`The \"key\" is not supported in <template>.`)\n        }\n        else if (element.ref) {\n          fatal(`The \"ref\" is not supported in <template>.`)\n        }\n        else if (element.attrs) {\n          fatal(`The attributes and directives are not supported in <template>.`)\n        }\n        else if (!slot) {\n          fatal(`The \"slot\" is required in <template>.`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !element.children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === constant.RAW_SLOT && !element.name) {\n      element.name = SLOT_NAME_DEFAULT\n    }\n    else {\n      compatElement(element)\n    }\n\n  },\n\n  checkDirective = function (element: Element, directive: Directive) {\n    if (process.env.NODE_ENV === 'development') {\n      // model 不能写在 if 里，影响节点的静态结构\n      if (directive.ns === DIRECTIVE_MODEL) {\n        if (array.last(nodeStack) !== element) {\n          fatal(`The \"model\" can't be used in an if block.`)\n        }\n      }\n    }\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === constant.RAW_NAME || name === constant.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`The \"${name}\" can't be used in an if block.`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === constant.EMPTY_STRING) {\n        fatal(`The value of \"${name}\" is empty.`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`The value of \"${name}\" can only be a string literal.`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === constant.RAW_SLOT && attr.name === constant.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = constant.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    let type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('The \"else\" block must not be followed by an \"else if\" block.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" block can't appear more than once in a conditional statement.`)\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('The \"if\" block is required.')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        // 这里不能写 currentElement && !currentAttribute，举个例子\n        //\n        // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n        //\n        // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n        if (currentElement && currentBranch.type === nodeType.ELEMENT) {\n\n          // 属性层级不能使用危险插值\n          if (process.env.NODE_ENV === 'development') {\n            if (type === nodeType.EXPRESSION\n              && !(node as Expression).safe\n            ) {\n              fatal('The dangerous interpolation must be the only child of a HTML element.')\n            }\n          }\n\n          // node 没法转型，一堆可能的类型怎么转啊...\n          array.push(\n            currentElement.attrs || (currentElement.attrs = []),\n            node as any\n          )\n\n        }\n        else {\n\n          const children = currentBranch.children || (currentBranch.children = []),\n          lastChild = array.last(children)\n\n          // 如果表达式是安全插值的字面量，可以优化成字符串\n          if (type === nodeType.EXPRESSION\n            // 在元素的子节点中，则直接转成字符串\n            && (!currentElement\n              // 在元素的属性中，如果同级节点大于 0 个（即已经存在一个），则可以转成字符串\n              || (currentAttribute && children.length > 0)\n            )\n          ) {\n            const textNode = toTextNode(node as Expression)\n            if (textNode) {\n              node = textNode\n              type = textNode.type\n            }\n          }\n\n          // 连续添加文本节点，则直接合并\n          if (lastChild\n            && type === nodeType.TEXT\n          ) {\n            // 合并两个文本节点\n            if (lastChild.type === nodeType.TEXT) {\n              (lastChild as Text).text += (node as Text).text\n              return\n            }\n            // 前一个是字面量的表达式，也可以合并节点\n            if (lastChild.type === nodeType.EXPRESSION) {\n              const textNode = toTextNode(lastChild as Expression)\n              if (textNode) {\n                children[children.length - 1] = textNode\n                textNode.text += (node as Text).text\n                return\n              }\n            }\n          }\n\n          if (process.env.NODE_ENV === 'development') {\n            if (type === nodeType.EXPRESSION\n              && !(node as Expression).safe\n            ) {\n              // 前面不能有别的 child，危险插值必须独占父元素\n              if (lastChild) {\n                fatal('The dangerous interpolation must be the only child of a HTML element.')\n              }\n              // 危险插值的父节点必须是 html element\n              else if (currentBranch.type !== nodeType.ELEMENT\n                || (currentBranch as Element).isComponent\n                || helper.specialTags[(currentBranch as Element).tag]\n              ) {\n                fatal('The dangerous interpolation must be the only child of a HTML element.')\n              }\n            }\n            // 后面不能有别的 child，危险插值必须独占父元素\n            else if (lastChild\n              && lastChild.type === nodeType.EXPRESSION\n              && !(lastChild as Expression).safe\n            ) {\n              fatal('The dangerous interpolation must be the only child of a HTML element.')\n            }\n          }\n\n          array.push(children, node)\n\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (type === nodeType.EXPRESSION\n            && !(node as Expression).safe\n          ) {\n            fatal('The dangerous interpolation must be under a HTML element.')\n          }\n        }\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, constant.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  toTextNode = function (node: Expression) {\n    if (node.safe\n      && node.expr.type === exprNodeType.LITERAL\n    ) {\n      return creator.createText(toString(\n        (node.expr as ExpressionLiteral).value\n      ))\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          let tag = match[2]\n          if (match[1] === constant.RAW_SLASH) {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n\n            // 等到 > 字符才算真正的结束\n            currentElement = popStack(nodeType.ELEMENT, tag) as Element\n\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === constant.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> can only be used within an component children.')\n                }\n              }\n            }\n\n            let dynamicTag: ExpressionNode | void\n\n            // 如果以 $ 开头，表示动态组件\n            if (string.codeAt(tag) === 36) {\n\n              // 编译成表达式\n              tag = string.slice(tag, 1)\n\n              dynamicTag = exprCompiler.compile(tag)\n              // 表达式必须是标识符类型\n              if (process.env.NODE_ENV === 'development') {\n                if (dynamicTag) {\n                  if (dynamicTag.type !== exprNodeType.IDENTIFIER) {\n                    fatal(`The dynamic component \"${tag}\" is not a valid identifier.`)\n                  }\n                }\n                else {\n                  fatal(`The dynamic component \"${tag}\" is not a valid expression.`)\n                }\n              }\n\n            }\n\n            const node = createElement(tag, dynamicTag)\n\n            addChild(node)\n            currentElement = node\n\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        // 处理结束标签的 >\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === constant.RAW_SLASH) {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = constant.UNDEFINED\n\n          return match[0]\n\n        }\n\n        // 如果只是写了一个 > 字符\n        // 比如 <div>></div>\n        // 则交给其他 parser 处理\n\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`The previous attribute is not end.`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === DIRECTIVE_MODEL || name === constant.RAW_TRANSITION) {\n            node = creator.createDirective(\n              constant.EMPTY_STRING,\n              name\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_ON + directiveSeparator)) {\n            let event = slicePrefix(name, DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('The event name is required.')\n              }\n            }\n            const parts = string.camelize(event).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              parts[0],\n              DIRECTIVE_EVENT,\n              parts[1]\n            )\n            // on-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(parts[2])) {\n                fatal('Invalid event namespace.')\n              }\n            }\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              lazy ? string.camelize(lazy) : constant.EMPTY_STRING,\n              DIRECTIVE_LAZY\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('The directive name is required.')\n              }\n            }\n            const parts = string.camelize(custom).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              parts[0],\n              DIRECTIVE_CUSTOM,\n              parts[1]\n            )\n            // o-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(parts[2])) {\n                fatal('Invalid directive modifier.')\n              }\n            }\n          }\n          else {\n            node = createAttribute(currentElement, name)\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text as string)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(constant.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = constant.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        // 没找到结束引号\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`Unterminated quoted string in \"${currentAttribute.name}\".`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, constant.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, constant.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`Invalid character is found in <${currentElement.tag}> attribute level.`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `The \"each\" block can't be appear in an attribute value.`\n                : `The \"each\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        source = slicePrefix(source, SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, constant.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = terms[1] ? string.trim(terms[1]) : constant.UNDEFINED,\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                constant.UNDEFINED,\n                constant.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IMPORT)) {\n        source = slicePrefix(source, SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"import\" block can't be appear in an attribute value.`\n                : `The \"import\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"partial\" block can't be appear in an attribute value.`\n                : `The \"partial\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IF)) {\n        source = slicePrefix(source, SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE)) {\n        source = slicePrefix(source, SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" must not be followed by anything.`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_SPREAD)) {\n        source = slicePrefix(source, SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`The spread can only be used by a component.`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(\n            expr,\n            blockMode === BLOCK_MODE_SAFE\n          )\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === constant.RAW_SLASH) {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = constant.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = constant.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"if\" block is closing, but it's not open yet.`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ and }}} is not a pair.`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ and }} is not a pair.`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return constant.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (constant.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, constant.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('The end delimiter is not found.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          // {{{ 后面没字符串了？\n          fatal('Unterminated template literal.')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // {{ 后面没字符串了？\n        fatal('Unterminated template literal.')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('Some nodes is still in the stack.')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as array from './array'\nimport * as constant from './constant'\n\nexport const UNDEFINED = '$0'\n\nexport const NULL = '$1'\n\nexport const TRUE = '$2'\n\nexport const FALSE = '$3'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\nexport const RETURN = 'return '\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n *\n * [a, undefined, undefined] => [a]\n * [a, undefined, b, undefined] => [a, undefined, b]\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = constant.TRUE\n\n  array.each(\n    list,\n    function (arg) {\n      if (isDef(arg)) {\n        removable = constant.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, UNDEFINED)\n      }\n    },\n    constant.TRUE\n  )\n\n  return args\n\n}\n\n/**\n * 确保表达式的优先级是正确的\n */\nexport function toGroup(code: string): string {\n  // 数组不用加括号\n  if (/^\\[[^\\]]+\\]$/.test(code)\n    // 对象不用加括号\n    || /^{[^\\}]+}$/.test(code)\n    // 字符串不用加括号\n    || /^\"[^\"]+\\\"$/.test(code)\n    // 一元表达式不用加括号\n    || /^(?:[-+~!]|!!)(?:[\\$\\w]+|\\([\\$\\w]+\\))$/.test(code)\n    // 函数调用不用加括号\n    || /^\\w+\\([^\\)\\{\\}]*\\)$/.test(code)\n    // 避免重复加括号\n    || /^\\([^\\)]+\\)$/.test(code)\n  ) {\n    return code\n  }\n  return /[-+*\\/%<>=!&^|,?:]/.test(code)\n    ? `(${code})`\n    : code\n}\n\n/**\n * 把 [ 'key1:value1', 'key2:value2' ] 格式转成 `{key1:value1,key2:value2}`\n */\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\n/**\n * 把 [ 'item1', 'item2' ] 格式转成 `['item1','item2']`\n */\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\n/**\n * 输出函数调用的格式\n */\nexport function toCall(name: string, args?: (string | void)[]): string {\n  const code = args ? array.join(trimArgs(args), COMMA) : constant.EMPTY_STRING\n  return `${name}(${code})`\n}\n\n/**\n * 输出为字符串格式\n */\nexport function toString(value: string | number | boolean | null | void): string {\n  return value === constant.TRUE\n    ? TRUE\n    : value === constant.FALSE\n      ? FALSE\n      : value === constant.NULL\n        ? NULL\n        : value === constant.UNDEFINED\n          ? UNDEFINED\n          : JSON.stringify(value)\n}\n\n/**\n * 输出为匿名函数格式\n */\nexport function toFunction(args: string, code: string) {\n  return `${constant.RAW_FUNCTION}(${args}){var ${UNDEFINED}=void 0,${NULL}=null,${TRUE}=!0,${FALSE}=!1;${RETURN}${code}}`\n}","import {\n  SLOT_DATA_PREFIX,\n  SLOT_NAME_DEFAULT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as exprGenerator from 'yox-expression-compiler/src/generator'\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否正在收集子节点\nconst collectStack: (boolean | void)[] = [],\n\n// 是否正在收集字符串类型的值\nstringStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_COMMENT_VNODE = 'p',\n\nRENDER_ELEMENT_VNODE = 'q',\n\nRENDER_COMPONENT_VNODE = 'r',\n\nRENDER_SLOT = 's',\n\nRENDER_PARTIAL = 't',\n\nRENDER_IMPORT = 'u',\n\nRENDER_EACH = 'v',\n\nRENDER_RANGE = 'w',\n\nRENDER_EQUAL_RANGE = 'x',\n\nARG_STACK = 'y'\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${constant.RAW_FUNCTION}(${arg || constant.EMPTY_STRING}){${result || constant.EMPTY_STRING}}`\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      renderExpression(expr)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, constant.FALSE, constant.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return renderExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    // 常见的应用场景是序列化 HTML 元素属性值，处理值时要求字符串，在处理属性名这个级别，不要求字符串\n    // compiler 会把原始字符串编译成 value\n    // compiler 会把单个插值编译成 expr\n    // 因此走到这里，一定是多个插值或是单个特殊插值（比如 If)\n    array.push(stringStack, constant.TRUE)\n    const result = stringifyChildren(children)\n    array.pop(stringStack)\n    return result\n  }\n}\n\nfunction stringifyChildren(children: Node[]) {\n\n  const items = children.map(\n    function (child: Node) {\n      return nodeGenerator[child.type](child)\n    }\n  )\n\n  // 字符串拼接涉及表达式的优先级问题，这里先统一成数组，字符串拼接改成 array.join 有利于一致性\n\n  return array.last(stringStack) && items.length > 1\n    ? generator.toArray(items) + `.join(${generator.EMPTY})`\n    : array.join(items, generator.COMMA)\n\n}\n\nfunction stringifyIf(node: If | ElseIf) {\n\n  let { children, next } = node,\n\n  // 是否正在收集子节点\n  defaultValue = array.last(collectStack)\n    ? generator.toCall(RENDER_COMMENT_VNODE)\n    // 要求是字符串\n    : array.last(stringStack)\n      ? generator.EMPTY\n      : generator.UNDEFINED,\n\n  yes: string | void,\n\n  no: string | void\n\n  if (children) {\n    yes = stringifyChildren(children)\n  }\n\n  if (next) {\n    if (next.type === nodeType.ELSE_IF) {\n      no = stringifyIf(next as ElseIf)\n    }\n    else if (next.children) {\n      no = stringifyChildren(next.children)\n    }\n  }\n\n  if (!yes && !no) {\n    return defaultValue\n  }\n\n  // 虽然三元表达式优先级最低，但无法保证表达式内部没有 ,\n  // 因此每一个分支都要调用 toGroup\n  return generator.toGroup(renderExpression(node.expr))\n    + generator.QUESTION\n    + generator.toGroup(yes || defaultValue)\n    + generator.COLON\n    + generator.toGroup(no || defaultValue)\n\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === constant.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children, name) {\n      result[name] = stringifyFunction(\n        stringifyChildren(children)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, dynamicTag, isComponent, ref, key, html, attrs, children } = node,\n\n  outputTag: string | void,\n\n  outputAttrs: string | void,\n\n  outputHTML: string | void,\n\n  outputChilds: string | void,\n  outputSlots: string | void,\n\n  outputStatic: string | void,\n  outputOption: string | void,\n  outputStyle: string | void,\n  outputSvg: string | void,\n\n  outputRef: string | void,\n  outputKey: string | void\n\n  if (tag === constant.RAW_SLOT) {\n    const args = [generator.toString(SLOT_DATA_PREFIX + node.name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  // 如果是动态组件，tag 会是一个标识符表达式\n  outputTag = dynamicTag\n    ? renderExpression(dynamicTag)\n    : generator.toString(tag)\n\n\n\n\n  array.push(collectStack, constant.FALSE)\n\n  // 在 collectStack 为 false 时取值\n  outputRef = ref ? stringifyValue(ref.value, ref.expr, ref.children) : constant.UNDEFINED\n  outputKey = key ? stringifyValue(key.value, key.expr, key.children) : constant.UNDEFINED\n\n  if (attrs) {\n    const list: string[] = []\n    array.each(\n      attrs,\n      function (attr) {\n        array.push(\n          list,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n    if (list.length) {\n      outputAttrs = stringifyFunction(\n        array.join(list, generator.COMMA)\n      )\n    }\n  }\n\n  if (children) {\n    collectStack[collectStack.length - 1] = constant.TRUE\n    if (isComponent) {\n      outputSlots = getComponentSlots(children)\n    }\n    else {\n      outputChilds = stringifyFunction(\n        stringifyChildren(children)\n      )\n    }\n  }\n\n  array.pop(collectStack)\n\n\n\n  if (html) {\n    outputHTML = is.string(html)\n      ? generator.toString(html as string)\n      : renderExpression(html as ExpressionNode)\n  }\n\n  outputStatic = node.isStatic ? generator.TRUE : constant.UNDEFINED\n  outputOption = node.isOption ? generator.TRUE : constant.UNDEFINED\n  outputStyle = node.isStyle ? generator.TRUE : constant.UNDEFINED\n  outputSvg = node.isSvg ? generator.TRUE : constant.UNDEFINED\n\n  if (isComponent) {\n    return generator.toCall(\n      RENDER_COMPONENT_VNODE,\n      // 最常用 => 最不常用排序\n      [\n        outputTag,\n        outputAttrs,\n        outputSlots,\n        outputRef,\n        outputKey,\n      ]\n    )\n  }\n\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    // 最常用 => 最不常用排序\n    [\n      outputTag,\n      outputAttrs,\n      outputChilds,\n      outputStatic,\n      outputOption,\n      outputStyle,\n      outputSvg,\n      outputHTML,\n      outputRef,\n      outputKey,\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr, modifier } = node\n\n  if (ns === DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [\n        generator.toString(name),\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <div transition=\"name\">\n  if (ns === constant.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(modifier),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, constant.UNDEFINED) // method\n        array.push(args, constant.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, constant.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  return array.last(collectStack)\n    ? generator.toCall(\n        RENDER_TEXT_VNODE,\n        [\n          result\n        ]\n      )\n    : result\n\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  return array.last(collectStack)\n    ? stringifyExpressionVnode(node.expr)\n    : renderExpression(node.expr)\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const children = stringifyFunction(\n    stringifyChildren(node.children as Node[])\n  )\n\n  // 遍历区间\n  if (node.to) {\n    if (node.equal) {\n      return generator.toCall(\n        RENDER_EQUAL_RANGE,\n        [\n          children,\n          renderExpression(node.from),\n          renderExpression(node.to),\n          generator.toString(node.index)\n        ]\n      )\n    }\n    return generator.toCall(\n      RENDER_RANGE,\n      [\n        children,\n        renderExpression(node.from),\n        renderExpression(node.to),\n        generator.toString(node.index)\n      ]\n    )\n  }\n\n  // 遍历数组和对象\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      children,\n      renderExpression(node.from, constant.TRUE),\n      generator.toString(node.index)\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[])\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\n// 序列化代码的参数列表\nlet codeArgs: string | void\n\nexport function generate(node: Node): string {\n\n  if (!codeArgs) {\n    codeArgs = array.join([\n      RENDER_EXPRESSION_IDENTIFIER,\n      RENDER_EXPRESSION_MEMBER_KEYPATH,\n      RENDER_EXPRESSION_MEMBER_LITERAL,\n      RENDER_EXPRESSION_CALL,\n      RENDER_TEXT_VNODE,\n      RENDER_ATTRIBUTE_VNODE,\n      RENDER_PROPERTY_VNODE,\n      RENDER_LAZY_VNODE,\n      RENDER_TRANSITION_VNODE,\n      RENDER_BINDING_VNODE,\n      RENDER_MODEL_VNODE,\n      RENDER_EVENT_METHOD_VNODE,\n      RENDER_EVENT_NAME_VNODE,\n      RENDER_DIRECTIVE_VNODE,\n      RENDER_SPREAD_VNODE,\n      RENDER_COMMENT_VNODE,\n      RENDER_ELEMENT_VNODE,\n      RENDER_COMPONENT_VNODE,\n      RENDER_SLOT,\n      RENDER_PARTIAL,\n      RENDER_IMPORT,\n      RENDER_EACH,\n      RENDER_RANGE,\n      RENDER_EQUAL_RANGE,\n    ], generator.COMMA)\n  }\n\n  return generator.toFunction(\n    codeArgs,\n    nodeGenerator[node.type](node)\n  )\n\n}\n","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = constant.FALSE,\n\n  // 如果是内部临时值，不需要 holder\n  needHolder = holder && !inner,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      constant.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generator.toGroup(generateChildNode((node as Binary).left))\n        + (node as Binary).operator\n        + generator.toGroup(generateChildNode((node as Binary).right))\n      break\n\n    case nodeType.TERNARY:\n      // 虽然三元表达式优先级最低，但无法保证表达式内部没有 ,\n      value = generator.toGroup(generateChildNode((node as Ternary).test))\n        + generator.QUESTION\n        + generator.toGroup(generateChildNode((node as Ternary).yes))\n        + generator.COLON\n        + generator.toGroup(generateChildNode((node as Ternary).no))\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = constant.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          generator.toString(identifier.lookup),\n          identifier.offset > 0 ? generator.toString(identifier.offset) : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED,\n          depIgnore ? generator.TRUE : constant.UNDEFINED,\n          stack ? stack : constant.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = constant.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            generator.toString(lookup),\n            offset > 0 ? generator.toString(offset) : constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n            depIgnore ? generator.TRUE : constant.UNDEFINED,\n            stack ? stack : constant.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            constant.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            needHolder ? generator.TRUE : constant.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = constant.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  if (!needHolder) {\n    return value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([\n        constant.RAW_VALUE + generator.COLON + value\n      ])\n\n}\n","import {\n  SLOT_DATA_PREFIX,\n} from 'yox-config/src/config'\n\nimport {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport globalHolder from 'yox-common/src/util/holder'\n\nimport Observer from 'yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: constant.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  currentVnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  slotComponentStack: Data[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  renderedSlots: Record<string, true> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index],\n\n    keypath = keypathUtil.join(scope.$keypath, key),\n\n    value: any = stack,\n\n    holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (defaultKeypath === constant.UNDEFINED) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (scope[key] !== constant.UNDEFINED) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (scope.$item !== constant.UNDEFINED) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === constant.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != constant.NULL && scope[key] !== constant.UNDEFINED) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = constant.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = constant.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = constant.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : constant.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (value: any) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const text = toString(value)\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        // 注释节点标签名是 '!'，这里区分一下\n        const textVnode: Data = {\n          tag: '#',\n          isText: constant.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    setPair(\n      currentVnode,\n      currentVnode.isComponent ? 'props' : 'nativeAttrs',\n      name,\n      value\n    )\n  },\n\n  renderPropertyVnode = function (name: string, value: any) {\n    setPair(currentVnode, 'nativeProps', name, value)\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair(currentVnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    currentVnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!currentVnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: constant.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : constant.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : constant.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    if (is.object(value)) {\n\n      // 数组也算一种对象\n      // 延展操作符不支持数组\n      if (process.env.NODE_ENV === 'development') {\n        if (is.array(value)) {\n          logger.fatal(`The spread operator can't be used by an array.`)\n        }\n      }\n\n      for (let key in value) {\n        setPair(currentVnode, 'props', key, value[key])\n      }\n\n      if (keypath) {\n        const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n        setPair(\n          currentVnode,\n          KEY_DIRECTIVES,\n          key,\n          {\n            ns: DIRECTIVE_BINDING,\n            name: constant.EMPTY_STRING,\n            key,\n            modifier: keypathUtil.join(keypath, constant.RAW_WILDCARD),\n            hooks: directives[DIRECTIVE_BINDING],\n          }\n        )\n      }\n\n    }\n\n  },\n\n  appendVnode = function (vnode: Data) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n    return vnode\n  },\n\n  renderCommentVnode = function () {\n    // 注释节点和文本节点需要有个区分\n    // 如果两者都没有 tag，则 patchVnode 时，会认为两者是 patchable 的\n    return appendVnode({\n      tag: '!',\n      isComment: constant.TRUE,\n      text: constant.EMPTY_STRING,\n      keypath: $scope.$keypath,\n      context,\n    })\n  },\n\n  renderElementVnode = function (\n    tag: string,\n    attrs: Function | void,\n    childs: Function | void,\n    isStatic: true | void,\n    isOption: true | void,\n    isStyle: true | void,\n    isSvg: true | void,\n    html: any | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      isStatic,\n      isOption,\n      isStyle,\n      isSvg,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n    }\n\n    if (isDef(html)) {\n      vnode.html = toString(html)\n    }\n\n    if (attrs) {\n      currentVnode = vnode\n      attrs()\n      currentVnode = constant.UNDEFINED\n    }\n\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderComponentVnode = function (\n    tag: string,\n    attrs: Function | void,\n    slots: Record<string, Function> | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n      isComponent: constant.TRUE,\n    }\n\n    const componentList = array.last(slotComponentStack)\n    if (componentList) {\n      array.push(componentList, vnode)\n    }\n\n    if (attrs) {\n      currentVnode = vnode\n      attrs()\n      currentVnode = constant.UNDEFINED\n    }\n\n    if (slots) {\n      const vnodeSlots = {}\n      for (let name in slots) {\n        vnodeStack.push([])\n        slotComponentStack.push([])\n        slots[name]()\n        const vnodes = array.pop(vnodeStack) as VNode[]\n        const components = array.pop(slotComponentStack) as VNode[]\n        if (vnodes.length) {\n          vnodeSlots[name] = {\n            vnodes,\n            components,\n          }\n        }\n        else {\n          // 必须要有值，用于覆盖旧值\n          vnodeSlots[name] = constant.UNDEFINED\n        }\n      }\n      vnode.slots = vnodeSlots\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    let myStack = stack || $stack, index = myStack.length - 1\n    if (offset) {\n      index -= offset\n    }\n    let result = findValue(myStack, index, name, lookup, depIgnore)\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, constant.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (runtimeKeypath !== constant.UNDEFINED) {\n      staticKeypath = array.join(runtimeKeypath as string[], constant.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = constant.UNDEFINED\n    globalHolder.value = match ? match.value : constant.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = constant.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || constant.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    slotProps = context.get(name)\n\n    if (vnodeList) {\n      if (slotProps) {\n        const { vnodes, components } = slotProps\n        for (let i = 0, length = vnodes.length; i < length; i++) {\n          array.push(vnodeList, vnodes[i])\n          vnodes[i].slot = name\n        }\n        for (let i = 0, length = components.length; i < length; i++) {\n          components[i].parent = context\n        }\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n    // 不能重复输出相同名称的 slot\n    if (process.env.NODE_ENV === 'development') {\n      if (renderedSlots[name]) {\n        logger.fatal(`The slot \"${string.slice(name, SLOT_DATA_PREFIX.length)}\" can't render more than one time.`)\n      }\n      renderedSlots[name] = constant.TRUE\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderCommentVnode,\n          renderElementVnode,\n          renderComponentVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (length !== constant.UNDEFINED) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, constant.EMPTY_STRING + i)\n            : constant.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderCommentVnode,\n    renderElementVnode,\n    renderComponentVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from 'yox-type/src/hooks'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\n\nlet guid = 0,\n\n// 这里先写 IE9 支持的接口\ntextContent = 'textContent',\n\ninnerHTML = 'innerHTML',\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n},\n\nfindElement = function (selector: string): Element | void {\n  const node = (constant.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, constant.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, constant.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (constant.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!constant.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!constant.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange',\n\n        isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = constant.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = constant.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE678\n        // 改用 data 属性\n        textContent = 'data'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for the legacy version.`)\n          }\n          const node = (constant.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === constant.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = constant.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              constant.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = constant.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, constant.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nemitterHolders: Record<string, Emitter> = {},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[constant.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = constant.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = constant.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = constant.FALSE\n      listener(event)\n    })\n    addEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[constant.EVENT_INPUT] = constant.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (constant.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (constant.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (constant.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (constant.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (value !== constant.UNDEFINED) {\n    object.set(node, name, value, constant.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string): void {\n  object.set(\n    node,\n    name,\n    constant.UNDEFINED\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (value !== constant.UNDEFINED) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != constant.NULL) {\n      return value\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (text !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[textContent] = text as string\n      }\n    }\n    else {\n      node[textContent] = text as string\n    }\n  }\n  else {\n    return node[textContent]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (html !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitterKey = node[EMITTER] || (node[EMITTER] = ++guid),\n\n  emitter = emitterHolders[emitterKey] || (emitterHolders[emitterKey] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitterKey = node[EMITTER],\n\n  emitter = emitterHolders[emitterKey],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (emitterHolders[emitterKey]\n    && object.falsy(listeners)\n  ) {\n    node[EMITTER] = constant.UNDEFINED\n    delete emitterHolders[emitterKey]\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" already exists.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(constant.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, constant.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = constant.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      constant.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == constant.NULL || keypath === constant.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath) !== constant.UNDEFINED) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      constant.RAW_LENGTH,\n      newIsString ? newValue.length : constant.UNDEFINED,\n      oldIsString ? oldValue.length : constant.UNDEFINED\n    )\n    return constant.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : constant.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : constant.UNDEFINED\n\n    callback(\n      constant.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : constant.UNDEFINED,\n        oldValue ? oldValue[i] : constant.UNDEFINED\n      )\n    }\n\n    return constant.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : constant.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : constant.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (keypathUtil.matchFuzzy(keypath, watchKeypath) !== constant.UNDEFINED) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: any, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: constant.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === constant.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Computed from './Computed'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === constant.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void\n\n    if (computed) {\n      result = object.get(computed, keypath)\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let next: any\n\n      keypathUtil.each(\n        keypath,\n        function (key, index, lastIndex) {\n\n          if (index === 0) {\n            if (computed && computed[key]) {\n              if (lastIndex === 0) {\n                computed[key].set(newValue)\n              }\n              else {\n                // 这里 next 可能为空\n                next = computed[key].get()\n              }\n            }\n            else {\n              if (lastIndex === 0) {\n                data[key] = newValue\n              }\n              else {\n                next = data[key] || (data[key] = {})\n              }\n            }\n            return\n          }\n\n          if (next) {\n            if (index === lastIndex) {\n              next[key] = newValue\n            }\n            else {\n              next = next[key] || (next[key] = {})\n            }\n          }\n\n        }\n      )\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = constant.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = constant.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = constant.TRUE,\n\n    sync = constant.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            constant.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === constant.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === constant.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return constant.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return constant.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return constant.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as array from '../util/array'\nimport * as constant from '../util/constant'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, constant.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = constant.UNDEFINED\n          if (!immediate) {\n            execute(fn, constant.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[constant.EMPTY_STRING]\n\n    if (value === constant.TRUE) {\n      name = constant.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === constant.EVENT_CLICK || name === constant.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += constant.RAW_DOT + modifier\n      }\n      // 监听组件事件不用处理父组件传下来的事件\n      let listener: Listener = function (event, data) {\n        if (event.phase !== CustomEvent.PHASE_DOWNWARD) {\n          return (handler as Listener)(event, data)\n        }\n      }\n      component.on(name, listener)\n      vnode.data[key] = function () {\n        component.off(name, listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n  LazyValue,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== constant.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: constant.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, constant.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, constant.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, constant.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return constant.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: constant.RAW_VALUE\n}\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[constant.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = constant.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== constant.TRUE) {\n        eventName = constant.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = constant.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (directive.hint !== constant.UNDEFINED) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = constant.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  Partial,\n  ThisTask,\n  ThisWatcher,\n  ThisListener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  ComponentOptions,\n  ThisWatcherOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from 'yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  HOOK_BEFORE_PROPS_UPDATE,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as snabbdom from 'yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateGenerator from 'yox-template-compiler/src/generator'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nimport Observer from 'yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(\n    plugin: {\n      install(Y: typeof Yox): void\n    }\n  ): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string | Function, stringify?: boolean): string | Function {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数\n      if (is.func(template)) {\n        return template as Function\n      }\n      if (!compileCache[template as string]) {\n        const nodes = templateCompiler.compile(template as string)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template as string] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template as string]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return template\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options?: ComponentOptions) {\n\n    const instance = this, $options: ComponentOptions = options || constant.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(constant.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp($options.name, key, value, rule)\n            }\n            if (value === constant.UNDEFINED) {\n              value = rule.value\n              if (value !== constant.UNDEFINED) {\n                source[key] = rule.type === constant.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = constant.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = constant.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(constant.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, constant.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, constant.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, constant.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, constant.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, constant.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: constant.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: constant.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        instance.watch(newWatchers)\n\n        if (process.env.NODE_ENV !== 'pure') {\n          execute(instance.$options[HOOK_AFTER_CREATE], instance)\n          instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n        }\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            constant.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    if (watchers) {\n      instance.watch(watchers)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute(instance.$options[HOOK_AFTER_CREATE], instance)\n      instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n    }\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener, constant.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (event.ns === constant.UNDEFINED) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === constant.TRUE) {\n      downward = constant.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    // 向上发事件会经过自己\n    // 如果向下发事件再经过自己，就产生了一次重叠\n    // 这是没有必要的，而且会导致向下发事件时，外部能接收到该事件，但我们的本意只是想让子组件接收到事件\n\n    isComplete = downward && event.target === instance\n      ? constant.TRUE\n      : $emitter.fire(event, args)\n\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, constant.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, ThisWatcher<this> | ThisWatcherOptions<this>>,\n    watcher?: ThisWatcher<this> | ThisWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: ThisWatcher<this>\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = constant.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(props?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $options, $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (props) {\n          execute($options[HOOK_BEFORE_PROPS_UPDATE], instance, props)\n          instance.set(props)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!props && oldValue === template.get()) {\n          instance.update(\n            template.get(constant.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { name, propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(name, key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = constant.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: ThisTask<this>): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(componentName: string | undefined, key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (value !== constant.UNDEFINED) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value, componentName)\n      }\n      else {\n\n        let matched = constant.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = constant.TRUE\n                return constant.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`, componentName)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`, componentName)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is undefined.`, componentName)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Function, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Function>,\n  listener?: Function,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Function, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Function, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return constant.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return (this as YoxInterface).get(SLOT_DATA_PREFIX + name) !== constant.UNDEFINED\n    }\n  })\n}\n"],"names":["SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","MODEL_PROP_DEFAULT","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","HOOK_BEFORE_PROPS_UPDATE","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","RAW_DOT","RAW_SLASH","KEYPATH_PARENT","KEYPATH_CURRENT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","func","value","constant.RAW_FUNCTION","array","Array","isArray","object","constant.NULL","string","number","isNaN","boolean","numeric","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","constant.UNDEFINED","call","CustomEvent","[object Object]","type","originalEvent","this","phase","PHASE_CURRENT","instance","isPrevented","preventDefault","constant.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","constant.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","target","indexOf","strict","result","constant.MINUS_ONE","index","last","pop","remove","splice","has","toArray","execute","constant.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","constant.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","keypath","list","string.indexOf","constant.RAW_DOT","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","constant.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","match","holder","keys","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","constant.EMPTY_FUNCTION","stylePrefix","constant.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","constant.GLOBAL","logLevel","getStyle","backgroundColor","debug","info","warn","error","fatal","Error","Emitter","ns","listeners","filter","namespace","parse","isComplete","object.copy","event","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","logger.fatal","name","matchListener","createMatchListener","object.each","arguments","logger.warn","string.slice","matchTrue","nextTick","setImmediate","isNative","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","shared","NextTask","tasks","run","array.unshift","task","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","constant.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","once","bind","unbind","hooks","ref","props","slots","isComponent","model","$model","checkProp","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","directive.update","component.update","guid","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions","loadComponent","object.has","field.VNODE","enterVnode","constant.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","nodeType.DIRECTIVE","keypathUtil.join","createProperty","hint","expr","nodeType.PROPERTY","createEach","from","to","equal","nodeType.EACH","nodeType.TEXT","isLeaf","constant.RAW_SLOT","constant.RAW_TEMPLATE","nodeType.IF","nodeType.PARTIAL","componentNamePattern","htmlEntityPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","staticTag","dynamicTag","nodeType.ELEMENT","creator.createElement","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifier","isProp","lookup","constant.KEYPATH_CURRENT","constant.KEYPATH_PARENT","createLiteral","createIdentifierInner","nodeType.LITERAL","createMemberIfNeeded","nodes","firstNode","shift","isLiteral","staticNodes","staticRaw","dynamicNodes","constant.RAW_SLASH","string.endsWith","nodeType.IDENTIFIER","firstName","array.join","firstRaw","createMemberInner","lead","nodeType.MEMBER","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isDef","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","array.last","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","String","fromCharCode","message","constant.RAW_TRUE","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","methodPattern","eventPattern","eventNamespacePattern","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","selfClosingTagPattern","slicePrefix","prefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","element","tagName","popStack","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processElementSingleText","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","processDirectiveSingleExpression","processDirectiveMultiChildren","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","checkDirective","openIndex","openText","closeIndex","closeText","helper.specialTags","setElementText","safe","replaceChild","exprNodeType.IDENTIFIER","binding","string.startsWith","getAttributeDefaultValue","isModel","isLazy","isEvent","isCustom","exprCompiler.compile","e","exprNodeType.LITERAL","exprNodeType.CALL","methodName","partial","isTemplate","attrs","hasType","constant.RAW_VALUE","creator.createProperty","compatElement","isStringValueRequired","constant.RAW_NAME","string.falsy","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","lastChild","textNode","toTextNode","addTextChild","creator.createText","htmlParsers","constant.RAW_TRANSITION","creator.createDirective","parts","string.camelize","lazy","custom","creator.createAttribute","lowerName","string.lower","blockParsers","source","terms","literal","creator.createEach","nodeType.IMPORT","creator.createIf","creator.createElseIf","nodeType.SPREAD","creator.createSpread","creator.createExpression","parseHtml","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","COMMA","COLON","QUESTION","EMPTY","RETURN","toGroup","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","collectStack","stringStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_COMMENT_VNODE","RENDER_ELEMENT_VNODE","RENDER_COMPONENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","RENDER_RANGE","RENDER_EQUAL_RANGE","ARG_STACK","renderExpression","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","needHolder","generateChildNode","generator.toString","generator.toGroup","generator.QUESTION","generator.COLON","generator.toArray","map","generator.toObject","identifier","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyFunction","stringifyExpressionArg","stringifyValue","stringifyChildren","generator.EMPTY","generator.COMMA","getComponentSlots","addSlot","array.falsy","object.falsy","obj","stringifyObject","codeArgs","setPair","outputTag","outputAttrs","outputHTML","outputChilds","outputSlots","outputStatic","outputOption","outputStyle","outputSvg","outputRef","outputKey","renderName","generator.RETURN","stringifyIf","generator.UNDEFINED","KEY_DIRECTIVES","textContent","innerHTML","createEvent","findElement","selector","constant.DOCUMENT","querySelector","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","documentElement","classes","CHAR_WHITESPACE","array.remove","PROPERTY_CHANGE","isBoxElement","IEEvent","object.extend","currentTarget","srcElement","returnValue","cancelBubble","getElementById","EMITTER","propertyName","constant.EVENT_CHANGE","constant.EVENT_CLICK","attachEvent","detachEvent","STYLE_SHEET","namespaces","svg","domain","emitterHolders","specialEvents","object.set","object.get","setAttribute","getAttribute","appendChild","constant.EVENT_MODEL","locked","on","find","cssText","addClass","removeClass","emitterKey","emitter","nativeListeners","special","nativeListener","customEvent","fire","createElementNS","createTextNode","removeAttribute","beforeNode","removeChild","nextSibling","nodeType","logger.info","Computed","sync","deps","observer","getter","setter","unique","watcher","$2","diff","watcherOptions","fixed","dep","watch","force","lastComputed","current","unwatch","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","constant.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","keypathUtil.match","readValue","count","optionsHolder","immediate","Observer","syncEmitter","asyncEmitter","asyncChanges","currentComputed","computed","setValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","formatWatcherOptions","toNumber","min","insert","object.clear","delay","timer","array.toArray","handler","debounce","constant.EVENT_TAP","domApi.on","$el","domApi.off","PHASE_DOWNWARD","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","selectControl","multiple","option","selected","selectedIndex","dataBinding","lazyValue","viewBinding","viewSyncing","control","eventName","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","TEMPLATE_COMPUTED","selectorPattern","Yox","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","rule","addComputed","method","placeholder","el","root","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","constant.RAW_DIRECTIVE","constant.RAW_PARTIAL","constant.RAW_FILTER","newWatchers","render","$template","snabbdom.create","domApi","plugin","install","templateCompiler.compile","templateGenerator.generate","getResource","setResource","addEvents","downward","$children","logger.error","PHASE_UPWARD","$components","$directives","$transitions","$partials","$filters","currentVnode","$scope","$keypath","$stack","vnodeStack","slotComponentStack","localPartials","renderedSlots","findValue","defaultKeypath","scope","globalHolder","$item","logger.debug","createMethodListener","$event","$data","createGetter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","appendVnode","renderCommentVnode","renderElementVnode","childs","renderComponentVnode","componentList","vnodeSlots","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","runtimeKeypath","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","slotProps","renderPartial","renderImport","renderEach","renderRange","renderEqualRange","eachHandler","lastScope","lastStack","concat","$length","templateRender.render","afterHook","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","logger","prototype","matchType","componentName","matched","required","addEvent","registry","componentCallback","queue","promise","then","formatValue"],"mappings":"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"}