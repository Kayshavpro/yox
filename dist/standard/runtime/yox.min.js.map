{"version":3,"file":"yox.min.js","sources":["../../../../../node_modules/yox-config/src/config.ts","../../../../../node_modules/yox-common/src/util/constant.ts","../../../../../node_modules/yox-common/src/util/is.ts","../../../../../node_modules/yox-common/src/function/execute.ts","../../../../../node_modules/yox-common/src/util/CustomEvent.ts","../../../../../node_modules/yox-common/src/util/array.ts","../../../../../node_modules/yox-common/src/util/string.ts","../../../../../node_modules/yox-common/src/util/keypath.ts","../../../../../node_modules/yox-common/src/util/holder.ts","../../../../../node_modules/yox-common/src/util/object.ts","../../../../../node_modules/yox-common/src/function/toString.ts","../../../../../node_modules/yox-common/src/util/logger.ts","../../../../../node_modules/yox-common/src/util/Emitter.ts","../../../../../node_modules/yox-common/src/function/isNative.ts","../../../../../node_modules/yox-common/src/function/nextTick.ts","../../../../../node_modules/yox-common/src/util/NextTask.ts","../../../../../node_modules/yox-snabbdom/src/field.ts","../../../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../../../node_modules/yox-snabbdom/src/directive.ts","../../../../../node_modules/yox-snabbdom/src/component.ts","../../../../../node_modules/yox-snabbdom/src/snabbdom.ts","../../../../../node_modules/yox-common/src/function/toNumber.ts","../../../../../node_modules/yox-template-compiler/src/renderer.ts","../../../../../node_modules/yox-common/src/function/isDef.ts","../../../../../node_modules/yox-dom/src/dom.ts","../../../../../node_modules/yox-observer/src/Computed.ts","../../../../../node_modules/yox-observer/src/function/readValue.ts","../../../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../../../node_modules/yox-observer/src/function/diffString.ts","../../../../../node_modules/yox-observer/src/function/diffArray.ts","../../../../../node_modules/yox-observer/src/function/diffObject.ts","../../../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../../../node_modules/yox-observer/src/Observer.ts","../../../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!(?:\\s|--)/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\nexport const HOOK_BEFORE_PROPS_UPDATE = 'beforePropsUpdate'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as constant from './constant'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === constant.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== constant.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : context !== constant.UNDEFINED\n        ? fn.call(context, args)\n        : args !== constant.UNDEFINED\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from 'yox-type/src/yox'\n\nimport * as constant from './constant'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = constant.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = constant.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = constant.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}","import * as is from './is'\nimport * as constant from './constant'\n\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = constant.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        result = index\n        return constant.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    constant.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(constant.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as constant from './constant'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? constant.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? constant.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, start !== constant.UNDEFINED ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, end !== constant.UNDEFINED ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as is from './is'\nimport * as string from './string'\nimport * as constant from './constant'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += constant.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : constant.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, index: number, lastIndex: number) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  // is.array() 比 splitCache.hasOwnProperty(keypath) 快一些\n  // 虽然不如后者严谨，但在这里够用了\n\n  let list: string[]\n\n  if (is.array(splitCache[keypath])) {\n    list = splitCache[keypath]\n  }\n  else {\n    if (string.indexOf(keypath, constant.RAW_DOT) < 0) {\n      list = [keypath]\n    }\n    else {\n      list = keypath.split(constant.RAW_DOT)\n    }\n    splitCache[keypath] = list\n  }\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i, lastIndex) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + constant.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, constant.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import {\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as constant from './constant'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: constant.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as constant from './constant'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n\n      if (object != constant.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = value !== constant.UNDEFINED\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (index === lastIndex) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = constant.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = constant.UNDEFINED\n        return constant.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n      if (index === lastIndex) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return constant.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return object[key] !== constant.UNDEFINED\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != constant.NULL && target.toString\n    ? target.toString()\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as string\n      : constant.EMPTY_STRING\n}\n","import * as constant from './constant'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== constant.RAW_UNDEFINED ? console : constant.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n * 源码模式默认选 INFO，因为 DEBUG 输出的日志太多，会导致性能急剧下降\n */\ndefaultLogLevel = /yox/.test(toString(constant.EMPTY_FUNCTION)) ? INFO : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = constant.WINDOW && /edge|msie|trident/i.test(constant.WINDOW.navigator.userAgent)\n  ? constant.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : constant.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (constant.GLOBAL) {\n    const logLevel = constant.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  EmitterNamespace,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport execute from '../function/execute'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\nimport * as constant from './constant'\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || constant.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | EmitterNamespace,\n    args: any[] | void,\n    filter?: (\n      namespace: EmitterNamespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = constant.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : constant.UNDEFINED\n\n      // 这里不用 array.each，减少函数调用\n      for (let i = 0, length = list.length; i < length; i++) {\n\n        let options = list[i]\n\n        // 命名空间不匹配\n        if (!matchNamespace(namespace.ns, options)\n          // 在 fire 过程中被移除了\n          || !array.has(list, options)\n          // 传了 filter，则用 filter 判断是否过滤此 options\n          || (filter && !filter(namespace, args, options))\n        ) {\n          continue\n        }\n\n        // 为 event 对象加上当前正在处理的 listener\n        // 这样方便业务层移除事件绑定\n        // 比如 on('xx', function) 这样定义了匿名 listener\n        // 在这个 listener 里面获取不到当前 listener 的引用\n        // 为了能引用到，有时候会先定义 var listener = function\n        // 然后再 on('xx', listener) 这样其实是没有必要的\n        if (event) {\n          event.listener = options.fn\n        }\n\n        let result = execute(options.fn, options.ctx, args)\n\n        if (event) {\n          event.listener = constant.UNDEFINED\n        }\n\n        // 执行次数\n        options.num = options.num ? (options.num + 1) : 1\n\n        // 注册的 listener 可以指定最大执行次数\n        if (options.num === options.max) {\n          instance.off(namespace, options.fn)\n        }\n\n        // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n        if (event) {\n          if (result === constant.FALSE) {\n            event.prevent().stop()\n          }\n          else if (event.isStoped) {\n            result = constant.FALSE\n          }\n        }\n\n        if (result === constant.FALSE) {\n          isComplete = constant.FALSE\n          break\n        }\n\n      }\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | EmitterNamespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | EmitterNamespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          constant.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == constant.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | EmitterNamespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = constant.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = constant.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): EmitterNamespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: constant.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, constant.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return constant.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options.fn\n      }\n    : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : constant.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as constant from '../util/constant'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === constant.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === constant.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from 'yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.attr(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeAttr(node, name)\n      }\n    }\n\n  }\n\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.prop(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeProp(node, name)\n      }\n    }\n\n  }\n\n}","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || constant.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || constant.EMPTY_OBJECT\n\n\n    for (let name in newValue) {\n\n      const directive = newValue[name],\n\n      { once, bind, unbind } = directive.hooks\n\n      if (!oldValue[name]) {\n        bind(node, directive, vnode)\n      }\n      else if (once\n        || directive.value !== oldValue[name].value\n        || isKeypathChange\n      ) {\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n        bind(node, directive, vnode)\n      }\n\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        const { unbind } = oldValue[name].hooks\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n      }\n    }\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    for (let name in directives) {\n      const { unbind } = directives[name].hooks\n      if (unbind) {\n        unbind(node, directives[name], vnode)\n      }\n    }\n  }\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport * as object from 'yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from 'yox-type/src/type'\n\nimport {\n  DomApi,\n} from 'yox-type/src/api'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || constant.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = constant.FALSE\n\n  directive.update(vnode)\n  component.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = constant.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(constant.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = constant.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    directive.update(vnode)\n    component.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = constant.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = constant.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = constant.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : constant.UNDEFINED\n\n      // 移动元素\n      if (oldIndex !== constant.UNDEFINED) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = constant.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n\n  // 先处理 directive 再处理 component\n  // 因为组件只是单纯的更新 props，而 directive 则有可能要销毁\n  // 如果顺序反过来，会导致某些本该销毁的指令先被数据的变化触发执行了\n  directive.update(vnode, oldVnode)\n  component.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, constant.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, constant.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as number\n      : 0\n}\n","import {\n  SLOT_DATA_PREFIX,\n} from 'yox-config/src/config'\n\nimport {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport globalHolder from 'yox-common/src/util/holder'\n\nimport Observer from 'yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: constant.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  currentVnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  slotComponentStack: Data[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  renderedSlots: Record<string, true> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index],\n\n    keypath = keypathUtil.join(scope.$keypath, key),\n\n    value: any = stack,\n\n    holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (defaultKeypath === constant.UNDEFINED) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (scope[key] !== constant.UNDEFINED) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (scope.$item !== constant.UNDEFINED) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === constant.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != constant.NULL && scope[key] !== constant.UNDEFINED) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = constant.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = constant.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = constant.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : constant.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (value: any) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const text = toString(value)\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        // 注释节点标签名是 '!'，这里区分一下\n        const textVnode: Data = {\n          tag: '#',\n          isText: constant.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    setPair(\n      currentVnode,\n      currentVnode.isComponent ? 'props' : 'nativeAttrs',\n      name,\n      value\n    )\n  },\n\n  renderPropertyVnode = function (name: string, value: any) {\n    setPair(currentVnode, 'nativeProps', name, value)\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair(currentVnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    currentVnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!currentVnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: constant.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : constant.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : constant.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    if (is.object(value)) {\n\n      // 数组也算一种对象\n      // 延展操作符不支持数组\n      if (process.env.NODE_ENV === 'development') {\n        if (is.array(value)) {\n          logger.fatal(`The spread operator can't be used by an array.`)\n        }\n      }\n\n      for (let key in value) {\n        setPair(currentVnode, 'props', key, value[key])\n      }\n\n      if (keypath) {\n        const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n        setPair(\n          currentVnode,\n          KEY_DIRECTIVES,\n          key,\n          {\n            ns: DIRECTIVE_BINDING,\n            name: constant.EMPTY_STRING,\n            key,\n            modifier: keypathUtil.join(keypath, constant.RAW_WILDCARD),\n            hooks: directives[DIRECTIVE_BINDING],\n          }\n        )\n      }\n\n    }\n\n  },\n\n  appendVnode = function (vnode: Data) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n    return vnode\n  },\n\n  renderCommentVnode = function () {\n    // 注释节点和文本节点需要有个区分\n    // 如果两者都没有 tag，则 patchVnode 时，会认为两者是 patchable 的\n    return appendVnode({\n      tag: '!',\n      isComment: constant.TRUE,\n      text: constant.EMPTY_STRING,\n      keypath: $scope.$keypath,\n      context,\n    })\n  },\n\n  renderElementVnode = function (\n    tag: string,\n    attrs: Function | void,\n    childs: Function | void,\n    isStatic: true | void,\n    isOption: true | void,\n    isStyle: true | void,\n    isSvg: true | void,\n    html: any | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      isStatic,\n      isOption,\n      isStyle,\n      isSvg,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n    }\n\n    if (isDef(html)) {\n      vnode.html = toString(html)\n    }\n\n    if (attrs) {\n      currentVnode = vnode\n      attrs()\n      currentVnode = constant.UNDEFINED\n    }\n\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderComponentVnode = function (\n    tag: string,\n    attrs: Function | void,\n    slots: Record<string, Function> | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n      isComponent: constant.TRUE,\n    }\n\n    const componentList = array.last(slotComponentStack)\n    if (componentList) {\n      array.push(componentList, vnode)\n    }\n\n    if (attrs) {\n      currentVnode = vnode\n      attrs()\n      currentVnode = constant.UNDEFINED\n    }\n\n    if (slots) {\n      const vnodeSlots = {}\n      for (let name in slots) {\n        vnodeStack.push([])\n        slotComponentStack.push([])\n        slots[name]()\n        const vnodes = array.pop(vnodeStack) as VNode[]\n        const components = array.pop(slotComponentStack) as VNode[]\n        if (vnodes.length) {\n          vnodeSlots[name] = {\n            vnodes,\n            components,\n          }\n        }\n        else {\n          // 必须要有值，用于覆盖旧值\n          vnodeSlots[name] = constant.UNDEFINED\n        }\n      }\n      vnode.slots = vnodeSlots\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    let myStack = stack || $stack, index = myStack.length - 1\n    if (offset) {\n      index -= offset\n    }\n    let result = findValue(myStack, index, name, lookup, depIgnore)\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, constant.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (runtimeKeypath !== constant.UNDEFINED) {\n      staticKeypath = array.join(runtimeKeypath as string[], constant.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = constant.UNDEFINED\n    globalHolder.value = match ? match.value : constant.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = constant.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || constant.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    slotProps = context.get(name)\n\n    if (vnodeList) {\n      if (slotProps) {\n        const { vnodes, components } = slotProps\n        for (let i = 0, length = vnodes.length; i < length; i++) {\n          array.push(vnodeList, vnodes[i])\n          vnodes[i].slot = name\n        }\n        for (let i = 0, length = components.length; i < length; i++) {\n          components[i].parent = context\n        }\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n    // 不能重复输出相同名称的 slot\n    if (process.env.NODE_ENV === 'development') {\n      if (renderedSlots[name]) {\n        logger.fatal(`The slot \"${string.slice(name, SLOT_DATA_PREFIX.length)}\" can't render more than one time.`)\n      }\n      renderedSlots[name] = constant.TRUE\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderCommentVnode,\n          renderElementVnode,\n          renderComponentVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (length !== constant.UNDEFINED) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, constant.EMPTY_STRING + i)\n            : constant.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderCommentVnode,\n    renderElementVnode,\n    renderComponentVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange\n  )\n\n}","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target !== constant.UNDEFINED\n}\n","import {\n  Listener,\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from 'yox-type/src/hooks'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\n\nlet guid = 0,\n\n// 这里先写 IE9 支持的接口\ntextContent = 'textContent',\n\ninnerHTML = 'innerHTML',\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n},\n\nfindElement = function (selector: string): Element | void {\n  const node = (constant.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, constant.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, constant.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (constant.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!constant.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!constant.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange',\n\n        isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = constant.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = constant.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE678\n        // 改用 data 属性\n        textContent = 'data'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for the legacy version.`)\n          }\n          const node = (constant.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === constant.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = constant.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              constant.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = constant.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, constant.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nemitterHolders: Record<string, Emitter> = {},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[constant.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = constant.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = constant.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = constant.FALSE\n      listener(event)\n    })\n    addEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[constant.EVENT_INPUT] = constant.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (constant.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (constant.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (constant.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (constant.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (value !== constant.UNDEFINED) {\n    object.set(node, name, value, constant.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string): void {\n  object.set(\n    node,\n    name,\n    constant.UNDEFINED\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (value !== constant.UNDEFINED) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != constant.NULL) {\n      return value\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (text !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[textContent] = text as string\n      }\n    }\n    else {\n      node[textContent] = text as string\n    }\n  }\n  else {\n    return node[textContent]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (html !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitterKey = node[EMITTER] || (node[EMITTER] = ++guid),\n\n  emitter = emitterHolders[emitterKey] || (emitterHolders[emitterKey] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitterKey = node[EMITTER],\n\n  emitter = emitterHolders[emitterKey],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (emitterHolders[emitterKey]\n    && object.falsy(listeners)\n  ) {\n    node[EMITTER] = constant.UNDEFINED\n    delete emitterHolders[emitterKey]\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" already exists.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(constant.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, constant.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = constant.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      constant.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == constant.NULL || keypath === constant.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath) !== constant.UNDEFINED) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      constant.RAW_LENGTH,\n      newIsString ? newValue.length : constant.UNDEFINED,\n      oldIsString ? oldValue.length : constant.UNDEFINED\n    )\n    return constant.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : constant.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : constant.UNDEFINED\n\n    callback(\n      constant.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : constant.UNDEFINED,\n        oldValue ? oldValue[i] : constant.UNDEFINED\n      )\n    }\n\n    return constant.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : constant.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : constant.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (keypathUtil.matchFuzzy(keypath, watchKeypath) !== constant.UNDEFINED) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: any, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: constant.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === constant.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Computed from './Computed'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === constant.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void\n\n    if (computed) {\n      result = object.get(computed, keypath)\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let next: any\n\n      keypathUtil.each(\n        keypath,\n        function (key, index, lastIndex) {\n\n          if (index === 0) {\n            if (computed && computed[key]) {\n              if (lastIndex === 0) {\n                computed[key].set(newValue)\n              }\n              else {\n                // 这里 next 可能为空\n                next = computed[key].get()\n              }\n            }\n            else {\n              if (lastIndex === 0) {\n                data[key] = newValue\n              }\n              else {\n                next = data[key] || (data[key] = {})\n              }\n            }\n            return\n          }\n\n          if (next) {\n            if (index === lastIndex) {\n              next[key] = newValue\n            }\n            else {\n              next = next[key] || (next[key] = {})\n            }\n          }\n\n        }\n      )\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = constant.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = constant.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = constant.TRUE,\n\n    sync = constant.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            constant.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === constant.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === constant.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return constant.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return constant.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return constant.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as array from '../util/array'\nimport * as constant from '../util/constant'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, constant.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = constant.UNDEFINED\n          if (!immediate) {\n            execute(fn, constant.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[constant.EMPTY_STRING]\n\n    if (value === constant.TRUE) {\n      name = constant.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === constant.EVENT_CLICK || name === constant.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += constant.RAW_DOT + modifier\n      }\n      // 监听组件事件不用处理父组件传下来的事件\n      let listener: Listener = function (event, data) {\n        if (event.phase !== CustomEvent.PHASE_DOWNWARD) {\n          return (handler as Listener)(event, data)\n        }\n      }\n      component.on(name, listener)\n      vnode.data[key] = function () {\n        component.off(name, listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n  LazyValue,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== constant.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: constant.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, constant.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, constant.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, constant.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return constant.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: constant.RAW_VALUE\n}\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[constant.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = constant.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== constant.TRUE) {\n        eventName = constant.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = constant.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (directive.hint !== constant.UNDEFINED) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = constant.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  Partial,\n  ThisTask,\n  ThisWatcher,\n  ThisListener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  ComponentOptions,\n  ThisWatcherOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from 'yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  HOOK_BEFORE_PROPS_UPDATE,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as snabbdom from 'yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateGenerator from 'yox-template-compiler/src/generator'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nimport Observer from 'yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(\n    plugin: {\n      install(Y: typeof Yox): void\n    }\n  ): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string | Function, stringify?: boolean): string | Function {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数\n      if (is.func(template)) {\n        return template as Function\n      }\n      if (!compileCache[template as string]) {\n        const nodes = templateCompiler.compile(template as string)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template as string] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template as string]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return template\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options?: ComponentOptions) {\n\n    const instance = this, $options: ComponentOptions = options || constant.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(constant.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp($options.name, key, value, rule)\n            }\n            if (value === constant.UNDEFINED) {\n              value = rule.value\n              if (value !== constant.UNDEFINED) {\n                source[key] = rule.type === constant.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = constant.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = constant.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(constant.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, constant.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, constant.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, constant.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, constant.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, constant.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: constant.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: constant.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        instance.watch(newWatchers)\n\n        if (process.env.NODE_ENV !== 'pure') {\n          execute(instance.$options[HOOK_AFTER_CREATE], instance)\n          instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n        }\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            constant.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    if (watchers) {\n      instance.watch(watchers)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute(instance.$options[HOOK_AFTER_CREATE], instance)\n      instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n    }\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener, constant.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (event.ns === constant.UNDEFINED) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === constant.TRUE) {\n      downward = constant.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    // 向上发事件会经过自己\n    // 如果向下发事件再经过自己，就产生了一次重叠\n    // 这是没有必要的，而且会导致向下发事件时，外部能接收到该事件，但我们的本意只是想让子组件接收到事件\n\n    isComplete = downward && event.target === instance\n      ? constant.TRUE\n      : $emitter.fire(event, args)\n\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, constant.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, ThisWatcher<this> | ThisWatcherOptions<this>>,\n    watcher?: ThisWatcher<this> | ThisWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: ThisWatcher<this>\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = constant.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(props?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $options, $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (props) {\n          execute($options[HOOK_BEFORE_PROPS_UPDATE], instance, props)\n          instance.set(props)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!props && oldValue === template.get()) {\n          instance.update(\n            template.get(constant.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { name, propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(name, key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = constant.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: ThisTask<this>): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(componentName: string | undefined, key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (value !== constant.UNDEFINED) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value, componentName)\n      }\n      else {\n\n        let matched = constant.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = constant.TRUE\n                return constant.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`, componentName)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`, componentName)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is undefined.`, componentName)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Function, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Function>,\n  listener?: Function,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Function, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Function, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return constant.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return (this as YoxInterface).get(SLOT_DATA_PREFIX + name) !== constant.UNDEFINED\n    }\n  })\n}\n"],"names":["DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_LENGTH","RAW_FUNCTION","RAW_WILDCARD","RAW_DOT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","func","value","constant.RAW_FUNCTION","array","Array","isArray","object","constant.NULL","string","number","isNaN","boolean","numeric","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","constant.UNDEFINED","call","type","originalEvent","this","phase","CustomEvent","PHASE_CURRENT","isPrevented","preventDefault","constant.TRUE","isStoped","stopPropagation","constant.MINUS_ONE","each","callback","reversed","length","i","constant.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","target","indexOf","strict","result","index","last","pop","remove","splice","has","toArray","execute","constant.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","str","start","end","is.number","constant.EMPTY_STRING","part","lastIndexOf","startsWith","codeAt","charCodeAt","upper","toUpperCase","lower","toLowerCase","is.string","replace","$0","$1","trim","offset","charAt","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","keypath","list","string.indexOf","constant.RAW_DOT","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","constant.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","match","holder","keys","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","constant.EMPTY_FUNCTION","stylePrefix","constant.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","constant.GLOBAL","logLevel","getStyle","backgroundColor","Error","ns","listeners","Emitter","filter","namespace","parse","isComplete","object.copy","event","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","name","ns_1","matchListener_1","createMatchListener","object.each","matchListener","string.slice","matchTrue","setImmediate","isNative","shared","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","tasks","NextTask","instance","nextTick","run","array.unshift","task","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","constant.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","_a","once","bind","unbind","ref","props","slots","isComponent","model","$model","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","directive.update","component.update","guid","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions_1","loadComponent","object.has","field.VNODE","enterVnode","constant.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component_1","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","component_2","done","destroyVnode","component","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","component_3","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","is.numeric","setPair","KEY_DIRECTIVES","render","observer","template","filters","partials","transitions","currentVnode","$scope","$keypath","$stack","vnodeStack","slotComponentStack","localPartials","findValue","stack","lookup","depIgnore","defaultKeypath","scope","keypathUtil.join","globalHolder","$item","object.get","createMethodListener","method","array.last","$event","$data","createGetter","getter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","hint","modifier","hooks","renderModelVnode","renderEventMethodVnode","handler","renderEventNameVnode","fire","renderDirectiveVnode","renderSpreadVnode","appendVnode","renderCommentVnode","renderElementVnode","attrs","childs","array.pop","renderComponentVnode","componentList","vnodeSlots","components","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","identifier","runtimeKeypath","array.join","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","slotProps","renderPartial","renderImport","partial","renderEach","renderRange","renderEqualRange","eachHandler","generate","lastScope","lastStack","concat","$length","from","to","count","textContent","innerHTML","createEvent","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","constant.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","array.remove","EMITTER","namespaces","svg","domain","emitterHolders","specialEvents","object.set","setAttribute","value_1","getAttribute","appendChild","constant.EVENT_MODEL","on","locked","find","selector","querySelector","addClass","removeClass","emitterKey","emitter","nativeListeners","special","nativeListener","customEvent","object.falsy","createElementNS","createTextNode","removeAttribute","beforeNode","oldNode","replaceChild","removeChild","nextSibling","nodeType","string.lower","tagName","sync","deps","setter","unique","watcher","$2","diff","watcherOptions","fixed","array.falsy","dep","watch","Computed","force","lastComputed","current","unwatch","source","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath_1","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","constant.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","prefix","string.startsWith","keypathUtil.match","readValue","optionsHolder","immediate","syncEmitter","asyncEmitter","asyncChanges","Observer","currentComputed","computed","setValue","string.codeAt","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","formatWatcherOptions","step","toNumber","min","insert","object.clear","delay","timer","args_1","array.toArray","arguments","lazy","constant.EVENT_CHANGE","debounce","constant.EVENT_CLICK","constant.EVENT_TAP","element","domApi.on","$el","domApi.off","listener_1","PHASE_DOWNWARD","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","array.indexOf","selectControl","multiple","option","selected","selectedIndex","values_1","dataBinding","lazyValue","viewBinding_1","viewSyncing_1","element_1","control_1","eventName_1","sync_1","binding","checkProp","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","TEMPLATE_COMPUTED","selectorPattern","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","object.extend","rule","addComputed","placeholder","el","root","model_1","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","constant.RAW_TRANSITION","constant.RAW_DIRECTIVE","constant.RAW_PARTIAL","constant.RAW_FILTER","newWatchers","$template","Yox","compile","snabbdom.create","domApi","plugin","install","stringify","getResource","setResource","addEvents","downward","$children","PHASE_UPWARD","$components","model_2","$directives","$transitions","$partials","$filters","templateRender.render","afterHook_1","instance_1","$options_1","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","is","logger","addEvent","registry","componentCallback","queue","promise","then","formatValue","hasSlot"],"mappings":"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"}