{"version":3,"file":"yox.esm.min.js","sources":["../../../../../node_modules/yox-config/src/config.ts","../../../../../node_modules/yox-common/src/util/constant.ts","../../../../../node_modules/yox-common/src/util/is.ts","../../../../../node_modules/yox-common/src/function/execute.ts","../../../../../node_modules/yox-common/src/util/CustomEvent.ts","../../../../../node_modules/yox-common/src/util/array.ts","../../../../../node_modules/yox-common/src/util/string.ts","../../../../../node_modules/yox-common/src/util/keypath.ts","../../../../../node_modules/yox-common/src/util/holder.ts","../../../../../node_modules/yox-common/src/util/object.ts","../../../../../node_modules/yox-common/src/function/toString.ts","../../../../../node_modules/yox-common/src/util/logger.ts","../../../../../node_modules/yox-common/src/util/Emitter.ts","../../../../../node_modules/yox-common/src/function/isNative.ts","../../../../../node_modules/yox-common/src/function/nextTick.ts","../../../../../node_modules/yox-common/src/util/NextTask.ts","../../../../../node_modules/yox-snabbdom/src/field.ts","../../../../../node_modules/yox-snabbdom/src/nativeAttr.ts","../../../../../node_modules/yox-snabbdom/src/nativeProp.ts","../../../../../node_modules/yox-snabbdom/src/directive.ts","../../../../../node_modules/yox-snabbdom/src/component.ts","../../../../../node_modules/yox-snabbdom/src/snabbdom.ts","../../../../../node_modules/yox-template-compiler/src/nodeType.ts","../../../../../node_modules/yox-template-compiler/src/helper.ts","../../../../../node_modules/yox-template-compiler/src/creator.ts","../../../../../node_modules/yox-template-compiler/src/platform/web.ts","../../../../../node_modules/yox-common/src/function/toNumber.ts","../../../../../node_modules/yox-expression-compiler/src/nodeType.ts","../../../../../node_modules/yox-common/src/function/isDef.ts","../../../../../node_modules/yox-expression-compiler/src/creator.ts","../../../../../node_modules/yox-expression-compiler/src/interpreter.ts","../../../../../node_modules/yox-expression-compiler/src/compiler.ts","../../../../../node_modules/yox-template-compiler/src/compiler.ts","../../../../../node_modules/yox-common/src/util/generator.ts","../../../../../node_modules/yox-template-compiler/src/generator.ts","../../../../../node_modules/yox-expression-compiler/src/generator.ts","../../../../../node_modules/yox-template-compiler/src/renderer.ts","../../../../../node_modules/yox-dom/src/dom.ts","../../../../../node_modules/yox-observer/src/Computed.ts","../../../../../node_modules/yox-observer/src/function/readValue.ts","../../../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../../../node_modules/yox-observer/src/function/diffString.ts","../../../../../node_modules/yox-observer/src/function/diffArray.ts","../../../../../node_modules/yox-observer/src/function/diffObject.ts","../../../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../../../node_modules/yox-observer/src/Observer.ts","../../../../../node_modules/yox-common/src/function/debounce.ts","../../../src/directive/event.ts","../../../src/directive/model.ts","../../../src/directive/binding.ts","../../../src/Yox.ts"],"sourcesContent":["export const SYNTAX_IF = '#if'\nexport const SYNTAX_ELSE = 'else'\nexport const SYNTAX_ELSE_IF = 'else if'\nexport const SYNTAX_EACH = '#each'\nexport const SYNTAX_PARTIAL = '#partial'\nexport const SYNTAX_IMPORT = '>'\nexport const SYNTAX_SPREAD = '...'\nexport const SYNTAX_COMMENT = /^!(?:\\s|--)/\n\nexport const SLOT_DATA_PREFIX = '$slot_'\nexport const SLOT_NAME_DEFAULT = 'children'\n\nexport const HINT_STRING = 1\nexport const HINT_NUMBER = 2\nexport const HINT_BOOLEAN = 3\n\nexport const DIRECTIVE_ON = 'on'\nexport const DIRECTIVE_LAZY = 'lazy'\nexport const DIRECTIVE_MODEL = 'model'\nexport const DIRECTIVE_EVENT = 'event'\nexport const DIRECTIVE_BINDING = 'binding'\nexport const DIRECTIVE_CUSTOM = 'o'\n\nexport const MODIFER_NATIVE = 'native'\n\nexport const MODEL_PROP_DEFAULT = 'value'\n\nexport const NAMESPACE_HOOK = '.hook'\n\nexport const HOOK_BEFORE_CREATE = 'beforeCreate'\nexport const HOOK_AFTER_CREATE = 'afterCreate'\nexport const HOOK_BEFORE_MOUNT = 'beforeMount'\nexport const HOOK_AFTER_MOUNT = 'afterMount'\nexport const HOOK_BEFORE_UPDATE = 'beforeUpdate'\nexport const HOOK_AFTER_UPDATE = 'afterUpdate'\nexport const HOOK_BEFORE_DESTROY = 'beforeDestroy'\nexport const HOOK_AFTER_DESTROY = 'afterDestroy'\n\nexport const HOOK_BEFORE_PROPS_UPDATE = 'beforePropsUpdate'\n","/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as constant from './constant'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === constant.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== constant.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : context !== constant.UNDEFINED\n        ? fn.call(context, args)\n        : args !== constant.UNDEFINED\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from 'yox-type/src/yox'\n\nimport * as constant from './constant'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = constant.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = constant.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = constant.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}","import * as is from './is'\nimport * as constant from './constant'\n\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = constant.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        result = index\n        return constant.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    constant.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(constant.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as constant from './constant'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? constant.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? constant.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, start !== constant.UNDEFINED ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, end !== constant.UNDEFINED ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as is from './is'\nimport * as string from './string'\nimport * as constant from './constant'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += constant.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : constant.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, index: number, lastIndex: number) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  // is.array() 比 splitCache.hasOwnProperty(keypath) 快一些\n  // 虽然不如后者严谨，但在这里够用了\n\n  let list: string[]\n\n  if (is.array(splitCache[keypath])) {\n    list = splitCache[keypath]\n  }\n  else {\n    if (string.indexOf(keypath, constant.RAW_DOT) < 0) {\n      list = [keypath]\n    }\n    else {\n      list = keypath.split(constant.RAW_DOT)\n    }\n    splitCache[keypath] = list\n  }\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i, lastIndex) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + constant.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, constant.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import {\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as constant from './constant'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: constant.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as constant from './constant'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n\n      if (object != constant.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = value !== constant.UNDEFINED\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (index === lastIndex) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = constant.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = constant.UNDEFINED\n        return constant.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, index, lastIndex) {\n      if (index === lastIndex) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return constant.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return object[key] !== constant.UNDEFINED\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != constant.NULL && target.toString\n    ? target.toString()\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as string\n      : constant.EMPTY_STRING\n}\n","import * as constant from './constant'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== constant.RAW_UNDEFINED ? console : constant.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n * 源码模式默认选 INFO，因为 DEBUG 输出的日志太多，会导致性能急剧下降\n */\ndefaultLogLevel = /yox/.test(toString(constant.EMPTY_FUNCTION)) ? INFO : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = constant.WINDOW && /edge|msie|trident/i.test(constant.WINDOW.navigator.userAgent)\n  ? constant.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : constant.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (constant.GLOBAL) {\n    const logLevel = constant.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  EmitterNamespace,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport execute from '../function/execute'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\nimport * as constant from './constant'\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || constant.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | EmitterNamespace,\n    args: any[] | void,\n    filter?: (\n      namespace: EmitterNamespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = constant.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : constant.UNDEFINED\n\n      // 这里不用 array.each，减少函数调用\n      for (let i = 0, length = list.length; i < length; i++) {\n\n        let options = list[i]\n\n        // 命名空间不匹配\n        if (!matchNamespace(namespace.ns, options)\n          // 在 fire 过程中被移除了\n          || !array.has(list, options)\n          // 传了 filter，则用 filter 判断是否过滤此 options\n          || (filter && !filter(namespace, args, options))\n        ) {\n          continue\n        }\n\n        // 为 event 对象加上当前正在处理的 listener\n        // 这样方便业务层移除事件绑定\n        // 比如 on('xx', function) 这样定义了匿名 listener\n        // 在这个 listener 里面获取不到当前 listener 的引用\n        // 为了能引用到，有时候会先定义 var listener = function\n        // 然后再 on('xx', listener) 这样其实是没有必要的\n        if (event) {\n          event.listener = options.fn\n        }\n\n        let result = execute(options.fn, options.ctx, args)\n\n        if (event) {\n          event.listener = constant.UNDEFINED\n        }\n\n        // 执行次数\n        options.num = options.num ? (options.num + 1) : 1\n\n        // 注册的 listener 可以指定最大执行次数\n        if (options.num === options.max) {\n          instance.off(namespace, options.fn)\n        }\n\n        // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n        if (event) {\n          if (result === constant.FALSE) {\n            event.prevent().stop()\n          }\n          else if (event.isStoped) {\n            result = constant.FALSE\n          }\n        }\n\n        if (result === constant.FALSE) {\n          isComplete = constant.FALSE\n          break\n        }\n\n      }\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | EmitterNamespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | EmitterNamespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          constant.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == constant.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | EmitterNamespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as EmitterNamespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = constant.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = constant.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): EmitterNamespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: constant.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, constant.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return constant.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n    ? function (options: EmitterOptions) {\n        return listener === options.fn\n      }\n    : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : constant.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as constant from '../util/constant'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === constant.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === constant.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from 'yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","// vnode.data 内部使用的几个字段\n\nexport const ID = '$id'\n\nexport const VNODE = '$vnode'\n\nexport const LOADING = '$loading'\n\nexport const COMPONENT = '$component'\n\nexport const LEAVING = '$leaving'","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeAttrs } = vnode,\n\n  oldNativeAttrs = oldVnode && oldVnode.nativeAttrs\n\n  if (nativeAttrs || oldNativeAttrs) {\n\n    const newValue = nativeAttrs || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeAttrs || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.attr(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeAttr(node, name)\n      }\n    }\n\n  }\n\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nexport function update(api: any, vnode: VNode, oldVnode?: VNode) {\n\n  const { node, nativeProps } = vnode,\n\n  oldNativeProps = oldVnode && oldVnode.nativeProps\n\n  if (nativeProps || oldNativeProps) {\n\n    const newValue = nativeProps || constant.EMPTY_OBJECT,\n\n    oldValue = oldNativeProps || constant.EMPTY_OBJECT\n\n    for (let name in newValue) {\n      if (oldValue[name] === constant.UNDEFINED\n        || newValue[name] !== oldValue[name]\n      ) {\n        api.prop(node, name, newValue[name])\n      }\n    }\n\n    for (let name in oldValue) {\n      if (newValue[name] === constant.UNDEFINED) {\n        api.removeProp(node, name)\n      }\n    }\n\n  }\n\n}","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  const { data, directives } = vnode,\n\n  oldDirectives = oldVnode && oldVnode.directives\n\n  if (directives || oldDirectives) {\n\n    const node = data[field.COMPONENT] || vnode.node,\n\n    isKeypathChange = oldVnode && vnode.keypath !== oldVnode.keypath,\n\n    newValue = directives || constant.EMPTY_OBJECT,\n\n    oldValue = oldDirectives || constant.EMPTY_OBJECT\n\n\n    for (let name in newValue) {\n\n      const directive = newValue[name],\n\n      { once, bind, unbind } = directive.hooks\n\n      if (!oldValue[name]) {\n        bind(node, directive, vnode)\n      }\n      else if (once\n        || directive.value !== oldValue[name].value\n        || isKeypathChange\n      ) {\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n        bind(node, directive, vnode)\n      }\n\n    }\n\n    for (let name in oldValue) {\n      if (!newValue[name]) {\n        const { unbind } = oldValue[name].hooks\n        if (unbind) {\n          unbind(node, oldValue[name], oldVnode as VNode)\n        }\n      }\n    }\n\n  }\n\n}\n\nexport function remove(vnode: VNode) {\n  const { directives } = vnode\n  if (directives) {\n    const node = vnode.data[field.COMPONENT] || vnode.node\n    for (let name in directives) {\n      const { unbind } = directives[name].hooks\n      if (unbind) {\n        unbind(node, directives[name], vnode)\n      }\n    }\n  }\n}\n","import {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport * as object from 'yox-common/src/util/object'\n\nimport * as field from './field'\n\nexport function update(vnode: VNode, oldVnode?: VNode) {\n\n  let { data, ref, props, slots, directives, context } = vnode, node: any\n\n  if (vnode.isComponent) {\n    node = data[field.COMPONENT]\n    // 更新时才要 set\n    // 因为初始化时，所有这些都经过构造函数完成了\n    if (oldVnode) {\n\n      const model = directives && directives[DIRECTIVE_MODEL]\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        props[node.$model] = model.value\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (props) {\n          object.each(\n            props,\n            function (value, key) {\n              node.checkProp(key, value)\n            }\n          )\n        }\n      }\n\n      const result = object.merge(props, slots)\n      if (result) {\n        node.forceUpdate(result)\n      }\n    }\n  }\n  else {\n    node = vnode.node\n  }\n\n  if (ref) {\n    const refs = context.$refs\n    if (refs) {\n      refs[ref] = node\n    }\n  }\n\n}\n","import {\n  Data,\n} from 'yox-type/src/type'\n\nimport {\n  DomApi,\n} from 'yox-type/src/api'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  ComponentOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as field from './field'\n\nimport * as nativeAttr from './nativeAttr'\nimport * as nativeProp from './nativeProp'\nimport * as directive from './directive'\nimport * as component from './component'\n\nfunction isPatchable(vnode: VNode, oldVnode: VNode): boolean {\n  return vnode.tag === oldVnode.tag\n    && vnode.key === oldVnode.key\n}\n\nfunction createKeyToIndex(vnodes: (VNode | void)[], startIndex: number, endIndex: number): Record<string, number> {\n\n  let result: Record<string, number> | void,\n\n  vnode: VNode | void,\n\n  key: string | void\n\n  while (startIndex <= endIndex) {\n    vnode = vnodes[startIndex]\n    if (vnode && (key = vnode.key)) {\n      if (!result) {\n        result = {}\n      }\n      result[key] = startIndex\n    }\n    startIndex++\n  }\n\n  return result || constant.EMPTY_OBJECT\n\n}\n\nfunction insertBefore(api: DomApi, parentNode: Node, node: Node, referenceNode: Node | void) {\n  if (referenceNode) {\n    api.before(parentNode, node, referenceNode)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n}\n\nfunction createComponent(vnode: VNode, options: ComponentOptions) {\n\n  const child = (vnode.parent || vnode.context).createComponent(options, vnode)\n\n  vnode.data[field.COMPONENT] = child\n  vnode.data[field.LOADING] = constant.FALSE\n\n  directive.update(vnode)\n  component.update(vnode)\n\n  return child\n\n}\n\nlet guid = 0\n\nfunction createData(): Data {\n  const data = {}\n  data[field.ID] = ++guid\n  return data\n}\n\nfunction createVnode(api: DomApi, vnode: VNode) {\n\n  let { tag, node, data, isComponent, isComment, isText, isStyle, isOption, children, text, html, context } = vnode\n\n  if (node && data) {\n    return\n  }\n\n  data = createData()\n\n  vnode.data = data\n\n  if (isText) {\n    vnode.node = api.createText(text as string)\n    return\n  }\n\n  if (isComment) {\n    vnode.node = api.createComment(text as string)\n    return\n  }\n\n  if (isComponent) {\n\n    let componentOptions: ComponentOptions | undefined = constant.UNDEFINED\n\n    // 动态组件，tag 可能为空\n    if (tag) {\n      context.loadComponent(\n        tag,\n        function (options: ComponentOptions) {\n          if (object.has(data, field.LOADING)) {\n            // 异步组件\n            if (data[field.LOADING]) {\n              // 尝试使用最新的 vnode\n              if (data[field.VNODE]) {\n                vnode = data[field.VNODE]\n                // 用完就删掉\n                delete data[field.VNODE]\n              }\n              enterVnode(\n                vnode,\n                createComponent(vnode, options)\n              )\n            }\n          }\n          // 同步组件\n          else {\n            componentOptions = options\n          }\n        }\n      )\n    }\n\n    // 不论是同步还是异步组件，都需要一个占位元素\n    vnode.node = api.createComment(constant.RAW_COMPONENT)\n\n    if (componentOptions) {\n      createComponent(vnode, componentOptions as ComponentOptions)\n    }\n    else {\n      data[field.LOADING] = constant.TRUE\n    }\n\n  }\n  else {\n\n    node = vnode.node = api.createElement(vnode.tag as string, vnode.isSvg)\n\n    if (children) {\n      addVnodes(api, node, children)\n    }\n    else if (text) {\n      api.text(node as Element, text, isStyle, isOption)\n    }\n    else if (html) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n\n    nativeAttr.update(api, vnode)\n    nativeProp.update(api, vnode)\n    directive.update(vnode)\n    component.update(vnode)\n\n  }\n}\n\nfunction addVnodes(api: DomApi, parentNode: Node, vnodes: VNode[], startIndex?: number, endIndex?: number, before?: VNode) {\n  let vnode: VNode, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    createVnode(api, vnode)\n    insertVnode(api, parentNode, vnode, before)\n    start++\n  }\n}\n\nfunction insertVnode(api: DomApi, parentNode: Node, vnode: VNode, before?: VNode) {\n\n  const { node, data, context } = vnode,\n\n  hasParent = api.parent(node)\n\n  // 这里不调用 insertBefore，避免判断两次\n  if (before) {\n    api.before(parentNode, node, before.node)\n  }\n  else {\n    api.append(parentNode, node)\n  }\n\n  // 普通元素和组件的占位节点都会走到这里\n  // 但是占位节点不用 enter，而是等组件加载回来之后再调 enter\n  if (!hasParent) {\n    let enter: Function | void = constant.UNDEFINED\n    if (vnode.isComponent) {\n      const component = data[field.COMPONENT]\n      if (component) {\n        enter = function () {\n          enterVnode(vnode, component)\n        }\n      }\n    }\n    else if (!vnode.isStatic && !vnode.isText && !vnode.isComment) {\n      enter = function () {\n        enterVnode(vnode)\n      }\n    }\n    if (enter) {\n      // 执行到这时，组件还没有挂载到 DOM 树\n      // 如果此时直接触发 enter，外部还需要做多余的工作，比如 setTimeout\n      // 索性这里直接等挂载到 DOM 数之后再触发\n      // 注意：YoxInterface 没有声明 $observer，因为不想让外部访问，\n      // 但是这里要用一次，所以加了 as any\n      (context as any).$observer.nextTask.prepend(enter)\n    }\n  }\n\n}\n\nfunction removeVnodes(api: DomApi, parentNode: Node, vnodes: (VNode | void)[], startIndex?: number, endIndex?: number) {\n  let vnode: VNode | void, start = startIndex || 0, end = endIndex !== constant.UNDEFINED ? endIndex as number : vnodes.length - 1\n  while (start <= end) {\n    vnode = vnodes[start]\n    if (vnode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    start++\n  }\n}\n\nfunction removeVnode(api: DomApi, parentNode: Node, vnode: VNode) {\n  const { node } = vnode\n  if (vnode.isStatic || vnode.isText || vnode.isComment) {\n    api.remove(parentNode, node)\n  }\n  else {\n\n    let done = function () {\n      destroyVnode(api, vnode)\n      api.remove(parentNode, node)\n    },\n\n    component: YoxInterface | void\n\n    if (vnode.isComponent) {\n      component = vnode.data[field.COMPONENT]\n      // 异步组件，还没加载成功就被删除了\n      if (!component) {\n        done()\n        return\n      }\n    }\n\n    leaveVnode(vnode, component, done)\n\n  }\n}\n\nfunction destroyVnode(api: DomApi, vnode: VNode) {\n\n  /**\n   * 如果一个子组件的模板是这样写的：\n   *\n   * <div>\n   *   {{#if visible}}\n   *      <slot name=\"children\"/>\n   *   {{/if}}\n   * </div>\n   *\n   * 当 visible 从 true 变为 false 时，不能销毁 slot 导入的任何 vnode\n   * 不论是组件或是元素，都不能销毁，只能简单的 remove，\n   * 否则子组件下一次展现它们时，会出问题\n   */\n\n  const { data, children, parent, slot } = vnode\n\n  // 销毁插槽组件\n\n  // 如果宿主组件正在销毁，$vnode 属性会在调 destroy() 之前被删除\n  // 这里表示的是宿主组件还没被销毁\n  // 如果宿主组件被销毁了，则它的一切都要进行销毁\n  if (slot && parent && parent.$vnode) {\n    // 如果更新时，父组件没有传入该 slot，则子组件需要销毁该 slot\n    const slots = parent.get(slot)\n    // slots 要么没有，要么是数组，不可能是别的\n    if (slots && array.has(slots, vnode)) {\n      return\n    }\n  }\n\n  if (vnode.isComponent) {\n    const component = data[field.COMPONENT]\n    if (component) {\n      directive.remove(vnode)\n      component.destroy()\n    }\n    else [\n      data[field.LOADING] = constant.FALSE\n    ]\n  }\n  else {\n    directive.remove(vnode)\n    if (children) {\n      array.each(\n        children,\n        function (child) {\n          destroyVnode(api, child)\n        }\n      )\n    }\n  }\n\n}\n\n/**\n * vnode 触发 enter hook 时，外部一般会做一些淡入动画\n */\nfunction enterVnode(vnode: VNode, component: YoxInterface | void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  execute(data[field.LEAVING])\n  if (transition) {\n    const { enter } = transition\n    if (enter) {\n      enter(\n        vnode.node as HTMLElement\n      )\n      return\n    }\n  }\n}\n\n/**\n * vnode 触发 leave hook 时，外部一般会做一些淡出动画\n * 动画结束后才能移除节点，否则无法产生动画\n * 这里由外部调用 done 来通知内部动画结束\n */\nfunction leaveVnode(vnode: VNode, component: YoxInterface | void, done: () => void) {\n  // 如果组件根元素和组件本身都写了 transition\n  // 优先用外面定义的\n  // 因为这明确是在覆盖配置\n  let { data, transition } = vnode\n  if (component && !transition) {\n    // 再看组件根元素是否有 transition\n    transition = (component.$vnode as VNode).transition\n  }\n  if (transition) {\n    const { leave } = transition\n    if (leave) {\n      leave(\n        vnode.node as HTMLElement,\n        data[field.LEAVING] = function () {\n          if (data[field.LEAVING]) {\n            done()\n            data[field.LEAVING] = constant.UNDEFINED\n          }\n        }\n      )\n      return\n    }\n  }\n  // 如果没有淡出动画，直接结束\n  done()\n}\n\nfunction updateChildren(api: DomApi, parentNode: Node, children: VNode[], oldChildren: (VNode | void)[]) {\n\n  let startIndex = 0,\n  endIndex = children.length - 1,\n  startVnode = children[startIndex],\n  endVnode = children[endIndex],\n\n  oldStartIndex = 0,\n  oldEndIndex = oldChildren.length - 1,\n  oldStartVnode = oldChildren[oldStartIndex],\n  oldEndVnode = oldChildren[oldEndIndex],\n\n  oldKeyToIndex: Record<string, number> | void,\n  oldIndex: number | void\n\n  while (oldStartIndex <= oldEndIndex && startIndex <= endIndex) {\n\n    // 下面有设为 UNDEFINED 的逻辑\n    if (!startVnode) {\n      startVnode = children[++startIndex];\n    }\n    else if (!endVnode) {\n      endVnode = children[--endIndex];\n    }\n    else if (!oldStartVnode) {\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n    else if (!oldEndVnode) {\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 从头到尾比较，位置相同且值得 patch\n    else if (isPatchable(startVnode, oldStartVnode)) {\n      patch(api, startVnode, oldStartVnode)\n      startVnode = children[++startIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 从尾到头比较，位置相同且值得 patch\n    else if (isPatchable(endVnode, oldEndVnode)) {\n      patch(api, endVnode, oldEndVnode)\n      endVnode = children[--endIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 比较完两侧的节点，剩下就是 位置发生改变的节点 和 全新的节点\n\n    // 当 endVnode 和 oldStartVnode 值得 patch\n    // 说明元素被移到右边了\n    else if (isPatchable(endVnode, oldStartVnode)) {\n      patch(api, endVnode, oldStartVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldStartVnode.node,\n        api.next(oldEndVnode.node)\n      )\n      endVnode = children[--endIndex]\n      oldStartVnode = oldChildren[++oldStartIndex]\n    }\n\n    // 当 oldEndVnode 和 startVnode 值得 patch\n    // 说明元素被移到左边了\n    else if (isPatchable(startVnode, oldEndVnode)) {\n      patch(api, startVnode, oldEndVnode)\n      insertBefore(\n        api,\n        parentNode,\n        oldEndVnode.node,\n        oldStartVnode.node\n      )\n      startVnode = children[++startIndex]\n      oldEndVnode = oldChildren[--oldEndIndex]\n    }\n\n    // 尝试同级元素的 key\n    else {\n\n      if (!oldKeyToIndex) {\n        oldKeyToIndex = createKeyToIndex(oldChildren, oldStartIndex, oldEndIndex)\n      }\n\n      // 新节点之前的位置\n      oldIndex = startVnode.key\n        ? oldKeyToIndex[startVnode.key]\n        : constant.UNDEFINED\n\n      // 移动元素\n      if (oldIndex !== constant.UNDEFINED) {\n        patch(api, startVnode, oldChildren[oldIndex as number] as VNode)\n        oldChildren[oldIndex as number] = constant.UNDEFINED\n      }\n      // 新元素\n      else {\n        createVnode(api, startVnode)\n      }\n\n      insertVnode(api, parentNode, startVnode, oldStartVnode)\n\n      startVnode = children[++startIndex]\n\n    }\n  }\n\n  if (oldStartIndex > oldEndIndex) {\n    addVnodes(\n      api,\n      parentNode,\n      children,\n      startIndex,\n      endIndex,\n      children[endIndex + 1]\n    )\n  }\n  else if (startIndex > endIndex) {\n    removeVnodes(\n      api,\n      parentNode,\n      oldChildren,\n      oldStartIndex,\n      oldEndIndex\n    )\n  }\n}\n\nexport function patch(api: DomApi, vnode: VNode, oldVnode: VNode) {\n\n  if (vnode === oldVnode) {\n    return\n  }\n\n  const { node, data } = oldVnode\n\n  // 如果不能 patch，则删除重建\n  if (!isPatchable(vnode, oldVnode)) {\n    // 同步加载的组件，初始化时不会传入占位节点\n    // 它内部会自动生成一个注释节点，当它的根 vnode 和注释节点对比时，必然无法 patch\n    // 于是走进此分支，为新组件创建一个 DOM 节点，然后继续 createComponent 后面的流程\n    const parentNode = api.parent(node)\n    createVnode(api, vnode)\n    if (parentNode) {\n      insertVnode(api, parentNode, vnode, oldVnode)\n      removeVnode(api, parentNode, oldVnode)\n    }\n    return\n  }\n\n  vnode.node = node\n  vnode.data = data\n\n  // 组件正在异步加载，更新为最新的 vnode\n  // 当异步加载完成时才能用上最新的 vnode\n  if (oldVnode.isComponent && data[field.LOADING]) {\n    data[field.VNODE] = vnode\n    return\n  }\n\n  nativeAttr.update(api, vnode, oldVnode)\n  nativeProp.update(api, vnode, oldVnode)\n\n  // 先处理 directive 再处理 component\n  // 因为组件只是单纯的更新 props，而 directive 则有可能要销毁\n  // 如果顺序反过来，会导致某些本该销毁的指令先被数据的变化触发执行了\n  directive.update(vnode, oldVnode)\n  component.update(vnode, oldVnode)\n\n  const { text, html, children, isStyle, isOption } = vnode,\n\n  oldText = oldVnode.text,\n  oldHtml = oldVnode.html,\n  oldChildren = oldVnode.children\n\n  if (is.string(text)) {\n    if (text !== oldText) {\n      api.text(node, text, isStyle, isOption)\n    }\n  }\n  else if (is.string(html)) {\n    if (html !== oldHtml) {\n      api.html(node as Element, html, isStyle, isOption)\n    }\n  }\n  // 两个都有需要 diff\n  else if (children && oldChildren) {\n    if (children !== oldChildren) {\n      updateChildren(api, node, children, oldChildren)\n    }\n  }\n  // 有新的没旧的 - 新增节点\n  else if (children) {\n    if (is.string(oldText) || is.string(oldHtml)) {\n      api.text(node, constant.EMPTY_STRING, isStyle)\n    }\n    addVnodes(api, node, children)\n  }\n  // 有旧的没新的 - 删除节点\n  else if (oldChildren) {\n    removeVnodes(api, node, oldChildren)\n  }\n  // 有旧的 text 没有新的 text\n  else if (is.string(oldText) || is.string(oldHtml)) {\n    api.text(node, constant.EMPTY_STRING, isStyle)\n  }\n\n}\n\nexport function create(api: DomApi, node: Node, context: YoxInterface, keypath: string): VNode {\n  return {\n    tag: api.tag(node),\n    data: createData(),\n    node,\n    context,\n    keypath,\n  }\n}\n\nexport function destroy(api: DomApi, vnode: VNode, isRemove?: boolean) {\n  if (isRemove) {\n    const parentNode = api.parent(vnode.node)\n    if (parentNode) {\n      removeVnode(api, parentNode, vnode)\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`The vnode can't be destroyed without a parent node.`)\n    }\n  }\n  else {\n    destroyVnode(api, vnode)\n  }\n}\n","/**\n * 元素 节点\n */\nexport const ELEMENT = 1\n\n/**\n * 属性 节点\n */\nexport const ATTRIBUTE = 2\n\n/**\n * 指令 节点\n */\nexport const DIRECTIVE = 3\n\n/**\n * 属性 节点\n */\nexport const PROPERTY = 4\n\n/**\n * 文本 节点\n */\nexport const TEXT = 5\n\n/**\n * if 节点\n */\nexport const IF = 6\n\n/**\n * else if 节点\n */\nexport const ELSE_IF = 7\n\n/**\n * else 节点\n */\nexport const ELSE = 8\n\n/**\n * each 节点\n */\nexport const EACH = 9\n\n/**\n * partial 节点\n */\nexport const PARTIAL = 10\n\n/**\n * import 节点\n */\nexport const IMPORT = 11\n\n/**\n * 表达式 节点\n */\nexport const EXPRESSION = 12\n\n/**\n * 延展操作 节点\n */\nexport const SPREAD = 13\n","import * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\n// 特殊标签\nexport const specialTags = {}\n// 特殊属性\nexport const specialAttrs = {}\n// 名称 -> 类型的映射\nexport const name2Type = {}\n\nspecialTags[constant.RAW_SLOT] =\nspecialTags[constant.RAW_TEMPLATE] =\n\nspecialAttrs[constant.RAW_KEY] =\nspecialAttrs[constant.RAW_REF] =\nspecialAttrs[constant.RAW_SLOT] = constant.TRUE\n\nname2Type['if'] = nodeType.IF\nname2Type['each'] = nodeType.EACH\nname2Type['partial'] = nodeType.PARTIAL\n\n","import {\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Each from './node/Each'\nimport Element from './node/Element'\nimport Else from './node/Else'\nimport ElseIf from './node/ElseIf'\nimport Expression from './node/Expression'\nimport If from './node/If'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\nimport Text from './node/Text'\n\nexport function createAttribute(name: string): Attribute {\n  return {\n    type: nodeType.ATTRIBUTE,\n    isStatic: constant.TRUE,\n    name,\n  }\n}\n\nexport function createDirective(name: string, ns: string, modifier?: string): Directive {\n  return {\n    type: nodeType.DIRECTIVE,\n    ns,\n    name,\n    key: keypathUtil.join(ns, name),\n    modifier,\n  }\n}\n\nexport function createProperty(name: string, hint: PropertyHint, value?: string | number | boolean, expr?: ExpressionNode, children?: Node[]): Property {\n  return {\n    type: nodeType.PROPERTY,\n    isStatic: constant.TRUE,\n    name,\n    hint,\n    value,\n    expr,\n    children,\n  }\n}\n\nexport function createEach(from: ExpressionNode, to: ExpressionNode | void, equal: boolean, index: string | void): Each {\n  return {\n    type: nodeType.EACH,\n    from,\n    to,\n    equal,\n    index,\n  }\n}\n\nexport function createElement(tag: string, dynamicTag: ExpressionNode | void, isSvg: boolean, isStyle: boolean, isComponent: boolean): Element {\n  return {\n    type: nodeType.ELEMENT,\n    tag,\n    dynamicTag,\n    isSvg,\n    isStyle,\n    // 只有 <option> 没有 value 属性时才为 true\n    isOption: constant.FALSE,\n    isComponent,\n    isStatic: !isComponent && tag !== constant.RAW_SLOT,\n  }\n}\n\nexport function createElse(): Else {\n  return {\n    type: nodeType.ELSE,\n  }\n}\n\nexport function createElseIf(expr: ExpressionNode): ElseIf {\n  return {\n    type: nodeType.ELSE_IF,\n    expr,\n  }\n}\n\nexport function createExpression(expr: ExpressionNode, safe: boolean): Expression {\n  return {\n    type: nodeType.EXPRESSION,\n    expr,\n    safe,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createIf(expr: ExpressionNode): If {\n  return {\n    type: nodeType.IF,\n    expr,\n  }\n}\n\nexport function createImport(name: string): Import {\n  return {\n    type: nodeType.IMPORT,\n    name,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createPartial(name: string): Partial {\n  return {\n    type: nodeType.PARTIAL,\n    name,\n  }\n}\n\nexport function createSpread(expr: ExpressionNode, binding: boolean): Spread {\n  return {\n    type: nodeType.SPREAD,\n    expr,\n    binding,\n    isLeaf: constant.TRUE,\n  }\n}\n\nexport function createText(text: string): Text {\n  return {\n    type: nodeType.TEXT,\n    text,\n    isStatic: constant.TRUE,\n    isLeaf: constant.TRUE,\n  }\n}","import {\n  HINT_STRING,\n  HINT_NUMBER,\n  HINT_BOOLEAN,\n} from 'yox-config/src/config'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\n\nimport Element from '../node/Element'\nimport Attribute from '../node/Attribute'\nimport Property from '../node/Property'\n\nimport * as helper from '../helper'\nimport * as creator from '../creator'\nimport * as nodeType from '../nodeType'\n\n// 首字母大写，或中间包含 -\nconst componentNamePattern = /^[A-Z]|-/,\n\n// HTML 实体（中间最多 6 位，没见过更长的）\nhtmlEntityPattern = /&[#\\w\\d]{2,6};/,\n\n// 常见的自闭合标签\nselfClosingTagNames = 'area,base,embed,track,source,param,input,col,img,br,hr'.split(','),\n\n// 常见的 svg 标签\nsvgTagNames = 'svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph,foreignObject'.split(','),\n\n// 常见的字符串类型的属性\n// 注意：autocomplete,autocapitalize 不是布尔类型\nstringProperyNames = 'id,class,name,value,for,accesskey,title,style,src,type,href,target,alt,placeholder,preload,poster,wrap,accept,pattern,dir,autocomplete,autocapitalize'.split(','),\n\n// 常见的数字类型的属性\nnumberProperyNames = 'min,minlength,max,maxlength,step,width,height,size,rows,cols,tabindex'.split(','),\n\n// 常见的布尔类型的属性\nbooleanProperyNames = 'disabled,checked,required,multiple,readonly,autofocus,autoplay,controls,loop,muted,novalidate,draggable,hidden,spellcheck'.split(','),\n\n// 某些属性 attribute name 和 property name 不同\nattr2Prop = {}\n\n// 列举几个常见的\nattr2Prop['for'] = 'htmlFor'\nattr2Prop['class'] = 'className'\nattr2Prop['accesskey'] = 'accessKey'\nattr2Prop['style'] = 'style.cssText'\nattr2Prop['novalidate'] = 'noValidate'\nattr2Prop['readonly'] = 'readOnly'\nattr2Prop['tabindex'] = 'tabIndex'\nattr2Prop['minlength'] = 'minLength'\nattr2Prop['maxlength'] = 'maxLength'\n\nexport function isSelfClosing(tagName: string) {\n  return array.has(selfClosingTagNames, tagName)\n}\n\nexport function createAttribute(element: Element, name: string): Attribute | Property {\n\n  // 组件用驼峰格式\n  if (element.isComponent) {\n    return creator.createAttribute(\n      string.camelize(name)\n    )\n  }\n  // 原生 dom 属性\n  else {\n\n    // 把 attr 优化成 prop\n    const lowerName = string.lower(name)\n\n    // <slot> 、<template> 或 svg 中的属性不用识别为 property\n    if (helper.specialTags[element.tag] || element.isSvg) {\n      return creator.createAttribute(name)\n    }\n    // 尝试识别成 property\n    else if (array.has(stringProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_STRING\n      )\n    }\n    else if (array.has(numberProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_NUMBER\n      )\n    }\n    else if (array.has(booleanProperyNames, lowerName)) {\n      return creator.createProperty(\n        attr2Prop[lowerName] || lowerName,\n        HINT_BOOLEAN\n      )\n    }\n\n    // 没辙，还是个 attribute\n    return creator.createAttribute(name)\n\n  }\n}\n\nexport function getAttributeDefaultValue(element: Element, name: string) {\n  // 比如 <Dog isLive>\n  if (element.isComponent) {\n    return constant.TRUE\n  }\n  // <div data-name checked>\n  return string.startsWith(name, 'data-')\n    ? constant.EMPTY_STRING\n    : name\n}\n\nexport function createElement(staticTag: string, dynamicTag: ExpressionNode | void) {\n\n  let isSvg = constant.FALSE, isStyle = constant.FALSE, isComponent = constant.FALSE\n\n  if (dynamicTag) {\n    isComponent = constant.TRUE\n  }\n  else {\n    isSvg = array.has(svgTagNames, staticTag)\n\n    // 是 svg 就不可能是组件\n    // 加这个判断的原因是，svg 某些标签含有 连字符 和 大写字母，比较蛋疼\n    if (!isSvg && componentNamePattern.test(staticTag)) {\n      isComponent = constant.TRUE\n    }\n    else if (staticTag === 'style') {\n      isStyle = constant.TRUE\n    }\n  }\n\n  return creator.createElement(\n    staticTag,\n    dynamicTag,\n    isSvg,\n    isStyle,\n    isComponent\n  )\n}\n\nexport function compatElement(element: Element) {\n\n  let { tag, attrs } = element, hasType = constant.FALSE, hasValue = constant.FALSE\n\n  if (attrs) {\n    array.each(\n      attrs,\n      function (attr) {\n\n        const name = attr.type === nodeType.PROPERTY\n          ? (attr as Property).name\n          : constant.UNDEFINED\n\n        if (name === 'type') {\n          hasType = constant.TRUE\n        }\n        else if (name === constant.RAW_VALUE) {\n          hasValue = constant.TRUE\n        }\n\n      }\n    )\n  }\n  // 补全 style 标签的 type\n\n  // style 如果没有 type 则加一个 type=\"text/css\"\n  // 因为低版本 IE 没这个属性，没法正常渲染样式\n  if (element.isStyle && !hasType) {\n    array.push(\n      element.attrs || (element.attrs = []),\n      creator.createProperty('type', HINT_STRING, 'text/css')\n    )\n  }\n  // 低版本 IE 需要给 option 标签强制加 value\n  else if (tag === 'option' && !hasValue) {\n    element.isOption = constant.TRUE\n  }\n\n}\n\nexport function setElementText(element: Element, text: string) {\n  if (htmlEntityPattern.test(text)) {\n    element.html = text\n    return constant.TRUE\n  }\n}","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as number\n      : 0\n}\n","/**\n * 字面量\n */\nexport const LITERAL = 1\n\n/**\n * 标识符\n */\nexport const IDENTIFIER = 2\n\n/**\n * 对象属性或数组下标\n */\nexport const MEMBER = 3\n\n/**\n * 一元表达式，如 - a\n */\nexport const UNARY = 4\n\n/**\n * 二元表达式，如 a + b\n */\nexport const BINARY = 5\n\n/**\n * 三元表达式，如 a ? b : c\n */\nexport const TERNARY = 6\n\n/**\n * 数组表达式，如 [ 1, 2, 3 ]\n */\nexport const ARRAY = 7\n\n/**\n * 对象表达式，如 { name: 'yox' }\n */\nexport const OBJECT = 8\n\n/**\n * 函数调用表达式，如 a()\n */\nexport const CALL = 9\n","import * as constant from '../util/constant'\n\nexport default function (target: any): boolean {\n  return target !== constant.UNDEFINED\n}\n","import toString from 'yox-common/src/function/toString'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\nimport Member from './node/Member'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\nimport Call from './node/Call'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function createArray(nodes: Node[], raw: string): ArrayNode {\n  return {\n    type: nodeType.ARRAY,\n    raw,\n    nodes,\n  }\n}\n\nexport function createBinary(left: Node, operator: string, right: Node, raw: string): Binary {\n  return {\n    type: nodeType.BINARY,\n    raw,\n    left,\n    operator,\n    right,\n  }\n}\n\nexport function createCall(name: Node, args: Node[], raw: string): Call {\n  return {\n    type: nodeType.CALL,\n    raw,\n    name,\n    args,\n  }\n}\n\nexport function createIdentifier(raw: string, name: string, isProp?: boolean): Identifier | Literal {\n\n  let lookup = constant.TRUE, offset = 0\n\n  if (name === constant.KEYPATH_CURRENT\n    || name === constant.KEYPATH_PARENT\n  ) {\n    lookup = constant.FALSE\n    if (name === constant.KEYPATH_PARENT) {\n      offset = 1\n    }\n    name = constant.EMPTY_STRING\n  }\n\n  // 对象属性需要区分 a.b 和 a[b]\n  // 如果不借用 Literal 无法实现这个判断\n  // 同理，如果用了这种方式，就无法区分 a.b 和 a['b']，但是无所谓，这两种表示法本就一个意思\n\n  return isProp\n    ? createLiteral(name, raw)\n    : createIdentifierInner(raw, name, lookup, offset)\n\n}\n\nexport function createLiteral(value: any, raw: string): Literal {\n  return {\n    type: nodeType.LITERAL,\n    raw,\n    value,\n  }\n}\n\nexport function createObject(keys: string[], values: Node[], raw: string): ObjectNode {\n  return {\n    type: nodeType.OBJECT,\n    raw,\n    keys,\n    values,\n  }\n}\n\nexport function createTernary(test: Node, yes: Node, no: Node, raw: string): Ternary {\n  return {\n    type: nodeType.TERNARY,\n    raw,\n    test,\n    yes,\n    no,\n  }\n}\n\nexport function createUnary(operator: string, node: Node, raw: string): Unary {\n  return {\n    type: nodeType.UNARY,\n    raw,\n    operator,\n    node,\n  }\n}\n\n/**\n * 通过判断 nodes 来决定是否需要创建 Member\n *\n * 创建 Member 至少需要 nodes 有两个节点\n */\nexport function createMemberIfNeeded(raw: string, nodes: Node[]): Node | Identifier | Member {\n\n  // 第一个节点要特殊处理\n  let firstNode = nodes.shift() as Node,\n\n  // 是否向上查找\n  lookup = constant.TRUE,\n\n  // 偏移量，默认从当前 context 开始查找\n  offset = 0\n\n  // 表示传入的 nodes 至少有两个节点（弹出了一个）\n  if (nodes.length > 0) {\n\n    // 处理剩下的 nodes\n    // 这里要做两手准备：\n    // 1. 如果全是 literal 节点，则编译时 join\n    // 2. 如果不全是 literal 节点，则运行时 join\n\n    // 是否全是 Literal 节点\n    let isLiteral = constant.TRUE,\n\n    // 静态节点\n    staticNodes: string[] = [],\n\n    // 对于 this.a.b[c] 这样的\n    // 要还原静态部分 this.a.b 的 raw\n    // 虽然 raw 没什么大用吧，谁让我是洁癖呢\n    staticRaw = constant.EMPTY_STRING,\n\n    // 动态节点\n    dynamicNodes: Node[] = []\n\n    array.each(\n      nodes,\n      function (node) {\n        if (isLiteral) {\n          if (node.type === nodeType.LITERAL) {\n            if ((node as Literal).raw === constant.KEYPATH_PARENT) {\n              offset += 1\n              staticRaw = staticRaw\n                ? staticRaw + constant.RAW_SLASH + constant.KEYPATH_PARENT\n                : constant.KEYPATH_PARENT\n              return\n            }\n            if ((node as Literal).raw !== constant.KEYPATH_CURRENT) {\n              const value = toString((node as Literal).value)\n              array.push(\n                staticNodes,\n                value\n              )\n              if (staticRaw) {\n                staticRaw += string.endsWith(staticRaw, constant.KEYPATH_PARENT)\n                  ? constant.RAW_SLASH\n                  : constant.RAW_DOT\n              }\n              staticRaw += value\n            }\n          }\n          else {\n            isLiteral = constant.FALSE\n          }\n        }\n\n        if (!isLiteral) {\n          array.push(\n            dynamicNodes,\n            node\n          )\n        }\n      }\n    )\n\n    // lookup 要求第一位元素是 Identifier，且它的 lookup 是 true 才为 true\n    // 其他情况都为 false，如 \"11\".length 第一位元素是 Literal，不存在向上寻找的需求\n\n    // 优化 1：计算 keypath\n    //\n    // 计算 keypath 的唯一方式是，第一位元素是 Identifier，后面都是 Literal\n    // 否则就表示中间包含动态元素，这会导致无法计算静态路径\n    // 如 a.b.c 可以算出 static keypath，而 a[b].c 则不行，因为 b 是动态的\n\n    // 优化 2：计算 offset 并智能转成 Identifier\n    //\n    // 比如 xx 这样的表达式，应优化成 offset = 2，并转成 Identifier\n\n    // 处理第一个节点\n    if (firstNode.type === nodeType.IDENTIFIER) {\n\n      lookup = (firstNode as Identifier).lookup\n      offset += (firstNode as Identifier).offset\n\n      let firstName = (firstNode as Identifier).name\n\n      // 不是 KEYPATH_THIS 或 KEYPATH_PARENT\n      if (firstName) {\n        array.unshift(staticNodes, firstName)\n      }\n\n      // 转成 Identifier\n      firstName = array.join(staticNodes, constant.RAW_DOT)\n\n      // a.b.c\n      if (isLiteral) {\n        firstNode = createIdentifierInner(raw, firstName, lookup, offset)\n      }\n      // a[b]\n      // this.a[b]\n      else {\n\n        // 当 isLiteral 为 false 时\n        // 需要为 lead 节点创建合适的 raw\n        let firstRaw = (firstNode as Identifier).raw\n        if (staticRaw) {\n          firstRaw += (\n            firstRaw === constant.KEYPATH_PARENT\n              ? constant.RAW_SLASH\n              : constant.RAW_DOT\n          ) + staticRaw\n        }\n\n        firstNode = createMemberInner(\n          raw,\n          createIdentifierInner(firstRaw, firstName, lookup, offset),\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n    else {\n      // 例子：\n      // \"xxx\".length\n      // format().a.b\n      if (isLiteral) {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          array.join(staticNodes, constant.RAW_DOT),\n          constant.UNDEFINED,\n          lookup,\n          offset\n        )\n      }\n      // 例子：\n      // \"xxx\"[length]\n      // format()[a]\n      else {\n        firstNode = createMemberInner(\n          raw,\n          firstNode,\n          constant.UNDEFINED,\n          dynamicNodes,\n          lookup,\n          offset\n        )\n      }\n    }\n\n  }\n\n  return firstNode\n\n}\n\nfunction createIdentifierInner(raw: string, name: string, lookup: boolean, offset: number): Identifier {\n  return {\n    type: nodeType.IDENTIFIER,\n    raw,\n    name,\n    lookup,\n    offset,\n  }\n}\n\nfunction createMemberInner(raw: string, lead: Node, keypath: string | void, nodes: Node[] | void, lookup: boolean, offset: number): Member {\n  return {\n    type: nodeType.MEMBER,\n    raw,\n    lead,\n    keypath,\n    nodes,\n    lookup,\n    offset,\n  }\n}\n","import * as constant from 'yox-common/src/util/constant'\n\nexport const unary = {\n  '+': constant.TRUE,\n  '-': constant.TRUE,\n  '~': constant.TRUE,\n  '!': constant.TRUE,\n  '!!': constant.TRUE,\n}\n\n// 参考 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\nexport const binary = {\n  '*': 14,\n  '/': 14,\n  '%': 14,\n  '+': 13,\n  '-': 13,\n  '<<': 12,\n  '>>': 12,\n  '>>>': 12,\n  '<': 11,\n  '<=': 11,\n  '>': 11,\n  '>=': 11,\n  '==': 10,\n  '!=': 10,\n  '===': 10,\n  '!==': 10,\n  '&': 9,\n  '^': 8,\n  '|': 7,\n  '&&': 6,\n  '||': 5,\n}","import isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\nimport * as interpreter from './interpreter'\n\nimport Node from './node/Node'\nimport Identifier from './node/Identifier'\nimport Literal from './node/Literal'\n\nexport function compile(content: string): Node | void {\n  if (!cache[content]) {\n    const parser = new Parser(content)\n    cache[content] = parser.scanTernary(CODE_EOF)\n  }\n  return cache[content]\n}\n\nexport class Parser {\n\n  end: number\n\n  code: number\n\n  index: number\n\n  content: string\n\n  constructor(content: string) {\n    const instance = this, { length } = content\n    instance.index = constant.MINUS_ONE\n    instance.end = length\n    instance.code = CODE_EOF\n    instance.content = content\n    instance.go()\n  }\n\n  /**\n   * 移动一个字符\n   */\n  go(step?: number) {\n\n    let instance = this, { index, end } = instance\n\n    index += step || 1\n\n    if (index >= 0 && index < end) {\n      instance.code = string.codeAt(instance.content, index)\n      instance.index = index\n    }\n    else {\n      instance.code = CODE_EOF\n      instance.index = index < 0 ? constant.MINUS_ONE : end\n    }\n\n  }\n\n  /**\n   * 跳过空白符\n   */\n  skip(step?: number) {\n\n    const instance = this, reversed = step && step < 0\n\n    // 如果表达式是 \"   xyz   \"，到达结尾后，如果希望 skip(-1) 回到最后一个非空白符\n    // 必须先判断最后一个字符是空白符，否则碰到 \"xyz\" 这样结尾不是空白符的，其实不应该回退\n    if (instance.code === CODE_EOF) {\n      const oldIndex = instance.index\n      instance.go(step)\n      // 如果跳一位之后不是空白符，还原，然后返回\n      if (!isWhitespace(instance.code)) {\n        instance.go(oldIndex - instance.index)\n        return\n      }\n    }\n    // 逆向时，只有位置真的发生过变化才需要在停止时正向移动一位\n    // 比如 (a) 如果调用 skip 前位于 )，调用 skip(-1) ，结果应该是原地不动\n    // 为了解决这个问题，应该首先判断当前是不是空白符，如果不是，直接返回\n    else if (!isWhitespace(instance.code)) {\n      return\n    }\n\n    // 如果是正向的，停在第一个非空白符左侧\n    // 如果是逆向的，停在第一个非空白符右侧\n    while (constant.TRUE) {\n      if (isWhitespace(instance.code)) {\n        instance.go(step)\n      }\n      else {\n        if (reversed) {\n          instance.go()\n        }\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 判断当前字符\n   */\n  is(code: number): boolean {\n    return this.code === code\n  }\n\n  /**\n   * 截取一段字符串\n   */\n  pick(startIndex: number, endIndex?: number): string {\n    return string.slice(this.content, startIndex, isDef(endIndex) ? endIndex : this.index)\n  }\n\n  /**\n   * 尝试解析下一个 token\n   */\n  scanToken(): Node | void {\n\n    const instance = this, { code, index } = instance\n\n    if (isIdentifierStart(code)) {\n      return instance.scanTail(\n        index,\n        [\n          instance.scanIdentifier(index)\n        ]\n      )\n    }\n    if (isDigit(code)) {\n      return instance.scanNumber(index)\n    }\n\n    switch (code) {\n\n      case CODE_EOF:\n        return\n\n      // 'x' \"x\"\n      case CODE_SQUOTE:\n      case CODE_DQUOTE:\n        return instance.scanTail(\n          index,\n          [\n            instance.scanString(index, code)\n          ]\n        )\n\n      // .1  ./  ../\n      case CODE_DOT:\n        instance.go()\n        return isDigit(instance.code)\n          ? instance.scanNumber(index)\n          : instance.scanPath(index)\n\n      // (xx)\n      case CODE_OPAREN:\n        instance.go()\n        return instance.scanTernary(CODE_CPAREN)\n\n      // [xx, xx]\n      case CODE_OBRACK:\n        return instance.scanTail(\n          index,\n          [\n            creator.createArray(\n              instance.scanTuple(index, CODE_CBRACK),\n              instance.pick(index)\n            )\n          ]\n        )\n\n      // { a: 'x', b: 'x' }\n      case CODE_OBRACE:\n        return instance.scanObject(index)\n\n    }\n\n    // 因为 scanOperator 会导致 index 发生变化，只能放在最后尝试\n    const operator = instance.scanOperator(index)\n    if (operator && interpreter.unary[operator]) {\n      const node = instance.scanTernary()\n      if (node) {\n        if (node.type === nodeType.LITERAL) {\n          const value = (node as Literal).value\n          if (is.number(value)) {\n            // 类似 ' -1 ' 这样的右侧有空格，需要撤回来\n            instance.skip(constant.MINUS_ONE)\n            return creator.createLiteral(\n              - value,\n              instance.pick(index)\n            )\n          }\n        }\n        // 类似 ' -a ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        return creator.createUnary(\n          operator,\n          node,\n          instance.pick(index)\n        )\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // 一元运算只有操作符没有表达式？\n        instance.fatal(index, `Expression expected.`)\n      }\n    }\n\n  }\n\n  /**\n   * 扫描数字\n   *\n   * 支持整数和小数\n   *\n   * @param startIndex\n   * @return\n   */\n  scanNumber(startIndex: number): Literal | void {\n\n    const instance = this\n\n    while (isNumber(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    // 尝试转型，如果转型失败，则确定是个错误的数字\n    if (is.numeric(raw)) {\n      return creator.createLiteral(+raw, raw)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      instance.fatal(startIndex, `Number expected.`)\n    }\n\n  }\n\n  /**\n   * 扫描字符串\n   *\n   * 支持反斜线转义引号\n   *\n   * @param startIndex\n   * @param endCode\n   */\n  scanString(startIndex: number, endCode: number): Literal {\n\n    const instance = this\n\n    loop: while (constant.TRUE) {\n\n      // 这句有两个作用：\n      // 1. 跳过开始的引号\n      // 2. 驱动 index 前进\n      instance.go()\n\n      switch (instance.code) {\n\n        // \\\" \\'\n        case CODE_BACKSLASH:\n          instance.go()\n          break\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，字符串还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n      }\n\n    }\n\n    // new Function 处理字符转义\n    const raw = instance.pick(startIndex)\n    return creator.createLiteral(\n      new Function(`return ${raw}`)(),\n      raw\n    )\n\n  }\n\n  /**\n   * 扫描对象字面量\n   *\n   * @param startIndex\n   */\n  scanObject(startIndex: number): Node {\n\n    let instance = this, keys: string[] = [], values: Node[] = [], isKey = constant.TRUE, node: Node | void\n\n    // 跳过 {\n    instance.go()\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        case CODE_CBRACE:\n          instance.go()\n          if (process.env.NODE_ENV === 'development') {\n            // 对象的 keys 和 values 的长度不一致\n            if (keys.length !== values.length) {\n              instance.fatal(startIndex, 'The number of keys and values must be equal.')\n            }\n          }\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，对象还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        // :\n        case CODE_COLON:\n          instance.go()\n          isKey = constant.FALSE\n          break\n\n        // ,\n        case CODE_COMMA:\n          instance.go()\n          isKey = constant.TRUE\n          break\n\n        default:\n          // 解析 key 的时候，node 可以为空，如 { } 或 { name: 'xx', }\n          // 解析 value 的时候，node 不能为空\n          node = instance.scanTernary()\n          if (isKey) {\n            if (node) {\n              // 处理 { key : value } key 后面的空格\n              instance.skip()\n              if (node.type === nodeType.IDENTIFIER) {\n                array.push(keys, (node as Identifier).name)\n              }\n              else if (node.type === nodeType.LITERAL) {\n                array.push(keys, (node as Literal).value)\n              }\n              else {\n                if (process.env.NODE_ENV === 'development') {\n                  // 对象的 key 必须是字面量或标识符\n                  instance.fatal(startIndex, 'The key of an object must be a literal or identifier.')\n                }\n                break loop\n              }\n            }\n          }\n          else if (node) {\n            // 处理 { key : value } value 后面的空格\n            instance.skip()\n            array.push(values, node)\n          }\n          // 类似这样 { key: }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // 对象的值没找到\n              instance.fatal(startIndex, `The value of the object was not found.`)\n            }\n            break loop\n          }\n      }\n    }\n\n    return creator.createObject(keys, values, instance.pick(startIndex))\n\n  }\n\n  /**\n   * 扫描元组，即 `a, b, c` 这种格式，可以是参数列表，也可以是数组\n   *\n   * @param startIndex\n   * @param endCode 元组的结束字符编码\n   */\n  scanTuple(startIndex: number, endCode: number): Node[] {\n\n    let instance = this, nodes: Node[] = [], node: Node | void\n\n    // 跳过开始字符，如 [ 和 (\n    instance.go()\n\n    loop: while (constant.TRUE) {\n      switch (instance.code) {\n\n        case endCode:\n          instance.go()\n          break loop\n\n        case CODE_EOF:\n          if (process.env.NODE_ENV === 'development') {\n            // 到头了，tuple 还没解析完呢？\n            instance.fatal(startIndex, 'Unexpected end of text.')\n          }\n          break loop\n\n        case CODE_COMMA:\n          instance.go()\n          break\n\n        default:\n          // 1. ( )\n          // 2. (1, 2, )\n          // 这三个例子都会出现 scanTernary 为空的情况\n          // 但是不用报错\n          node = instance.scanTernary()\n          if (node) {\n            // 为了解决 1 , 2 , 3 这样的写法\n            // 当解析出值后，先跳过后面的空格\n            instance.skip()\n            array.push(nodes, node)\n          }\n      }\n    }\n\n    return nodes\n\n  }\n\n  /**\n   * 扫描路径，如 `./` 和 `../`\n   *\n   * 路径必须位于开头，如 ./../ 或 ，不存在 a/../b/../c 这样的情况，因为路径是用来切换或指定 context 的\n   *\n   * @param startIndex\n   * @param prevNode\n   */\n  scanPath(startIndex: number): Node | void {\n\n    let instance = this, nodes: Node[] = [], name: string\n\n    // 进入此函数时，已确定前一个 code 是 CODE_DOT\n    // 此时只需判断接下来是 ./ 还是 / 就行了\n\n    while (constant.TRUE) {\n\n      // 要么是 current 要么是 parent\n      name = constant.KEYPATH_CURRENT\n\n      // ../\n      if (instance.is(CODE_DOT)) {\n        instance.go()\n        name = constant.KEYPATH_PARENT\n      }\n\n      array.push(\n        nodes,\n        creator.createIdentifier(name, name, nodes.length > 0)\n      )\n\n      // 如果以 / 结尾，则命中 ./ 或 ../\n      if (instance.is(CODE_SLASH)) {\n        instance.go()\n\n        // 没写错，这里不必强调 isIdentifierStart，数字开头也可以吧\n        if (isIdentifierPart(instance.code)) {\n          array.push(\n            nodes,\n            instance.scanIdentifier(instance.index, constant.TRUE)\n          )\n          return instance.scanTail(startIndex, nodes)\n        }\n        else if (instance.is(CODE_DOT)) {\n          // 先跳过第一个 .\n          instance.go()\n          // 继续循环\n        }\n        else {\n          // 类似 ./ 或 ../ 这样后面不跟标识符是想干嘛？报错可好？\n          if (process.env.NODE_ENV === 'development') {\n            instance.fatal(\n              startIndex,\n              `${(array.last(nodes) as Node).raw}/ must be followed by an identifier.`\n            )\n          }\n          break\n        }\n\n      }\n      // 类似 . 或 ..，可能就是想读取层级对象\n      // 此处不用关心后面跟的具体是什么字符，那是其他函数的事情，就算报错也让别的函数去报\n      // 此处也不用关心延展操作符，即 ...object，因为表达式引擎管不了这事，它没法把对象变成 attr1=value1 attr2=value2 的格式\n      // 这应该是模板引擎该做的事\n      else {\n        break\n      }\n    }\n\n  }\n\n  /**\n   * 扫描变量\n   */\n  scanTail(startIndex: number, nodes: Node[]): Node | never {\n\n    let instance = this, node: Node | void\n\n    /**\n     * 标识符后面紧着的字符，可以是 ( . [，此外还存在各种组合，感受一下：\n     *\n     * a.b.c().length\n     * a[b].c()()\n     * a[b][c]()[d](e, f, g).length\n     * [].length\n     */\n\n    loop: while (constant.TRUE) {\n\n      switch (instance.code) {\n\n        // a(x)\n        case CODE_OPAREN:\n          nodes = [\n            creator.createCall(\n              creator.createMemberIfNeeded(instance.pick(startIndex), nodes),\n              instance.scanTuple(instance.index, CODE_CPAREN),\n              instance.pick(startIndex)\n            )\n          ]\n          break\n\n        // a.x\n        case CODE_DOT:\n          instance.go()\n\n          // 接下来的字符，可能是数字，也可能是标识符，如果不是就报错\n          if (isIdentifierPart(instance.code)) {\n            // 无需识别关键字\n            array.push(\n              nodes,\n              instance.scanIdentifier(instance.index, constant.TRUE)\n            )\n            break\n          }\n          else {\n            if (process.env.NODE_ENV === 'development') {\n              // . 后面跟的都是啥玩意啊\n              instance.fatal(startIndex, 'Identifier or number expected.')\n            }\n            break loop\n          }\n\n        // a[]\n        case CODE_OBRACK:\n\n          // 过掉 [\n          instance.go()\n\n          node = instance.scanTernary(CODE_CBRACK)\n\n          if (node) {\n            array.push(nodes, node)\n            break\n          }\n          else {\n            // [] 内部不能为空\n            if (process.env.NODE_ENV === 'development') {\n              instance.fatal(startIndex, `[] is not allowed.`)\n            }\n            break loop\n          }\n\n        default:\n          break loop\n\n      }\n\n    }\n\n    return creator.createMemberIfNeeded(instance.pick(startIndex), nodes)\n\n  }\n\n  /**\n   * 扫描标识符\n   *\n   * @param startIndex\n   * @param isProp 是否是对象的属性\n   * @return\n   */\n  scanIdentifier(startIndex: number, isProp?: boolean): Identifier | Literal {\n\n    const instance = this\n\n    while (isIdentifierPart(instance.code)) {\n      instance.go()\n    }\n\n    const raw = instance.pick(startIndex)\n\n    return !isProp && raw in keywordLiterals\n      ? creator.createLiteral(keywordLiterals[raw], raw)\n      : creator.createIdentifier(raw, raw, isProp)\n\n  }\n\n  /**\n   * 扫描运算符\n   *\n   * @param startIndex\n   */\n  scanOperator(startIndex: number): string | void {\n\n    const instance = this\n\n    switch (instance.code) {\n\n      // /、%、~、^\n      case CODE_DIVIDE:\n      case CODE_MODULO:\n      case CODE_WAVE:\n      case CODE_XOR:\n        instance.go()\n        break;\n\n      // *\n      case CODE_MULTIPLY:\n        instance.go()\n        break\n\n      // +\n      case CODE_PLUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // ++\n          if (instance.is(CODE_PLUS)) {\n            instance.fatal(startIndex, 'The operator \"++\" is not supported.')\n          }\n        }\n        break\n\n      // -\n      case CODE_MINUS:\n        instance.go()\n        if (process.env.NODE_ENV === 'development') {\n          // --\n          if (instance.is(CODE_MINUS)) {\n            instance.fatal(startIndex, 'The operator \"--\" is not supported.')\n          }\n        }\n        break\n\n      // !、!!、!=、!==\n      case CODE_NOT:\n        instance.go()\n        if (instance.is(CODE_NOT)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        break\n\n      // &、&&\n      case CODE_AND:\n        instance.go()\n        if (instance.is(CODE_AND)) {\n          instance.go()\n        }\n        break\n\n      // |、||\n      case CODE_OR:\n        instance.go()\n        if (instance.is(CODE_OR)) {\n          instance.go()\n        }\n        break\n\n      // ==、===\n      case CODE_EQUAL:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n          if (instance.is(CODE_EQUAL)) {\n            instance.go()\n          }\n        }\n        // 一个等号要报错\n        else if (process.env.NODE_ENV === 'development') {\n          instance.fatal(startIndex, 'Assignment statements are not supported.')\n        }\n        break\n\n      // <、<=、<<\n      case CODE_LESS:\n        instance.go()\n        if (instance.is(CODE_EQUAL)\n          || instance.is(CODE_LESS)\n        ) {\n          instance.go()\n        }\n        break\n\n      // >、>=、>>、>>>\n      case CODE_GREAT:\n        instance.go()\n        if (instance.is(CODE_EQUAL)) {\n          instance.go()\n        }\n        else if (instance.is(CODE_GREAT)) {\n          instance.go()\n          if (instance.is(CODE_GREAT)) {\n            instance.go()\n          }\n        }\n        break\n    }\n\n    if (instance.index > startIndex) {\n      return instance.pick(startIndex)\n    }\n\n  }\n\n  /**\n   * 扫描二元运算\n   */\n  scanBinary(startIndex: number): Node | void {\n\n    // 二元运算，如 a + b * c / d，这里涉及运算符的优先级\n    // 算法参考 https://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    let instance = this,\n\n    // 格式为 [ index1, node1, index2, node2, ... ]\n    output: any[] = [],\n\n    token: Node | void,\n\n    index: number | void,\n\n    operator: string | void,\n\n    operatorPrecedence: number | void,\n\n    lastOperator: string | void,\n\n    lastOperatorPrecedence: number | void\n\n    while (constant.TRUE) {\n\n      instance.skip()\n\n      array.push(output, instance.index)\n\n      token = instance.scanToken()\n\n      if (token) {\n\n        array.push(output, token)\n\n        array.push(output, instance.index)\n\n        instance.skip()\n\n        operator = instance.scanOperator(instance.index)\n\n        // 必须是二元运算符，一元不行\n        if (operator && (operatorPrecedence = interpreter.binary[operator])) {\n\n          // 比较前一个运算符\n          index = output.length - 4\n\n          // 如果前一个运算符的优先级 >= 现在这个，则新建 Binary\n          // 如 a + b * c / d，当从左到右读取到 / 时，发现和前一个 * 优先级相同，则把 b * c 取出用于创建 Binary\n          if ((lastOperator = output[index])\n            && (lastOperatorPrecedence = interpreter.binary[lastOperator])\n            && lastOperatorPrecedence >= operatorPrecedence\n          ) {\n            output.splice(\n              index - 2,\n              5,\n              creator.createBinary(\n                output[index - 2],\n                lastOperator,\n                output[index + 2],\n                instance.pick(output[index - 3], output[index + 3])\n              )\n            )\n          }\n\n          array.push(output, operator)\n\n          continue\n\n        }\n        else {\n          operator = constant.UNDEFINED\n        }\n\n      }\n      // 比如不支持的表达式，a++ 之类的\n      else if (process.env.NODE_ENV === 'development') {\n        if (operator) {\n          instance.fatal(startIndex, 'Invalid syntax.')\n        }\n      }\n\n      // 没匹配到 token 或 operator 则跳出循环\n      break\n\n    }\n\n    // 类似 a + b * c 这种走到这会有 11 个\n    // 此时需要从后往前遍历，因为确定后面的优先级肯定大于前面的\n    while (constant.TRUE) {\n      // 最少的情况是 a + b，它有 7 个元素\n      if (output.length >= 7) {\n        index = output.length - 4\n        output.splice(\n          index - 2,\n          5,\n          creator.createBinary(\n            output[index - 2],\n            output[index],\n            output[index + 2],\n            instance.pick(output[index - 3], output[index + 3])\n          )\n        )\n      }\n      else {\n        return output[1]\n      }\n    }\n\n  }\n\n  /**\n   * 扫描三元运算\n   *\n   * @param endCode\n   */\n  scanTernary(endCode?: number): Node | void {\n\n    /**\n     * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n     *\n     * ?: 运算符的优先级几乎是最低的，比它低的只有四种： 赋值、yield、延展、逗号\n     * 我们不支持这四种，因此可认为 ?: 优先级最低\n     */\n\n    const instance = this\n\n    instance.skip()\n\n    let index = instance.index,\n\n    test = instance.scanBinary(index),\n\n    yes: Node | void,\n\n    no: Node | void\n\n    if (instance.is(CODE_QUESTION)) {\n      // 跳过 ?\n      instance.go()\n      yes = instance.scanTernary()\n\n      if (instance.is(CODE_COLON)) {\n        // 跳过 :\n        instance.go()\n        no = instance.scanTernary()\n      }\n\n      if (test && yes && no) {\n        // 类似 ' a ? 1 : 0 ' 这样的右侧有空格，需要撤回来\n        instance.skip(constant.MINUS_ONE)\n        test = creator.createTernary(\n          test, yes, no,\n          instance.pick(index)\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // 三元表达式语法错误\n        instance.fatal(index, `Invalid ternary syntax.`)\n      }\n    }\n\n    // 过掉结束字符\n    if (isDef(endCode)) {\n      instance.skip()\n      if (instance.is(endCode as number)) {\n        instance.go()\n      }\n      // 没匹配到结束字符要报错\n      else if (process.env.NODE_ENV === 'development') {\n        instance.fatal(\n          index,\n          `\"${String.fromCharCode(endCode as number)}\" expected, \"${String.fromCharCode(instance.code)}\" actually.`\n        )\n      }\n    }\n\n    return test\n\n  }\n\n  fatal(start: number, message: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling expression\\n\\n${this.content}\\n\\nmessage: ${message}\\n`)\n    }\n  }\n\n}\n\nconst cache = {},\n\nCODE_EOF = 0,        //\nCODE_DOT = 46,       // .\nCODE_COMMA = 44,     // ,\nCODE_SLASH = 47,     // /\nCODE_BACKSLASH = 92, // \\\nCODE_SQUOTE = 39,    // '\nCODE_DQUOTE = 34,    // \"\nCODE_OPAREN = 40,    // (\nCODE_CPAREN = 41,    // )\nCODE_OBRACK = 91,    // [\nCODE_CBRACK = 93,    // ]\nCODE_OBRACE = 123,   // {\nCODE_CBRACE = 125,   // }\nCODE_QUESTION = 63,  // ?\nCODE_COLON = 58,     // :\n\nCODE_PLUS = 43,      // +\nCODE_MINUS = 45,     // -\nCODE_MULTIPLY = 42,  // *\nCODE_DIVIDE = 47,    // /\nCODE_MODULO = 37,    // %\nCODE_WAVE = 126,     // ~\nCODE_AND = 38,       // &\nCODE_OR = 124,       // |\nCODE_XOR = 94,       // ^\nCODE_NOT = 33,       // !\nCODE_LESS = 60,      // <\nCODE_EQUAL = 61,     // =\nCODE_GREAT = 62,     // >\n\n/**\n * 区分关键字和普通变量\n * 举个例子：a === true\n * 从解析器的角度来说，a 和 true 是一样的 token\n */\nkeywordLiterals: Record<string, any> = {}\n\nkeywordLiterals[constant.RAW_TRUE] = constant.TRUE\nkeywordLiterals[constant.RAW_FALSE] = constant.FALSE\nkeywordLiterals[constant.RAW_NULL] = constant.NULL\nkeywordLiterals[constant.RAW_UNDEFINED] = constant.UNDEFINED\n\n/**\n * 是否是空白符，用下面的代码在浏览器测试一下\n *\n * ```\n * for (var i = 0; i < 200; i++) {\n *   console.log(i, String.fromCharCode(i))\n * }\n * ```\n *\n * 从 0 到 32 全是空白符，100 往上分布比较散且较少用，唯一需要注意的是 160\n *\n * 160 表示 non-breaking space\n * http://www.adamkoch.com/2009/07/25/white-space-and-character-160/\n */\nfunction isWhitespace(code: number): boolean {\n  return (code > 0 && code < 33) || code === 160\n}\n\n/**\n * 是否是数字\n */\nfunction isDigit(code: number): boolean {\n  return code > 47 && code < 58 // 0...9\n}\n\n/**\n * 是否是数字\n */\nfunction isNumber(code: number): boolean {\n  return isDigit(code) || code === CODE_DOT\n}\n\n/**\n * 变量开始字符必须是 字母、下划线、$\n */\nfunction isIdentifierStart(code: number): boolean {\n  return code === 36 // $\n    || code === 95   // _\n    || (code > 96 && code < 123) // a...z\n    || (code > 64 && code < 91)  // A...Z\n}\n\n/**\n * 变量剩余的字符必须是 字母、下划线、$、数字\n */\nfunction isIdentifierPart(code: number): boolean {\n  return isIdentifierStart(code) || isDigit(code)\n}\n","import {\n  SYNTAX_COMMENT,\n  SYNTAX_EACH,\n  SYNTAX_ELSE,\n  SYNTAX_ELSE_IF,\n  SYNTAX_IF,\n  SYNTAX_IMPORT,\n  SYNTAX_PARTIAL,\n  SYNTAX_SPREAD,\n  HINT_BOOLEAN,\n  HINT_NUMBER,\n  DIRECTIVE_ON,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_CUSTOM,\n  SLOT_NAME_DEFAULT,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport {\n  isSelfClosing,\n  createAttribute,\n  getAttributeDefaultValue,\n  createElement,\n  compatElement,\n  setElementText,\n} from './platform/web'\n\nimport toString from 'yox-common/src/function/toString'\nimport toNumber from 'yox-common/src/function/toNumber'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as exprCompiler from 'yox-expression-compiler/src/compiler'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\nimport ExpressionLiteral from 'yox-expression-compiler/src/node/Literal'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\n\nimport * as helper from './helper'\nimport * as creator from './creator'\nimport * as nodeType from './nodeType'\n\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Else from './node/Else'\nimport Node from './node/Node'\nimport Branch from './node/Branch'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport Partial from './node/Partial'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\n\n// 当前不位于 block 之间\nconst BLOCK_MODE_NONE = 1,\n\n// {{ x }}\nBLOCK_MODE_SAFE = 2,\n\n// {{{ x }}}\nBLOCK_MODE_UNSAFE = 3,\n\n// 缓存编译正则\npatternCache = {},\n\n// 指令分隔符，如 on-click 和 lazy-click\ndirectiveSeparator = '-',\n\n// 调用的方法\nmethodPattern = /^[_$a-z]([\\w]+)?$/,\n\n// 没有命名空间的事件\neventPattern = /^[_$a-z]([\\w]+)?$/i,\n\n// 有命名空间的事件\neventNamespacePattern = /^[_$a-z]([\\w]+)?\\.[_$a-z]([\\w]+)?$/i,\n\n// 换行符\n// 比较神奇是，有时候你明明看不到换行符，却真的存在一个，那就是 \\r\nbreaklinePattern = /^\\s*[\\n\\r]\\s*|\\s*[\\n\\r]\\s*$/g,\n\n// 区间遍历\nrangePattern = /\\s*(=>|->)\\s*/,\n\n// 标签\ntagPattern = /<(\\/)?([$a-z][-a-z0-9]*)/i,\n\n// 注释\ncommentPattern = /<!--[\\s\\S]*?-->/g,\n\n// 开始注释\nopenCommentPattern = /^([\\s\\S]*?)<!--/,\n\n// 结束注释\ncloseCommentPattern = /-->([\\s\\S]*?)$/,\n\n// 属性的 name\n// 支持 on-click.namespace=\"\" 或 on-get-out=\"\" 或 xml:xx=\"\"\nattributePattern = /^\\s*([-$.:\\w]+)(['\"])?(?:=(['\"]))?/,\n\n// 自闭合标签\nselfClosingTagPattern = /^\\s*(\\/)?>/\n\n/**\n * 截取前缀之后的字符串\n */\nfunction slicePrefix(str: string, prefix: string): string {\n  return string.trim(string.slice(str, prefix.length))\n}\n\nexport function compile(content: string): Branch[] {\n\n  let nodeList: Branch[] = [],\n\n  nodeStack: Branch[] = [],\n\n  // 持有 if/elseif/else 节点\n  ifStack: Node[] = [],\n\n  currentElement: Element | void,\n\n  currentAttribute: Attribute | Property | Directive | void,\n\n  length = content.length,\n\n  // 当前处理的位置\n  index = 0,\n\n  // 下一段开始的位置\n  nextIndex = 0,\n\n  // 开始定界符的位置，表示的是 {{ 的右侧位置\n  openBlockIndex = 0,\n\n  // 结束定界符的位置，表示的是 }} 的左侧位置\n  closeBlockIndex = 0,\n\n  // 当前正在处理或即将处理的 block 类型\n  blockMode = BLOCK_MODE_NONE,\n\n  // mustache 注释可能出现嵌套插值的情况\n  blockStack: boolean[] = [],\n\n  indexList: number[] = [],\n\n  code: string,\n\n  startQuote: string | void,\n\n  fatal = function (msg: string) {\n    if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`Error compiling template\\n\\n${content}\\n\\nmessage: ${msg}`)\n    }\n  },\n\n  /**\n   * 常见的两种情况：\n   *\n   * <div>\n   *    <input>1\n   * </div>\n   *\n   * <div>\n   *    <input>\n   * </div>\n   */\n  popSelfClosingElementIfNeeded = function (popingTagName?: string) {\n    const lastNode = array.last(nodeStack)\n    if (lastNode && lastNode.type === nodeType.ELEMENT) {\n      const element = lastNode as Element\n      if (element.tag !== popingTagName\n        && isSelfClosing(element.tag)\n      ) {\n        popStack(element.type, element.tag)\n      }\n    }\n  },\n\n  popStack = function (type: number, tagName?: string) {\n\n    const node = array.pop(nodeStack)\n\n    if (node && node.type === type) {\n\n      const { children } = node,\n\n      // 优化单个子节点\n      child = children && children.length === 1 && children[0],\n\n      isElement = type === nodeType.ELEMENT,\n\n      isAttribute = type === nodeType.ATTRIBUTE,\n\n      isProperty = type === nodeType.PROPERTY,\n\n      isDirective = type === nodeType.DIRECTIVE\n\n      const currentBranch = array.last(nodeStack)\n\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        if (isElement) {\n          const element = node as Element\n          if (tagName && element.tag !== tagName) {\n            fatal(`End tag is \"${tagName}\"，but start tag is \"${element.tag}\".`)\n          }\n        }\n      }\n\n      // 除了 helper.specialAttrs 里指定的特殊属性，attrs 里的任何节点都不能单独拎出来赋给 element\n      // 因为 attrs 可能存在 if，所以每个 attr 最终都不一定会存在\n      if (child) {\n\n        switch (child.type) {\n\n          case nodeType.TEXT:\n            // 属性的值如果是纯文本，直接获取文本值\n            // 减少渲染时的遍历\n            if (isElement) {\n              processElementSingleText(node as Element, child as Text)\n            }\n            else if (isAttribute) {\n              processAttributeSingleText(node as Attribute, child as Text)\n            }\n            else if (isProperty) {\n              processPropertySingleText(node as Property, child as Text)\n            }\n            else if (isDirective) {\n              processDirectiveSingleText(node as Directive, child as Text)\n            }\n            break\n\n          case nodeType.EXPRESSION:\n            if (isElement) {\n              processElementSingleExpression(node as Element, child as Expression)\n            }\n            else if (isAttribute) {\n              processAttributeSingleExpression(node as Attribute, child as Expression)\n            }\n            else if (isProperty) {\n              processPropertySingleExpression(node as Property, child as Expression)\n            }\n            else if (isDirective) {\n              processDirectiveSingleExpression(node as Directive, child as Expression)\n            }\n            break\n\n        }\n      }\n      // 大于 1 个子节点，即有插值或 if 写法\n      else if (children) {\n\n        if (isDirective) {\n          processDirectiveMultiChildren()\n        }\n        // 元素层级\n        else if (!currentElement) {\n          removeComment(children)\n          if (!children.length) {\n            node.children = constant.UNDEFINED\n          }\n        }\n\n      }\n      // 0 个子节点\n      else if (currentElement) {\n        if (isAttribute) {\n          processAttributeEmptyChildren(currentElement, node as Attribute)\n        }\n        else if (isProperty) {\n          processPropertyEmptyChildren(currentElement, node as Property)\n        }\n        else if (isDirective) {\n          processDirectiveEmptyChildren(currentElement, node as Directive)\n        }\n      }\n\n      if (type === nodeType.EACH) {\n        checkEach(node as Each)\n      }\n      else if (type === nodeType.PARTIAL) {\n        checkPartial(node as Partial)\n      }\n      else if (isElement) {\n        checkElement(node as Element)\n      }\n      else if (currentElement) {\n        if (isAttribute) {\n          if (isSpecialAttr(currentElement, node as Attribute)) {\n            bindSpecialAttr(currentElement, node as Attribute)\n          }\n        }\n        else if (isDirective) {\n          checkDirective(currentElement, node as Directive)\n        }\n      }\n\n      return node\n\n    }\n\n    // 出栈节点类型不匹配\n    if (process.env.NODE_ENV === 'development') {\n      fatal(`The type of poping node is not expected.`)\n    }\n  },\n\n  removeComment = function (children: Node[]) {\n\n    // 类似 <!-- xx {{name}} yy {{age}} zz --> 这样的注释里包含插值\n    // 按照目前的解析逻辑，是根据定界符进行模板分拆\n    // 一旦出现插值，children 长度必然大于 1\n\n    let openIndex = constant.MINUS_ONE,\n\n    openText = constant.EMPTY_STRING,\n\n    closeIndex = constant.MINUS_ONE,\n\n    closeText = constant.EMPTY_STRING\n\n    array.each(\n      children,\n      function (child, index) {\n        if (child.type === nodeType.TEXT) {\n          // 有了结束 index，这里的任务是配对开始 index\n          if (closeIndex >= 0) {\n            openText = (child as Text).text\n            // 处理 <!-- <!-- 这样有多个的情况\n            while (openCommentPattern.test(openText)) {\n              openText = RegExp.$1\n              openIndex = index\n            }\n\n            if (openIndex >= 0) {\n              // openIndex 肯定小于 closeIndex，因为完整的注释在解析过程中会被干掉\n              // 只有包含插值的注释才会走进这里\n\n              let startIndex = openIndex, endIndex = closeIndex\n\n              // 现在要确定开始和结束的文本节点，是否包含正常文本\n              if (openText) {\n                (children[openIndex] as Text).text = openText\n                startIndex++\n              }\n              if (closeText) {\n                // 合并开始和结束文本，如 1<!-- {{x}}{{y}} -->2\n                // 这里要把 1 和 2 两个文本节点合并成一个\n                if (openText) {\n                  (children[openIndex] as Text).text += closeText\n                }\n                else {\n                  (children[closeIndex] as Text).text = closeText\n                  endIndex--\n                }\n              }\n\n              children.splice(startIndex, endIndex - startIndex + 1)\n\n              // 重置，再继续寻找结束 index\n              openIndex = closeIndex = constant.MINUS_ONE\n            }\n          }\n          else {\n            // 从后往前遍历\n            // 一旦发现能匹配 --> 就可以断定这是注释的结束 index\n            // 剩下的就是找开始 index\n            closeText = (child as Text).text\n            // 处理 --> --> 这样有多个的情况\n            while (closeCommentPattern.test(closeText)) {\n              closeText = RegExp.$1\n              closeIndex = index\n            }\n          }\n        }\n      },\n      constant.TRUE\n    )\n  },\n\n  processDirectiveMultiChildren = function () {\n    // 不支持 on-click=\"1{{xx}}2\" 或是 on-click=\"1{{#if x}}x{{else}}y{{/if}}2\"\n    // 1. 很难做性能优化\n    // 2. 全局搜索不到事件名，不利于代码维护\n    // 3. 不利于编译成静态函数\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n  },\n\n  processElementSingleText = function (element: Element, child: Text) {\n\n    // processElementSingleText 和 processElementSingleExpression\n    // 不把元素子节点智能转换为 textContent property\n    // 因为子节点还有 <div>1{{a}}{{b}}</div> 这样的情况\n    // 还是在序列化的时候统一处理比较好\n\n    // 唯独需要在这特殊处理的是 html 实体\n    // 但这只是 WEB 平台的特殊逻辑，所以丢给 platform 处理\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && setElementText(element, child.text)\n    ) {\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processElementSingleExpression = function (element: Element, child: Expression) {\n\n    if (!element.isComponent\n      && !helper.specialTags[element.tag]\n      && !child.safe\n    ) {\n      element.html = child.expr\n      element.children = constant.UNDEFINED\n    }\n\n  },\n\n  processPropertyEmptyChildren = function (element: Element, prop: Property) {\n\n    if (prop.hint === HINT_BOOLEAN) {\n      prop.value = constant.TRUE\n    }\n    else {\n      // string 或 number 类型的属性，如果不写值，直接忽略\n      replaceChild(prop)\n    }\n\n  },\n\n  processPropertySingleText = function (prop: Property, child: Text) {\n\n    const { text } = child\n\n    // 这里需要严格校验格式，比如 width=\"100%\" 要打印报错信息，提示用户类型错误\n    if (prop.hint === HINT_NUMBER) {\n      if (process.env.NODE_ENV === 'development') {\n        if (is.numeric(text)) {\n          prop.value = +text\n        }\n        else {\n          fatal(`The value of \"${prop.name}\" is not a number: ${text}.`)\n        }\n      }\n      else {\n        prop.value = toNumber(text)\n      }\n    }\n    else if (prop.hint === HINT_BOOLEAN) {\n      prop.value = text === constant.RAW_TRUE || text === prop.name\n    }\n    else {\n      prop.value = text\n    }\n\n    prop.children = constant.UNDEFINED\n\n  },\n\n  processPropertySingleExpression = function (prop: Property, child: Expression) {\n\n    const { expr } = child\n\n    prop.expr = expr\n    prop.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      prop.binding = constant.TRUE\n    }\n\n  },\n\n  processAttributeEmptyChildren = function (element: Element, attr: Attribute) {\n\n    if (isSpecialAttr(element, attr)) {\n      if (process.env.NODE_ENV === 'development') {\n        fatal(`The value of \"${attr.name}\" is empty.`)\n      }\n    }\n    else {\n      attr.value = getAttributeDefaultValue(element, attr.name)\n    }\n\n  },\n\n  processAttributeSingleText = function (attr: Attribute, child: Text) {\n\n    attr.value = child.text\n    attr.children = constant.UNDEFINED\n\n  },\n\n  processAttributeSingleExpression = function (attr: Attribute, child: Expression) {\n\n    const { expr } = child\n\n    attr.expr = expr\n    attr.children = constant.UNDEFINED\n\n    // 对于有静态路径的表达式，可转为单向绑定指令，可实现精确更新视图，如下\n    // <div class=\"{{className}}\">\n\n    if (expr.type === exprNodeType.IDENTIFIER) {\n      attr.binding = constant.TRUE\n    }\n\n  },\n\n  processDirectiveEmptyChildren = function (element: Element, directive: Directive) {\n\n    directive.value = constant.TRUE\n\n  },\n\n  processDirectiveSingleText = function (directive: Directive, child: Text) {\n\n    let { text } = child,\n\n    // model=\"xx\" model=\"this.x\" 值只能是标识符或 Member\n    isModel = directive.ns === DIRECTIVE_MODEL,\n\n    // lazy 的值必须是大于 0 的数字\n    isLazy = directive.ns === DIRECTIVE_LAZY,\n\n    // 校验事件名称\n    // 且命名空间不能用 native\n    isEvent = directive.ns === DIRECTIVE_EVENT,\n\n    // 自定义指令运行不合法的表达式\n    isCustom = directive.ns === DIRECTIVE_CUSTOM,\n\n    // 指令的值是纯文本，可以预编译表达式，提升性能\n    expr: ExpressionNode | void,\n\n    error: any\n\n    try {\n      expr = exprCompiler.compile(text)\n    }\n    catch (e) {\n      error = e\n    }\n\n    if (expr) {\n\n      if (process.env.NODE_ENV === 'development') {\n\n        const { raw } = expr\n\n        if (isLazy) {\n          if (expr.type !== exprNodeType.LITERAL\n            || !is.number((expr as ExpressionLiteral).value)\n            || (expr as ExpressionLiteral).value <= 0\n          ) {\n            fatal('The value of lazy must be a number greater than 0.')\n          }\n        }\n\n        // 如果指令表达式是函数调用，则只能调用方法（难道还有别的可以调用的吗？）\n        else if (expr.type === exprNodeType.CALL) {\n          let methodName = (expr as ExpressionCall).name\n          if (methodName.type !== exprNodeType.IDENTIFIER) {\n            fatal('Invalid method name.')\n          }\n          // 函数调用调用方法，因此不能是 a.b() 的形式\n          else if (!methodPattern.test((methodName as ExpressionIdentifier).name)) {\n            fatal('Invalid method name.')\n          }\n        }\n\n        // 上面检测过方法调用，接下来事件指令只需要判断是否以下两种格式：\n        // on-click=\"name\" 或 on-click=\"name.namespace\"\n        else if (isEvent) {\n          if (eventPattern.test(raw) || eventNamespacePattern.test(raw)) {\n\n            // native 有特殊用处，不能给业务层用\n            if (eventNamespacePattern.test(raw)\n              && raw.split(constant.RAW_DOT)[1] === MODIFER_NATIVE\n            ) {\n              fatal(`The event namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n            }\n\n            // <Button on-click=\"click\"> 这种写法没有意义\n            if (currentElement\n              && currentElement.isComponent\n              && directive.name === raw\n            ) {\n              fatal(`The event name listened and fired can't be the same.`)\n            }\n\n          }\n          // 事件转换名称只能是 [name] 或 [name.namespace] 格式\n          else {\n            fatal('The event name and namespace must be an identifier.')\n          }\n        }\n\n        if (isModel && expr.type !== exprNodeType.IDENTIFIER) {\n          fatal('The value of the model must be an identifier.')\n        }\n\n      }\n\n      directive.expr = expr\n\n      directive.value = expr.type === exprNodeType.LITERAL\n        ? (expr as ExpressionLiteral).value\n        : text\n\n    }\n    else {\n      // 自定义指令支持错误的表达式\n      // 反正是自定义的规则，爱怎么写就怎么写\n      if (process.env.NODE_ENV === 'development') {\n        if (!isCustom) {\n          throw error\n        }\n      }\n      directive.value = text\n    }\n\n    directive.children = constant.UNDEFINED\n\n  },\n\n  processDirectiveSingleExpression = function (directive: Directive, child: Expression) {\n\n    if (process.env.NODE_ENV === 'development') {\n      fatal('For performance, \"{{\" and \"}}\" are not allowed in directive value.')\n    }\n\n  },\n\n  checkCondition = function (condition: If | ElseIf | Else) {\n\n    // 这里会去掉没有子节点的空分支\n\n    // 从最后一个节点往前遍历\n    let currentNode: any = condition,\n\n    prevNode: any,\n\n    hasChildren: boolean | void,\n\n    hasNext: boolean | void\n\n    while (constant.TRUE) {\n      // 当前分支有子节点\n      if (currentNode.children) {\n        // 从后往前遍历第一次发现非空分支\n        // 此时，可以删掉后面的空分支\n        if (!hasNext) {\n          if (currentNode.next) {\n            delete currentNode.next\n          }\n        }\n        hasChildren = hasNext = constant.TRUE\n      }\n      prevNode = currentNode.prev\n      if (prevNode) {\n        // prev 仅在 checkCondition 函数中用作逆向遍历\n        // 用完就可以删掉了\n        delete currentNode.prev\n        currentNode = prevNode\n      }\n      else {\n        break\n      }\n    }\n\n    // 所有分支都没有子节点，删掉整个 if\n    if (!hasChildren) {\n      replaceChild(currentNode)\n      return\n    }\n\n  },\n\n  checkEach = function (each: Each) {\n    // 没内容就干掉\n    if (!each.children) {\n      replaceChild(each)\n    }\n  },\n\n  checkPartial = function (partial: Partial) {\n    // 没内容就干掉\n    if (!partial.children) {\n      replaceChild(partial)\n    }\n  },\n\n  checkElement = function (element: Element) {\n\n    const { tag, slot } = element, isTemplate = tag === constant.RAW_TEMPLATE\n\n    if (process.env.NODE_ENV === 'development') {\n      if (isTemplate) {\n        if (element.key) {\n          fatal(`The \"key\" is not supported in <template>.`)\n        }\n        else if (element.ref) {\n          fatal(`The \"ref\" is not supported in <template>.`)\n        }\n        else if (element.attrs) {\n          fatal(`The attributes and directives are not supported in <template>.`)\n        }\n        else if (!slot) {\n          fatal(`The \"slot\" is required in <template>.`)\n        }\n      }\n    }\n\n    // 没有子节点，则意味着这个插槽没任何意义\n    if (isTemplate && slot && !element.children) {\n      replaceChild(element)\n    }\n    // <slot /> 如果没写 name，自动加上默认名称\n    else if (tag === constant.RAW_SLOT && !element.name) {\n      element.name = SLOT_NAME_DEFAULT\n    }\n    else {\n      compatElement(element)\n    }\n\n  },\n\n  checkDirective = function (element: Element, directive: Directive) {\n    if (process.env.NODE_ENV === 'development') {\n      // model 不能写在 if 里，影响节点的静态结构\n      if (directive.ns === DIRECTIVE_MODEL) {\n        if (array.last(nodeStack) !== element) {\n          fatal(`The \"model\" can't be used in an if block.`)\n        }\n      }\n    }\n  },\n\n  bindSpecialAttr = function (element: Element, attr: Attribute) {\n\n    const { name, value } = attr,\n\n    // 这三个属性值要求是字符串\n    isStringValueRequired = name === constant.RAW_NAME || name === constant.RAW_SLOT\n\n    if (process.env.NODE_ENV === 'development') {\n      // 因为要拎出来给 element，所以不能用 if\n      if (array.last(nodeStack) !== element) {\n        fatal(`The \"${name}\" can't be used in an if block.`)\n      }\n      // 对于所有特殊属性来说，空字符串是肯定不行的，没有任何意义\n      if (value === constant.EMPTY_STRING) {\n        fatal(`The value of \"${name}\" is empty.`)\n      }\n      else if (isStringValueRequired && string.falsy(value)) {\n        fatal(`The value of \"${name}\" can only be a string literal.`)\n      }\n    }\n\n    element[name] = isStringValueRequired ? value : attr\n    replaceChild(attr)\n\n  },\n\n  isSpecialAttr = function (element: Element, attr: Attribute): boolean {\n    return helper.specialAttrs[attr.name]\n      || element.tag === constant.RAW_SLOT && attr.name === constant.RAW_NAME\n  },\n\n  replaceChild = function (oldNode: Node, newNode?: Node) {\n\n    let currentBranch = array.last(nodeStack),\n\n    isAttr: boolean | void,\n\n    list: Node[] | void,\n\n    index: number\n\n    if (currentBranch) {\n      isAttr = currentElement && currentElement === currentBranch\n      list = isAttr\n        ? (currentBranch as Element).attrs\n        : currentBranch.children\n    }\n    else {\n      list = nodeList\n    }\n\n    if (list) {\n      index = array.indexOf(list, oldNode)\n      if (index >= 0) {\n        if (newNode) {\n          list[index] = newNode\n        }\n        else {\n          list.splice(index, 1)\n          if (currentBranch && !list.length) {\n            if (isAttr) {\n              delete (currentBranch as Element).attrs\n            }\n            else {\n              currentBranch.children = constant.UNDEFINED\n            }\n          }\n        }\n      }\n    }\n\n  },\n\n  addChild = function (node: Node) {\n\n    /**\n     * <div>\n     *    <input>\n     *    <div></div>\n     * </div>\n     *\n     * <div>\n     *    <input>xxx\n     * </div>\n     */\n    if (!currentElement) {\n      popSelfClosingElementIfNeeded()\n    }\n\n    let type = node.type, currentBranch = array.last(nodeStack)\n\n    // else 系列只是 if 的递进节点，不需要加入 nodeList\n    if (type === nodeType.ELSE || type === nodeType.ELSE_IF) {\n\n      const lastNode: any = array.pop(ifStack)\n\n      if (lastNode) {\n\n        // 方便 checkCondition 逆向遍历\n        (node as any).prev = lastNode\n\n        // lastNode 只能是 if 或 else if 节点\n        if (lastNode.type === nodeType.ELSE_IF || lastNode.type === nodeType.IF) {\n          lastNode.next = node\n          popStack(lastNode.type)\n          array.push(ifStack, node)\n        }\n        else if (type === nodeType.ELSE_IF) {\n          if (process.env.NODE_ENV === 'development') {\n            fatal('The \"else\" block must not be followed by an \"else if\" block.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" block can't appear more than once in a conditional statement.`)\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        fatal('The \"if\" block is required.')\n      }\n\n    }\n    else {\n\n      if (currentBranch) {\n        // 这里不能写 currentElement && !currentAttribute，举个例子\n        //\n        // <div id=\"x\" {{#if}} name=\"xx\" alt=\"xx\" {{/if}}\n        //\n        // 当 name 属性结束后，条件满足，但此时已不是元素属性层级了\n        if (currentElement && currentBranch.type === nodeType.ELEMENT) {\n\n          // 属性层级不能使用危险插值\n          if (process.env.NODE_ENV === 'development') {\n            if (type === nodeType.EXPRESSION\n              && !(node as Expression).safe\n            ) {\n              fatal('The dangerous interpolation must be the only child of a HTML element.')\n            }\n          }\n\n          // node 没法转型，一堆可能的类型怎么转啊...\n          array.push(\n            currentElement.attrs || (currentElement.attrs = []),\n            node as any\n          )\n\n        }\n        else {\n\n          const children = currentBranch.children || (currentBranch.children = []),\n          lastChild = array.last(children)\n\n          // 如果表达式是安全插值的字面量，可以优化成字符串\n          if (type === nodeType.EXPRESSION\n            // 在元素的子节点中，则直接转成字符串\n            && (!currentElement\n              // 在元素的属性中，如果同级节点大于 0 个（即已经存在一个），则可以转成字符串\n              || (currentAttribute && children.length > 0)\n            )\n          ) {\n            const textNode = toTextNode(node as Expression)\n            if (textNode) {\n              node = textNode\n              type = textNode.type\n            }\n          }\n\n          // 连续添加文本节点，则直接合并\n          if (lastChild\n            && type === nodeType.TEXT\n          ) {\n            // 合并两个文本节点\n            if (lastChild.type === nodeType.TEXT) {\n              (lastChild as Text).text += (node as Text).text\n              return\n            }\n            // 前一个是字面量的表达式，也可以合并节点\n            if (lastChild.type === nodeType.EXPRESSION) {\n              const textNode = toTextNode(lastChild as Expression)\n              if (textNode) {\n                children[children.length - 1] = textNode\n                textNode.text += (node as Text).text\n                return\n              }\n            }\n          }\n\n          if (process.env.NODE_ENV === 'development') {\n            if (type === nodeType.EXPRESSION\n              && !(node as Expression).safe\n            ) {\n              // 前面不能有别的 child，危险插值必须独占父元素\n              if (lastChild) {\n                fatal('The dangerous interpolation must be the only child of a HTML element.')\n              }\n              // 危险插值的父节点必须是 html element\n              else if (currentBranch.type !== nodeType.ELEMENT\n                || (currentBranch as Element).isComponent\n                || helper.specialTags[(currentBranch as Element).tag]\n              ) {\n                fatal('The dangerous interpolation must be the only child of a HTML element.')\n              }\n            }\n            // 后面不能有别的 child，危险插值必须独占父元素\n            else if (lastChild\n              && lastChild.type === nodeType.EXPRESSION\n              && !(lastChild as Expression).safe\n            ) {\n              fatal('The dangerous interpolation must be the only child of a HTML element.')\n            }\n          }\n\n          array.push(children, node)\n\n        }\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (type === nodeType.EXPRESSION\n            && !(node as Expression).safe\n          ) {\n            fatal('The dangerous interpolation must be under a HTML element.')\n          }\n        }\n        array.push(nodeList, node)\n      }\n\n      if (type === nodeType.IF) {\n        array.push(ifStack, node)\n      }\n\n    }\n\n\n\n    if (node.isLeaf) {\n      // 当前树枝节点如果是静态的，一旦加入了一个非静态子节点，改变当前树枝节点的 isStatic\n      // 这里不处理树枝节点的进栈，因为当树枝节点出栈时，还有一次处理机会，那时它的 isStatic 已确定下来，不会再变\n      if (currentBranch) {\n        if (currentBranch.isStatic && !node.isStatic) {\n          currentBranch.isStatic = constant.FALSE\n        }\n      }\n    }\n    else {\n      array.push(nodeStack, node)\n    }\n\n  },\n\n  addTextChild = function (text: string) {\n    // [注意]\n    // 这里不能随便删掉\n    // 因为收集组件的子节点会受影响，举个例子：\n    // <Component>\n    //\n    // </Component>\n    // 按现在的逻辑，这样的组件是没有子节点的，因为在这里过滤掉了，因此该组件没有 slot\n    // 如果这里放开了，组件就会有一个 slot\n\n    // trim 文本开始和结束位置的换行符\n    text = text.replace(breaklinePattern, constant.EMPTY_STRING)\n    if (text) {\n      addChild(\n        creator.createText(text)\n      )\n    }\n  },\n\n  toTextNode = function (node: Expression) {\n    if (node.safe\n      && node.expr.type === exprNodeType.LITERAL\n    ) {\n      return creator.createText(toString(\n        (node.expr as ExpressionLiteral).value\n      ))\n    }\n  },\n\n  htmlParsers = [\n    function (content: string): string | void {\n      if (!currentElement) {\n        const match = content.match(tagPattern)\n        // 必须以 <tag 开头才能继续\n        // 如果 <tag 前面有别的字符，会走进第四个 parser\n        if (match && match.index === 0) {\n          let tag = match[2]\n          if (match[1] === constant.RAW_SLASH) {\n            /**\n             * 处理可能存在的自闭合元素，如下\n             *\n             * <div>\n             *    <input>\n             * </div>\n             */\n            popSelfClosingElementIfNeeded(tag)\n\n            // 等到 > 字符才算真正的结束\n            currentElement = popStack(nodeType.ELEMENT, tag) as Element\n\n          }\n          else {\n\n            /**\n             * template 只能写在组件的第一级，如下：\n             *\n             * <Component>\n             *   <template slot=\"xx\">\n             *     111\n             *   </template>\n             * </Component>\n             */\n            if (process.env.NODE_ENV === 'development') {\n              if (tag === constant.RAW_TEMPLATE) {\n                const lastNode = array.last(nodeStack)\n                if (!lastNode || !(lastNode as Element).isComponent) {\n                  fatal('<template> can only be used within an component children.')\n                }\n              }\n            }\n\n            let dynamicTag: ExpressionNode | void\n\n            // 如果以 $ 开头，表示动态组件\n            if (string.codeAt(tag) === 36) {\n\n              // 编译成表达式\n              tag = string.slice(tag, 1)\n\n              dynamicTag = exprCompiler.compile(tag)\n              // 表达式必须是标识符类型\n              if (process.env.NODE_ENV === 'development') {\n                if (dynamicTag) {\n                  if (dynamicTag.type !== exprNodeType.IDENTIFIER) {\n                    fatal(`The dynamic component \"${tag}\" is not a valid identifier.`)\n                  }\n                }\n                else {\n                  fatal(`The dynamic component \"${tag}\" is not a valid expression.`)\n                }\n              }\n\n            }\n\n            const node = createElement(tag, dynamicTag)\n\n            addChild(node)\n            currentElement = node\n\n          }\n          return match[0]\n        }\n      }\n    },\n    // 处理标签的 > 或 />，不论开始还是结束标签\n    function (content: string): string | void {\n      const match = content.match(selfClosingTagPattern)\n      if (match) {\n\n        // 处理开始标签的 > 或 />\n        // 处理结束标签的 >\n        if (currentElement && !currentAttribute) {\n\n          // 自闭合标签\n          if (match[1] === constant.RAW_SLASH) {\n            popStack(currentElement.type, currentElement.tag)\n          }\n\n          currentElement = constant.UNDEFINED\n\n          return match[0]\n\n        }\n\n        // 如果只是写了一个 > 字符\n        // 比如 <div>></div>\n        // 则交给其他 parser 处理\n\n      }\n    },\n    // 处理 attribute directive 的 name 部分\n    function (content: string): string | void {\n      // 当前在 element 层级\n      if (currentElement && !currentAttribute) {\n        const match = content.match(attributePattern)\n        if (match) {\n\n          // <div class=\"11 name=\"xxx\"></div>\n          // 这里会匹配上 xxx\"，match[2] 就是那个引号\n          if (process.env.NODE_ENV === 'development') {\n            if (match[2]) {\n              fatal(`The previous attribute is not end.`)\n            }\n          }\n\n          let node: Attribute | Directive | Property, name = match[1]\n\n          if (name === DIRECTIVE_MODEL || name === constant.RAW_TRANSITION) {\n            node = creator.createDirective(\n              constant.EMPTY_STRING,\n              name\n            )\n          }\n          // 这里要用 on- 判断前缀，否则 on 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_ON + directiveSeparator)) {\n            let event = slicePrefix(name, DIRECTIVE_ON + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!event) {\n                fatal('The event name is required.')\n              }\n            }\n            const parts = string.camelize(event).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              parts[0],\n              DIRECTIVE_EVENT,\n              parts[1]\n            )\n            // on-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(parts[2])) {\n                fatal('Invalid event namespace.')\n              }\n            }\n          }\n          // 当一个元素绑定了多个事件时，可分别指定每个事件的 lazy\n          // 当只有一个事件时，可简写成 lazy\n          // <div on-click=\"xx\" lazy-click\n          else if (string.startsWith(name, DIRECTIVE_LAZY)) {\n            let lazy = slicePrefix(name, DIRECTIVE_LAZY)\n            if (string.startsWith(lazy, directiveSeparator)) {\n              lazy = slicePrefix(lazy, directiveSeparator)\n            }\n            node = creator.createDirective(\n              lazy ? string.camelize(lazy) : constant.EMPTY_STRING,\n              DIRECTIVE_LAZY\n            )\n          }\n          // 这里要用 o- 判断前缀，否则 o 太容易重名了\n          else if (string.startsWith(name, DIRECTIVE_CUSTOM + directiveSeparator)) {\n            const custom = slicePrefix(name, DIRECTIVE_CUSTOM + directiveSeparator)\n            if (process.env.NODE_ENV === 'development') {\n              if (!custom) {\n                fatal('The directive name is required.')\n              }\n            }\n            const parts = string.camelize(custom).split(constant.RAW_DOT)\n            node = creator.createDirective(\n              parts[0],\n              DIRECTIVE_CUSTOM,\n              parts[1]\n            )\n            // o-a.b.c\n            if (process.env.NODE_ENV === 'development') {\n              if (is.string(parts[2])) {\n                fatal('Invalid directive modifier.')\n              }\n            }\n          }\n          else {\n            node = createAttribute(currentElement, name)\n          }\n\n          addChild(node)\n\n          // 这里先记下，下一个 handler 要匹配结束引号\n          startQuote = match[3]\n\n          // 有属性值才需要设置 currentAttribute，便于后续收集属性值\n          if (startQuote) {\n            currentAttribute = node\n          }\n          else {\n            popStack(node.type)\n          }\n\n          return match[0]\n        }\n      }\n    },\n    function (content: string): string | void {\n\n      let text: string | void, match: RegExpMatchArray | null\n\n      // 处理 attribute directive 的 value 部分\n      if (currentAttribute && startQuote) {\n\n        match = content.match(patternCache[startQuote] || (patternCache[startQuote] = new RegExp(startQuote)))\n\n        // 有结束引号\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          addTextChild(text as string)\n\n          text += startQuote\n\n          // attribute directive 结束了\n          // 此时如果一个值都没收集到，需设置一个空字符串\n          // 否则无法区分 <div a b=\"\"> 中的 a 和 b\n          if (!currentAttribute.children) {\n            addChild(\n              creator.createText(constant.EMPTY_STRING)\n            )\n          }\n\n          popStack(currentAttribute.type)\n          currentAttribute = constant.UNDEFINED\n\n        }\n        // 没有结束引号，整段匹配\n        // 如 id=\"1{{x}}2\" 中的 1\n        else if (blockMode !== BLOCK_MODE_NONE) {\n          text = content\n          addTextChild(text)\n        }\n        // 没找到结束引号\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`Unterminated quoted string in \"${currentAttribute.name}\".`)\n        }\n\n      }\n      // 如果不加判断，类似 <div {{...obj}}> 这样写，会把空格当做一个属性\n      // 收集文本只有两处：属性值、元素内容\n      // 属性值通过上面的 if 处理过了，这里只需要处理元素内容\n      else if (!currentElement) {\n\n        // 获取 <tag 前面的字符\n        match = content.match(tagPattern)\n\n        // 元素层级的注释都要删掉\n        if (match) {\n          text = string.slice(content, 0, match.index)\n          if (text) {\n            addTextChild(\n              text.replace(commentPattern, constant.EMPTY_STRING)\n            )\n          }\n        }\n        else {\n          text = content\n          addTextChild(\n            text.replace(commentPattern, constant.EMPTY_STRING)\n          )\n        }\n\n      }\n      else {\n        if (process.env.NODE_ENV === 'development') {\n          if (string.trim(content)) {\n            fatal(`Invalid character is found in <${currentElement.tag}> attribute level.`)\n          }\n        }\n        text = content\n      }\n      return text\n    },\n  ],\n\n  blockParsers = [\n    // {{#each xx:index}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_EACH)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (currentElement) {\n            fatal(\n              currentAttribute\n                ? `The \"each\" block can't be appear in an attribute value.`\n                : `The \"each\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        source = slicePrefix(source, SYNTAX_EACH)\n        const terms = source.replace(/\\s+/g, constant.EMPTY_STRING).split(':')\n        if (terms[0]) {\n          const literal = string.trim(terms[0]),\n\n          index = terms[1] ? string.trim(terms[1]) : constant.UNDEFINED,\n\n          match = literal.match(rangePattern)\n\n          if (match) {\n            const parts = literal.split(rangePattern),\n            from = exprCompiler.compile(parts[0]),\n            to = exprCompiler.compile(parts[2])\n            if (from && to) {\n              return creator.createEach(\n                from,\n                to,\n                string.trim(match[1]) === '=>',\n                index\n              )\n            }\n          }\n          else {\n            const expr = exprCompiler.compile(literal)\n            if (expr) {\n              return creator.createEach(\n                expr,\n                constant.UNDEFINED,\n                constant.FALSE,\n                index\n              )\n            }\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid each`)\n        }\n      }\n    },\n    // {{#import name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IMPORT)) {\n        source = slicePrefix(source, SYNTAX_IMPORT)\n        if (source) {\n          if (!currentElement) {\n            return creator.createImport(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"import\" block can't be appear in an attribute value.`\n                : `The \"import\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid import`)\n        }\n      }\n    },\n    // {{#partial name}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_PARTIAL)) {\n        source = slicePrefix(source, SYNTAX_PARTIAL)\n        if (source) {\n          if (!currentElement) {\n            return creator.createPartial(source)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(\n              currentAttribute\n                ? `The \"partial\" block can't be appear in an attribute value.`\n                : `The \"partial\" block can't be appear in attribute level.`\n            )\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid partial`)\n        }\n      }\n    },\n    // {{#if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_IF)) {\n        source = slicePrefix(source, SYNTAX_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid if`)\n        }\n      }\n    },\n    // {{else if expr}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE_IF)) {\n        source = slicePrefix(source, SYNTAX_ELSE_IF)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createElseIf(expr)\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid else if`)\n        }\n      }\n    },\n    // {{else}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_ELSE)) {\n        source = slicePrefix(source, SYNTAX_ELSE)\n        if (!string.trim(source)) {\n          return creator.createElse()\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"else\" must not be followed by anything.`)\n        }\n      }\n    },\n    // {{...obj}}\n    function (source: string) {\n      if (string.startsWith(source, SYNTAX_SPREAD)) {\n        source = slicePrefix(source, SYNTAX_SPREAD)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          if (currentElement && currentElement.isComponent) {\n            return creator.createSpread(\n              expr,\n              expr.type === exprNodeType.IDENTIFIER\n            )\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal(`The spread can only be used by a component.`)\n          }\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid spread`)\n        }\n      }\n    },\n    // {{expr}}\n    function (source: string) {\n      if (!SYNTAX_COMMENT.test(source)) {\n        source = string.trim(source)\n        const expr = exprCompiler.compile(source)\n        if (expr) {\n          return creator.createExpression(\n            expr,\n            blockMode === BLOCK_MODE_SAFE\n          )\n        }\n        if (process.env.NODE_ENV === 'development') {\n          fatal(`Invalid expression`)\n        }\n      }\n    },\n  ],\n\n  parseHtml = function (code: string) {\n    while (code) {\n      array.each(\n        htmlParsers,\n        function (parse) {\n          const match = parse(code)\n          if (match) {\n            code = string.slice(code, match.length)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  parseBlock = function (code: string) {\n    if (string.charAt(code) === constant.RAW_SLASH) {\n\n      /**\n       * 处理可能存在的自闭合元素，如下\n       *\n       * {{#if xx}}\n       *    <input>\n       * {{/if}}\n       */\n      popSelfClosingElementIfNeeded()\n\n      const name = string.slice(code, 1)\n\n      let type = helper.name2Type[name], isCondition = constant.FALSE\n      if (type === nodeType.IF) {\n        const node = array.pop(ifStack)\n        if (node) {\n          type = node.type\n          isCondition = constant.TRUE\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          fatal(`The \"if\" block is closing, but it's not open yet.`)\n        }\n      }\n\n      const node: any = popStack(type)\n      if (node && isCondition) {\n        checkCondition(node)\n      }\n    }\n    else {\n      // 开始下一个 block 或表达式\n      array.each(\n        blockParsers,\n        function (parse) {\n          const node = parse(code)\n          if (node) {\n            addChild(node)\n            return constant.FALSE\n          }\n        }\n      )\n    }\n  },\n\n  closeBlock = function () {\n\n    // 确定开始和结束定界符能否配对成功，即 {{ 对 }}，{{{ 对 }}}\n    // 这里不能动 openBlockIndex 和 closeBlockIndex，因为等下要用他俩 slice\n    index = closeBlockIndex + 2\n\n    // 这里要用 <=，因为很可能到头了\n    if (index <= length) {\n\n      if (index < length && string.charAt(content, index) === '}') {\n        if (blockMode === BLOCK_MODE_UNSAFE) {\n          nextIndex = index + 1\n        }\n        else {\n          fatal(`{{ and }}} is not a pair.`)\n        }\n      }\n      else {\n        if (blockMode === BLOCK_MODE_SAFE) {\n          nextIndex = index\n        }\n        else {\n          fatal(`{{{ and }} is not a pair.`)\n        }\n      }\n\n      array.pop(blockStack)\n\n      // }} 左侧的位置\n      addIndex(closeBlockIndex)\n\n      openBlockIndex = string.indexOf(content, '{{', nextIndex)\n      closeBlockIndex = string.indexOf(content, '}}', nextIndex)\n\n      // 如果碰到连续的结束定界符，继续 close\n      if (closeBlockIndex >= nextIndex\n        && (openBlockIndex < 0 || closeBlockIndex < openBlockIndex)\n      ) {\n        return closeBlock()\n      }\n\n    }\n    else {\n      // 到头了\n      return constant.TRUE\n    }\n\n  },\n\n  addIndex = function (index: number) {\n    if (!blockStack.length) {\n      array.push(indexList, index)\n    }\n  }\n\n\n  // 因为存在 mustache 注释内包含插值的情况\n  // 这里把流程设计为先标记切片的位置，标记过程中丢弃无效的 block\n  // 最后处理有效的 block\n  while (constant.TRUE) {\n    addIndex(nextIndex)\n    openBlockIndex = string.indexOf(content, '{{', nextIndex)\n    if (openBlockIndex >= nextIndex) {\n\n      blockMode = BLOCK_MODE_SAFE\n\n      // {{ 左侧的位置\n      addIndex(openBlockIndex)\n\n      // 跳过 {{\n      openBlockIndex += 2\n\n      // {{ 后面总得有内容吧\n      if (openBlockIndex < length) {\n        if (string.charAt(content, openBlockIndex) === '{') {\n          blockMode = BLOCK_MODE_UNSAFE\n          openBlockIndex++\n        }\n        // {{ 右侧的位置\n        addIndex(openBlockIndex)\n        // block 是否安全\n        addIndex(blockMode)\n\n        // 打开一个 block 就入栈一个\n        array.push(blockStack, constant.TRUE)\n\n        if (openBlockIndex < length) {\n\n          closeBlockIndex = string.indexOf(content, '}}', openBlockIndex)\n\n          if (closeBlockIndex >= openBlockIndex) {\n            // 注释可以嵌套，如 {{！  {{xx}} {{! {{xx}} }}  }}\n            nextIndex = string.indexOf(content, '{{', openBlockIndex)\n            if (nextIndex < 0 || closeBlockIndex < nextIndex) {\n              if (closeBlock()) {\n                break\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            fatal('The end delimiter is not found.')\n          }\n        }\n        else if (process.env.NODE_ENV === 'development') {\n          // {{{ 后面没字符串了？\n          fatal('Unterminated template literal.')\n        }\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        // {{ 后面没字符串了？\n        fatal('Unterminated template literal.')\n      }\n\n    }\n    else {\n      break\n    }\n  }\n\n  for (let i = 0, length = indexList.length; i < length; i += 5) {\n    index = indexList[i]\n\n    // {{ 左侧的位置\n    openBlockIndex = indexList[i + 1]\n    if (openBlockIndex) {\n      parseHtml(\n        string.slice(content, index, openBlockIndex)\n      )\n    }\n\n    // {{ 右侧的位置\n    openBlockIndex = indexList[i + 2]\n    blockMode = indexList[i + 3]\n    closeBlockIndex = indexList[i + 4]\n    if (closeBlockIndex) {\n\n      code = string.trim(\n        string.slice(content, openBlockIndex, closeBlockIndex)\n      )\n\n      // 不用处理 {{ }} 和 {{{ }}} 这种空 block\n      if (code) {\n        parseBlock(code)\n      }\n\n    }\n    else {\n      blockMode = BLOCK_MODE_NONE\n      parseHtml(\n        string.slice(content, index)\n      )\n    }\n  }\n\n  if (nodeStack.length) {\n\n    /**\n     * 处理可能存在的自闭合元素，如下\n     *\n     * <input>\n     */\n    popSelfClosingElementIfNeeded()\n\n    if (process.env.NODE_ENV === 'development') {\n      if (nodeStack.length) {\n        fatal('Some nodes is still in the stack.')\n      }\n    }\n  }\n\n  if (nodeList.length > 0) {\n    removeComment(nodeList)\n  }\n\n  return nodeList\n\n}","import isDef from '../function/isDef'\n\nimport * as array from './array'\nimport * as constant from './constant'\n\nexport const UNDEFINED = '$0'\n\nexport const NULL = '$1'\n\nexport const TRUE = '$2'\n\nexport const FALSE = '$3'\n\nexport const COMMA = ','\n\nexport const COLON = ':'\n\nexport const PLUS = '+'\n\nexport const AND = '&&'\n\nexport const QUESTION = '?'\n\nexport const NOT = '!'\n\nexport const EMPTY = '\"\"'\n\nexport const RETURN = 'return '\n\n/**\n * 目的是 保证调用参数顺序稳定，减少运行时判断\n *\n * [a, undefined, undefined] => [a]\n * [a, undefined, b, undefined] => [a, undefined, b]\n */\nfunction trimArgs(list: (string | void)[]) {\n\n  let args: string[] = [], removable = constant.TRUE\n\n  array.each(\n    list,\n    function (arg) {\n      if (isDef(arg)) {\n        removable = constant.FALSE\n        array.unshift(args, arg as string)\n      }\n      else if (!removable) {\n        array.unshift(args, UNDEFINED)\n      }\n    },\n    constant.TRUE\n  )\n\n  return args\n\n}\n\n/**\n * 确保表达式的优先级是正确的\n */\nexport function toGroup(code: string): string {\n  // 数组不用加括号\n  if (/^\\[[^\\]]+\\]$/.test(code)\n    // 对象不用加括号\n    || /^{[^\\}]+}$/.test(code)\n    // 字符串不用加括号\n    || /^\"[^\"]+\\\"$/.test(code)\n    // 一元表达式不用加括号\n    || /^(?:[-+~!]|!!)(?:[\\$\\w]+|\\([\\$\\w]+\\))$/.test(code)\n    // 函数调用不用加括号\n    || /^\\w+\\([^\\)\\{\\}]*\\)$/.test(code)\n    // 避免重复加括号\n    || /^\\([^\\)]+\\)$/.test(code)\n  ) {\n    return code\n  }\n  return /[-+*\\/%<>=!&^|,?:]/.test(code)\n    ? `(${code})`\n    : code\n}\n\n/**\n * 把 [ 'key1:value1', 'key2:value2' ] 格式转成 `{key1:value1,key2:value2}`\n */\nexport function toObject(fields: string[]): string {\n  return `{${array.join(fields, COMMA)}}`\n}\n\n/**\n * 把 [ 'item1', 'item2' ] 格式转成 `['item1','item2']`\n */\nexport function toArray(items: string[]): string {\n  return `[${array.join(items, COMMA)}]`\n}\n\n/**\n * 输出函数调用的格式\n */\nexport function toCall(name: string, args?: (string | void)[]): string {\n  const code = args ? array.join(trimArgs(args), COMMA) : constant.EMPTY_STRING\n  return `${name}(${code})`\n}\n\n/**\n * 输出为字符串格式\n */\nexport function toString(value: string | number | boolean | null | void): string {\n  return value === constant.TRUE\n    ? TRUE\n    : value === constant.FALSE\n      ? FALSE\n      : value === constant.NULL\n        ? NULL\n        : value === constant.UNDEFINED\n          ? UNDEFINED\n          : JSON.stringify(value)\n}\n\n/**\n * 输出为匿名函数格式\n */\nexport function toFunction(args: string, code: string) {\n  return `${constant.RAW_FUNCTION}(${args}){var ${UNDEFINED}=void 0,${NULL}=null,${TRUE}=!0,${FALSE}=!1;${RETURN}${code}}`\n}","import {\n  SLOT_DATA_PREFIX,\n  SLOT_NAME_DEFAULT,\n  DIRECTIVE_LAZY,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as exprGenerator from 'yox-expression-compiler/src/generator'\nimport * as exprNodeType from 'yox-expression-compiler/src/nodeType'\nimport * as nodeType from './nodeType'\n\nimport ExpressionNode from 'yox-expression-compiler/src/node/Node'\nimport ExpressionIdentifier from 'yox-expression-compiler/src/node/Identifier'\nimport ExpressionCall from 'yox-expression-compiler/src/node/Call'\n\nimport Node from './node/Node'\nimport Text from './node/Text'\nimport Each from './node/Each'\nimport If from './node/If'\nimport ElseIf from './node/ElseIf'\nimport Element from './node/Element'\nimport Attribute from './node/Attribute'\nimport Directive from './node/Directive'\nimport Property from './node/Property'\nimport Expression from './node/Expression'\nimport Import from './node/Import'\nimport Partial from './node/Partial'\nimport Spread from './node/Spread'\n\n/**\n * 这里的难点在于处理 Element 的 children，举个例子：\n *\n * ['1', _x(expr), _l(expr, index, generate), _x(expr) ? ['1', _x(expr), _l(expr, index, generate)] : y]\n *\n * children 用数组表示，其中表达式求出的值可能是任意类型，比如数组或对象，我们无法控制表达式的值最终会是什么类型\n *\n * 像 each 或 import 这样的语法，内部其实会产生一个 vnode 数组，这里就出现了两个难点：\n *\n * 1. 如何区分 each 或其他语法产生的数组和表达式求值的数组\n * 2. 如何避免频繁的创建数组\n *\n * 我能想到的解决方案是，根据当前节点类型，如果是元素，则确保 children 的每一项的值序列化后都是函数调用的形式\n *\n * 这样能确保是从左到右依次执行，也就便于在内部创建一个公共数组，执行一个函数就收集一个值，而不管那个值到底是什么类型\n *\n */\n\n// 是否正在收集子节点\nconst collectStack: (boolean | void)[] = [],\n\n// 是否正在收集字符串类型的值\nstringStack: (boolean | void)[] = [],\n\nnodeGenerator = {},\n\nRENDER_EXPRESSION_IDENTIFIER = 'a',\n\nRENDER_EXPRESSION_MEMBER_KEYPATH = 'b',\n\nRENDER_EXPRESSION_MEMBER_LITERAL = 'c',\n\nRENDER_EXPRESSION_CALL = 'd',\n\nRENDER_TEXT_VNODE = 'e',\n\nRENDER_ATTRIBUTE_VNODE = 'f',\n\nRENDER_PROPERTY_VNODE = 'g',\n\nRENDER_LAZY_VNODE = 'h',\n\nRENDER_TRANSITION_VNODE = 'i',\n\nRENDER_BINDING_VNODE = 'j',\n\nRENDER_MODEL_VNODE = 'k',\n\nRENDER_EVENT_METHOD_VNODE = 'l',\n\nRENDER_EVENT_NAME_VNODE = 'm',\n\nRENDER_DIRECTIVE_VNODE = 'n',\n\nRENDER_SPREAD_VNODE = 'o',\n\nRENDER_COMMENT_VNODE = 'p',\n\nRENDER_ELEMENT_VNODE = 'q',\n\nRENDER_COMPONENT_VNODE = 'r',\n\nRENDER_SLOT = 's',\n\nRENDER_PARTIAL = 't',\n\nRENDER_IMPORT = 'u',\n\nRENDER_EACH = 'v',\n\nRENDER_RANGE = 'w',\n\nRENDER_EQUAL_RANGE = 'x',\n\nARG_STACK = 'y'\n\nfunction renderExpression(expr: ExpressionNode, holder?: boolean, depIgnore?: boolean, stack?: string) {\n  return exprGenerator.generate(\n    expr,\n    RENDER_EXPRESSION_IDENTIFIER,\n    RENDER_EXPRESSION_MEMBER_KEYPATH,\n    RENDER_EXPRESSION_MEMBER_LITERAL,\n    RENDER_EXPRESSION_CALL,\n    holder,\n    depIgnore,\n    stack\n  )\n}\n\nfunction stringifyObject(obj: object): string {\n  const fields: string[] = []\n  object.each(\n    obj,\n    function (value: any, key: string) {\n      if (isDef(value)) {\n        array.push(\n          fields,\n          generator.toString(key) + generator.COLON + value\n        )\n      }\n    }\n  )\n  return generator.toObject(fields)\n}\n\nfunction stringifyFunction(result: string | void, arg?: string): string {\n  return `${constant.RAW_FUNCTION}(${arg || constant.EMPTY_STRING}){${result || constant.EMPTY_STRING}}`\n}\n\nfunction stringifyExpressionVnode(expr: ExpressionNode): string {\n  return generator.toCall(\n    RENDER_TEXT_VNODE,\n    [\n      renderExpression(expr)\n    ]\n  )\n}\n\nfunction stringifyExpressionArg(expr: ExpressionNode): string {\n  return renderExpression(expr, constant.FALSE, constant.FALSE, ARG_STACK)\n}\n\nfunction stringifyValue(value: any, expr: ExpressionNode | void, children: Node[] | void): string | void {\n  if (isDef(value)) {\n    return generator.toString(value)\n  }\n  // 只有一个表达式时，保持原始类型\n  if (expr) {\n    return renderExpression(expr)\n  }\n  // 多个值拼接时，要求是字符串\n  if (children) {\n    // 常见的应用场景是序列化 HTML 元素属性值，处理值时要求字符串，在处理属性名这个级别，不要求字符串\n    // compiler 会把原始字符串编译成 value\n    // compiler 会把单个插值编译成 expr\n    // 因此走到这里，一定是多个插值或是单个特殊插值（比如 If)\n    array.push(stringStack, constant.TRUE)\n    const result = stringifyChildren(children)\n    array.pop(stringStack)\n    return result\n  }\n}\n\nfunction stringifyChildren(children: Node[]) {\n\n  const items = children.map(\n    function (child: Node) {\n      return nodeGenerator[child.type](child)\n    }\n  )\n\n  // 字符串拼接涉及表达式的优先级问题，这里先统一成数组，字符串拼接改成 array.join 有利于一致性\n\n  return array.last(stringStack) && items.length > 1\n    ? generator.toArray(items) + `.join(${generator.EMPTY})`\n    : array.join(items, generator.COMMA)\n\n}\n\nfunction stringifyIf(node: If | ElseIf) {\n\n  let { children, next } = node,\n\n  // 是否正在收集子节点\n  defaultValue = array.last(collectStack)\n    ? generator.toCall(RENDER_COMMENT_VNODE)\n    // 要求是字符串\n    : array.last(stringStack)\n      ? generator.EMPTY\n      : generator.UNDEFINED,\n\n  yes: string | void,\n\n  no: string | void\n\n  if (children) {\n    yes = stringifyChildren(children)\n  }\n\n  if (next) {\n    if (next.type === nodeType.ELSE_IF) {\n      no = stringifyIf(next as ElseIf)\n    }\n    else if (next.children) {\n      no = stringifyChildren(next.children)\n    }\n  }\n\n  if (!yes && !no) {\n    return defaultValue\n  }\n\n  // 虽然三元表达式优先级最低，但无法保证表达式内部没有 ,\n  // 因此每一个分支都要调用 toGroup\n  return generator.toGroup(renderExpression(node.expr))\n    + generator.QUESTION\n    + generator.toGroup(yes || defaultValue)\n    + generator.COLON\n    + generator.toGroup(no || defaultValue)\n\n}\n\nfunction getComponentSlots(children: Node[]): string | void {\n\n  const result: Record<string, string> = {},\n\n  slots: Record<string, Node[]> = {},\n\n  addSlot = function (name: string, nodes: Node[] | void) {\n\n    if (!array.falsy(nodes)) {\n      name = SLOT_DATA_PREFIX + name\n      array.push(\n        slots[name] || (slots[name] = []),\n        nodes as Node[]\n      )\n    }\n\n  }\n\n  array.each(\n    children,\n    function (child) {\n      // 找到具名 slot\n      if (child.type === nodeType.ELEMENT) {\n        const element = child as Element\n        if (element.slot) {\n          addSlot(\n            element.slot,\n            element.tag === constant.RAW_TEMPLATE\n              ? element.children\n              : [element]\n          )\n          return\n        }\n      }\n\n      // 匿名 slot，名称统一为 children\n      addSlot(SLOT_NAME_DEFAULT, [child])\n\n    }\n  )\n\n  object.each(\n    slots,\n    function (children, name) {\n      result[name] = stringifyFunction(\n        stringifyChildren(children)\n      )\n    }\n  )\n\n  if (!object.falsy(result)) {\n    return stringifyObject(result)\n  }\n\n}\n\nnodeGenerator[nodeType.ELEMENT] = function (node: Element): string {\n\n  let { tag, dynamicTag, isComponent, ref, key, html, attrs, children } = node,\n\n  outputTag: string | void,\n\n  outputAttrs: string | void,\n\n  outputHTML: string | void,\n\n  outputChilds: string | void,\n  outputSlots: string | void,\n\n  outputStatic: string | void,\n  outputOption: string | void,\n  outputStyle: string | void,\n  outputSvg: string | void,\n\n  outputRef: string | void,\n  outputKey: string | void\n\n  if (tag === constant.RAW_SLOT) {\n    const args = [generator.toString(SLOT_DATA_PREFIX + node.name)]\n    if (children) {\n      array.push(\n        args,\n        stringifyFunction(\n          stringifyChildren(children)\n        )\n      )\n    }\n    return generator.toCall(RENDER_SLOT, args)\n  }\n\n  // 如果是动态组件，tag 会是一个标识符表达式\n  outputTag = dynamicTag\n    ? renderExpression(dynamicTag)\n    : generator.toString(tag)\n\n\n\n\n  array.push(collectStack, constant.FALSE)\n\n  // 在 collectStack 为 false 时取值\n  outputRef = ref ? stringifyValue(ref.value, ref.expr, ref.children) : constant.UNDEFINED\n  outputKey = key ? stringifyValue(key.value, key.expr, key.children) : constant.UNDEFINED\n\n  if (attrs) {\n    const list: string[] = []\n    array.each(\n      attrs,\n      function (attr) {\n        array.push(\n          list,\n          nodeGenerator[attr.type](attr)\n        )\n      }\n    )\n    if (list.length) {\n      outputAttrs = stringifyFunction(\n        array.join(list, generator.COMMA)\n      )\n    }\n  }\n\n  if (children) {\n    collectStack[collectStack.length - 1] = constant.TRUE\n    if (isComponent) {\n      outputSlots = getComponentSlots(children)\n    }\n    else {\n      outputChilds = stringifyFunction(\n        stringifyChildren(children)\n      )\n    }\n  }\n\n  array.pop(collectStack)\n\n\n\n  if (html) {\n    outputHTML = is.string(html)\n      ? generator.toString(html as string)\n      : renderExpression(html as ExpressionNode)\n  }\n\n  outputStatic = node.isStatic ? generator.TRUE : constant.UNDEFINED\n  outputOption = node.isOption ? generator.TRUE : constant.UNDEFINED\n  outputStyle = node.isStyle ? generator.TRUE : constant.UNDEFINED\n  outputSvg = node.isSvg ? generator.TRUE : constant.UNDEFINED\n\n  if (isComponent) {\n    return generator.toCall(\n      RENDER_COMPONENT_VNODE,\n      // 最常用 => 最不常用排序\n      [\n        outputTag,\n        outputAttrs,\n        outputSlots,\n        outputRef,\n        outputKey,\n      ]\n    )\n  }\n\n  return generator.toCall(\n    RENDER_ELEMENT_VNODE,\n    // 最常用 => 最不常用排序\n    [\n      outputTag,\n      outputAttrs,\n      outputChilds,\n      outputStatic,\n      outputOption,\n      outputStyle,\n      outputSvg,\n      outputHTML,\n      outputRef,\n      outputKey,\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.ATTRIBUTE] = function (node: Attribute): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_ATTRIBUTE_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PROPERTY] = function (node: Property): string {\n\n  const value = node.binding\n    ? generator.toCall(\n      RENDER_BINDING_VNODE,\n      [\n        generator.toString(node.name),\n        renderExpression(node.expr as ExpressionNode, constant.TRUE, constant.TRUE),\n        generator.toString(node.hint)\n      ]\n    )\n    : stringifyValue(node.value, node.expr, node.children)\n\n  return generator.toCall(\n    RENDER_PROPERTY_VNODE,\n    [\n      generator.toString(node.name),\n      value\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.DIRECTIVE] = function (node: Directive): string {\n\n  const { ns, name, key, value, expr, modifier } = node\n\n  if (ns === DIRECTIVE_LAZY) {\n    return generator.toCall(\n      RENDER_LAZY_VNODE,\n      [\n        generator.toString(name),\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <div transition=\"name\">\n  if (ns === constant.RAW_TRANSITION) {\n    return generator.toCall(\n      RENDER_TRANSITION_VNODE,\n      [\n        generator.toString(value)\n      ]\n    )\n  }\n\n  // <input model=\"id\">\n  if (ns === DIRECTIVE_MODEL) {\n    return generator.toCall(\n      RENDER_MODEL_VNODE,\n      [\n        renderExpression(expr as ExpressionNode, constant.TRUE, constant.TRUE)\n      ]\n    )\n  }\n\n  let renderName = RENDER_DIRECTIVE_VNODE,\n\n  args: (string | undefined)[] = [\n    generator.toString(name),\n    generator.toString(key),\n    generator.toString(modifier),\n    generator.toString(value),\n  ]\n\n  // 尽可能把表达式编译成函数，这样对外界最友好\n  //\n  // 众所周知，事件指令会编译成函数，对于自定义指令来说，也要尽可能编译成函数\n  //\n  // 比如 o-tap=\"method()\" 或 o-log=\"{'id': '11'}\"\n  // 前者会编译成 handler（调用方法），后者会编译成 getter（取值）\n\n  if (expr) {\n\n    // 如果表达式明确是在调用方法，则序列化成 method + args 的形式\n    if (expr.type === exprNodeType.CALL) {\n      if (ns === DIRECTIVE_EVENT) {\n        renderName = RENDER_EVENT_METHOD_VNODE\n      }\n      // compiler 保证了函数调用的 name 是标识符\n      array.push(\n        args,\n        generator.toString(((expr as ExpressionCall).name as ExpressionIdentifier).name)\n      )\n      // 为了实现运行时动态收集参数，这里序列化成函数\n      if (!array.falsy((expr as ExpressionCall).args)) {\n        // args 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + generator.toArray((expr as ExpressionCall).args.map(stringifyExpressionArg)),\n            ARG_STACK\n          )\n        )\n      }\n    }\n    // 不是调用方法，就是事件转换\n    else if (ns === DIRECTIVE_EVENT) {\n      renderName = RENDER_EVENT_NAME_VNODE\n      array.push(\n        args,\n        generator.toString(expr.raw)\n      )\n    }\n    else if (ns === DIRECTIVE_CUSTOM) {\n\n      // 取值函数\n      // getter 函数在触发事件时调用，调用时会传入它的作用域，因此这里要加一个参数\n      if (expr.type !== exprNodeType.LITERAL) {\n        array.push(args, constant.UNDEFINED) // method\n        array.push(args, constant.UNDEFINED) // args\n        array.push(\n          args,\n          stringifyFunction(\n            generator.RETURN + stringifyExpressionArg(expr),\n            ARG_STACK\n          )\n        )\n      }\n\n    }\n\n  }\n\n  return generator.toCall(renderName, args)\n\n}\n\nnodeGenerator[nodeType.SPREAD] = function (node: Spread): string {\n  return generator.toCall(\n    RENDER_SPREAD_VNODE,\n    [\n      renderExpression(node.expr, constant.TRUE, node.binding)\n    ]\n  )\n}\n\nnodeGenerator[nodeType.TEXT] = function (node: Text): string {\n\n  const result = generator.toString(node.text)\n\n  return array.last(collectStack)\n    ? generator.toCall(\n        RENDER_TEXT_VNODE,\n        [\n          result\n        ]\n      )\n    : result\n\n}\n\nnodeGenerator[nodeType.EXPRESSION] = function (node: Expression): string {\n\n  return array.last(collectStack)\n    ? stringifyExpressionVnode(node.expr)\n    : renderExpression(node.expr)\n\n}\n\nnodeGenerator[nodeType.IF] = function (node: If): string {\n  return stringifyIf(node)\n}\n\nnodeGenerator[nodeType.EACH] = function (node: Each): string {\n\n  // compiler 保证了 children 一定有值\n  const children = stringifyFunction(\n    stringifyChildren(node.children as Node[])\n  )\n\n  // 遍历区间\n  if (node.to) {\n    if (node.equal) {\n      return generator.toCall(\n        RENDER_EQUAL_RANGE,\n        [\n          children,\n          renderExpression(node.from),\n          renderExpression(node.to),\n          generator.toString(node.index)\n        ]\n      )\n    }\n    return generator.toCall(\n      RENDER_RANGE,\n      [\n        children,\n        renderExpression(node.from),\n        renderExpression(node.to),\n        generator.toString(node.index)\n      ]\n    )\n  }\n\n  // 遍历数组和对象\n  return generator.toCall(\n    RENDER_EACH,\n    [\n      children,\n      renderExpression(node.from, constant.TRUE),\n      generator.toString(node.index)\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.PARTIAL] = function (node: Partial): string {\n\n  return generator.toCall(\n    RENDER_PARTIAL,\n    [\n      generator.toString(node.name),\n      // compiler 保证了 children 一定有值\n      stringifyFunction(\n        stringifyChildren(node.children as Node[])\n      )\n    ]\n  )\n\n}\n\nnodeGenerator[nodeType.IMPORT] = function (node: Import): string {\n\n  return generator.toCall(\n    RENDER_IMPORT,\n    [\n      generator.toString(node.name)\n    ]\n  )\n\n}\n\n// 序列化代码的参数列表\nlet codeArgs: string | void\n\nexport function generate(node: Node): string {\n\n  if (!codeArgs) {\n    codeArgs = array.join([\n      RENDER_EXPRESSION_IDENTIFIER,\n      RENDER_EXPRESSION_MEMBER_KEYPATH,\n      RENDER_EXPRESSION_MEMBER_LITERAL,\n      RENDER_EXPRESSION_CALL,\n      RENDER_TEXT_VNODE,\n      RENDER_ATTRIBUTE_VNODE,\n      RENDER_PROPERTY_VNODE,\n      RENDER_LAZY_VNODE,\n      RENDER_TRANSITION_VNODE,\n      RENDER_BINDING_VNODE,\n      RENDER_MODEL_VNODE,\n      RENDER_EVENT_METHOD_VNODE,\n      RENDER_EVENT_NAME_VNODE,\n      RENDER_DIRECTIVE_VNODE,\n      RENDER_SPREAD_VNODE,\n      RENDER_COMMENT_VNODE,\n      RENDER_ELEMENT_VNODE,\n      RENDER_COMPONENT_VNODE,\n      RENDER_SLOT,\n      RENDER_PARTIAL,\n      RENDER_IMPORT,\n      RENDER_EACH,\n      RENDER_RANGE,\n      RENDER_EQUAL_RANGE,\n    ], generator.COMMA)\n  }\n\n  return generator.toFunction(\n    codeArgs,\n    nodeGenerator[node.type](node)\n  )\n\n}\n","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as generator from 'yox-common/src/util/generator'\n\nimport * as nodeType from './nodeType'\n\nimport Node from './node/Node'\nimport Call from './node/Call'\nimport Member from './node/Member'\nimport Literal from './node/Literal'\nimport Identifier from './node/Identifier'\nimport Ternary from './node/Ternary'\nimport Binary from './node/Binary'\nimport Unary from './node/Unary'\n\nimport ArrayNode from './node/Array'\nimport ObjectNode from './node/Object'\n\nexport function generate(\n  node: Node,\n  renderIdentifier: string,\n  renderMemberKeypath: string,\n  renderMemberLiteral: string,\n  renderCall: string,\n  holder?: boolean,\n  depIgnore?: boolean,\n  stack?: string,\n  inner?: boolean\n) {\n\n  let value: string,\n\n  isSpecialNode = constant.FALSE,\n\n  // 如果是内部临时值，不需要 holder\n  needHolder = holder && !inner,\n\n  generateChildNode = function (node: Node) {\n    return generate(\n      node,\n      renderIdentifier,\n      renderMemberKeypath,\n      renderMemberLiteral,\n      renderCall,\n      holder,\n      depIgnore,\n      stack,\n      constant.TRUE\n    )\n  }\n\n  switch (node.type) {\n\n    case nodeType.LITERAL:\n      value = generator.toString((node as Literal).value)\n      break\n\n    case nodeType.UNARY:\n      value = (node as Unary).operator + generateChildNode((node as Unary).node)\n      break\n\n    case nodeType.BINARY:\n      value = generator.toGroup(generateChildNode((node as Binary).left))\n        + (node as Binary).operator\n        + generator.toGroup(generateChildNode((node as Binary).right))\n      break\n\n    case nodeType.TERNARY:\n      // 虽然三元表达式优先级最低，但无法保证表达式内部没有 ,\n      value = generator.toGroup(generateChildNode((node as Ternary).test))\n        + generator.QUESTION\n        + generator.toGroup(generateChildNode((node as Ternary).yes))\n        + generator.COLON\n        + generator.toGroup(generateChildNode((node as Ternary).no))\n      break\n\n    case nodeType.ARRAY:\n      const items = (node as ArrayNode).nodes.map(generateChildNode)\n      value = generator.toArray(items)\n      break\n\n    case nodeType.OBJECT:\n      const fields: string[] = []\n      array.each(\n        (node as ObjectNode).keys,\n        function (key: string, index: number) {\n          array.push(\n            fields,\n            generator.toString(key)\n            + generator.COLON\n            + generateChildNode((node as ObjectNode).values[index])\n          )\n        }\n      )\n      value = generator.toObject(fields)\n      break\n\n    case nodeType.IDENTIFIER:\n      isSpecialNode = constant.TRUE\n\n      const identifier = node as Identifier\n\n      value = generator.toCall(\n        renderIdentifier,\n        [\n          generator.toString(identifier.name),\n          generator.toString(identifier.lookup),\n          identifier.offset > 0 ? generator.toString(identifier.offset) : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED,\n          depIgnore ? generator.TRUE : constant.UNDEFINED,\n          stack ? stack : constant.UNDEFINED\n        ]\n      )\n      break\n\n    case nodeType.MEMBER:\n      isSpecialNode = constant.TRUE\n\n      const { lead, keypath, nodes, lookup, offset } = node as Member,\n\n      stringifyNodes: string[] = nodes ? nodes.map(generateChildNode) : []\n\n      if (lead.type === nodeType.IDENTIFIER) {\n        // 只能是 a[b] 的形式，因为 a.b 已经在解析时转换成 Identifier 了\n        value = generator.toCall(\n          renderIdentifier,\n          [\n            generator.toCall(\n              renderMemberKeypath,\n              [\n                generator.toString((lead as Identifier).name),\n                generator.toArray(stringifyNodes)\n              ]\n            ),\n            generator.toString(lookup),\n            offset > 0 ? generator.toString(offset) : constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n            depIgnore ? generator.TRUE : constant.UNDEFINED,\n            stack ? stack : constant.UNDEFINED\n          ]\n        )\n      }\n      else if (nodes) {\n        // \"xx\"[length]\n        // format()[a][b]\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            constant.UNDEFINED,\n            generator.toArray(stringifyNodes),\n            needHolder ? generator.TRUE : constant.UNDEFINED\n          ]\n        )\n      }\n      else {\n        // \"xx\".length\n        // format().a.b\n        value = generator.toCall(\n          renderMemberLiteral,\n          [\n            generateChildNode(lead),\n            generator.toString(keypath),\n            constant.UNDEFINED,\n            needHolder ? generator.TRUE : constant.UNDEFINED,\n          ]\n        )\n      }\n\n      break\n\n    default:\n      isSpecialNode = constant.TRUE\n      const { args } = node as Call\n      value = generator.toCall(\n        renderCall,\n        [\n          generateChildNode((node as Call).name),\n          args.length\n            ? generator.toArray(args.map(generateChildNode))\n            : constant.UNDEFINED,\n          needHolder ? generator.TRUE : constant.UNDEFINED\n        ]\n      )\n      break\n  }\n\n  if (!needHolder) {\n    return value\n  }\n\n  // 最外层的值，且 holder 为 true\n  return isSpecialNode\n    ? value\n    : generator.toObject([\n        constant.RAW_VALUE + generator.COLON + value\n      ])\n\n}\n","import {\n  SLOT_DATA_PREFIX,\n} from 'yox-config/src/config'\n\nimport {\n  Data,\n  Listener,\n  LazyValue,\n  ValueHolder,\n  PropertyHint,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_BINDING,\n  DIRECTIVE_MODEL,\n  DIRECTIVE_EVENT,\n  DIRECTIVE_CUSTOM,\n} from 'yox-config/src/config'\n\nimport isDef from 'yox-common/src/function/isDef'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport globalHolder from 'yox-common/src/util/holder'\n\nimport Observer from 'yox-observer/src/Observer'\n\nfunction setPair(target: any, name: string, key: string, value: any) {\n  const data = target[name] || (target[name] = {})\n  data[key] = value\n}\n\nconst KEY_DIRECTIVES = 'directives'\n\nexport function render(\n  context: YoxInterface,\n  observer: Observer,\n  template: Function,\n  filters: Record<string, Function>,\n  partials: Record<string, Function>,\n  directives: Record<string, DirectiveHooks>,\n  transitions: Record<string, TransitionHooks>\n) {\n\n  let $scope: Data = { $keypath: constant.EMPTY_STRING },\n\n  $stack = [ $scope ],\n\n  currentVnode: any,\n\n  vnodeStack: VNode[][] = [],\n\n  slotComponentStack: Data[][] = [],\n\n  localPartials: Record<string, Function> = {},\n\n  renderedSlots: Record<string, true> = {},\n\n  findValue = function (stack: any[], index: number, key: string, lookup: boolean, depIgnore?: boolean, defaultKeypath?: string): ValueHolder {\n\n    let scope = stack[index],\n\n    keypath = keypathUtil.join(scope.$keypath, key),\n\n    value: any = stack,\n\n    holder = globalHolder\n\n    // 如果最后还是取不到值，用回最初的 keypath\n    if (defaultKeypath === constant.UNDEFINED) {\n      defaultKeypath = keypath\n    }\n\n    // 如果取的是 scope 上直接有的数据，如 $keypath\n    if (scope[key] !== constant.UNDEFINED) {\n      value = scope[key]\n    }\n\n    // 如果取的是数组项，则要更进一步\n    else if (scope.$item !== constant.UNDEFINED) {\n      scope = scope.$item\n\n      // 到这里 scope 可能为空\n      // 比如 new Array(10) 然后遍历这个数组，每一项肯定是空\n\n      // 取 this\n      if (key === constant.EMPTY_STRING) {\n        value = scope\n      }\n      // 取 this.xx\n      else if (scope != constant.NULL && scope[key] !== constant.UNDEFINED) {\n        value = scope[key]\n      }\n    }\n\n    if (value === stack) {\n      // 正常取数据\n      value = observer.get(keypath, stack, depIgnore)\n      if (value === stack) {\n\n        if (lookup && index > 0) {\n          if (process.env.NODE_ENV === 'development') {\n            logger.debug(`The data \"${keypath}\" can't be found in the current context, start looking up.`)\n          }\n          return findValue(stack, index - 1, key, lookup, depIgnore, defaultKeypath)\n        }\n\n        // 到头了，最后尝试过滤器\n        const result = object.get(filters, key)\n        if (result) {\n          holder = result\n          holder.keypath = key\n        }\n        else {\n          holder.value = constant.UNDEFINED\n          holder.keypath = defaultKeypath\n        }\n        return holder\n\n      }\n    }\n\n    holder.value = value\n    holder.keypath = keypath\n\n    return holder\n\n  },\n\n  createEventListener = function (type: string): Listener {\n    return function (event: CustomEvent, data?: Data) {\n      // 事件名称相同的情况，只可能是监听 DOM 事件，比如写一个 Button 组件\n      // <button on-click=\"click\"> 纯粹的封装了一个原生 click 事件\n      if (type !== event.type) {\n        event = new CustomEvent(type, event)\n      }\n      context.fire(event, data)\n    }\n  },\n\n  createMethodListener = function (\n    name: string,\n    args: Function | void,\n    stack: any[]\n  ): Listener {\n    return function (event: CustomEvent, data?: Data) {\n\n      const method = context[name]\n\n      if (event instanceof CustomEvent) {\n\n        let result: any = constant.UNDEFINED\n\n        if (args) {\n          const scope = array.last(stack)\n          if (scope) {\n            scope.$event = event\n            scope.$data = data\n            result = execute(method, context, args(stack))\n            scope.$event =\n            scope.$data = constant.UNDEFINED\n          }\n        }\n        else {\n          result = execute(method, context, data ? [event, data] : event)\n        }\n\n        return result\n\n      }\n      else {\n        execute(\n          method,\n          context,\n          args ? args(stack) : constant.UNDEFINED\n        )\n      }\n\n    }\n  },\n\n  createGetter = function (getter: Function, stack: any[]): () => any {\n    return function () {\n      return getter(stack)\n    }\n  },\n\n  renderTextVnode = function (value: any) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      const text = toString(value)\n      const lastVnode = array.last(vnodeList)\n      if (lastVnode && lastVnode.isText) {\n        (lastVnode.text as string) += text\n      }\n      else {\n        // 注释节点标签名是 '!'，这里区分一下\n        const textVnode: Data = {\n          tag: '#',\n          isText: constant.TRUE,\n          text,\n          context,\n          keypath: $scope.$keypath,\n        }\n        array.push(vnodeList, textVnode)\n      }\n    }\n  },\n\n  renderAttributeVnode = function (name: string, value: string | void) {\n    setPair(\n      currentVnode,\n      currentVnode.isComponent ? 'props' : 'nativeAttrs',\n      name,\n      value\n    )\n  },\n\n  renderPropertyVnode = function (name: string, value: any) {\n    setPair(currentVnode, 'nativeProps', name, value)\n  },\n\n  renderLazyVnode = function (name: string, value: LazyValue) {\n    setPair(currentVnode, 'lazy', name, value)\n  },\n\n  renderTransitionVnode = function (name: string) {\n    currentVnode.transition = transitions[name]\n    if (process.env.NODE_ENV === 'development') {\n      if (!currentVnode.transition) {\n        logger.fatal(`The transition \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  renderBindingVnode = function (name: string, holder: ValueHolder, hint?: PropertyHint): any {\n\n    const key = keypathUtil.join(DIRECTIVE_BINDING, name)\n\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_BINDING,\n        name,\n        key,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_BINDING],\n        hint,\n      }\n    )\n\n    return holder.value\n\n  },\n\n  renderModelVnode = function (holder: ValueHolder) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      DIRECTIVE_MODEL,\n      {\n        ns: DIRECTIVE_MODEL,\n        name: constant.EMPTY_STRING,\n        key: DIRECTIVE_MODEL,\n        value: holder.value,\n        modifier: holder.keypath,\n        hooks: directives[DIRECTIVE_MODEL]\n      }\n    )\n  },\n\n  renderEventMethodVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string, args: Function | void\n  ) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createMethodListener(method, args, $stack),\n      }\n    )\n  },\n\n  renderEventNameVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    event: string\n  ) {\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_EVENT,\n        name,\n        key,\n        value,\n        modifier,\n        hooks: directives[DIRECTIVE_EVENT],\n        handler: createEventListener(event),\n      }\n    )\n  },\n\n  renderDirectiveVnode = function (\n    name: string, key: string,\n    modifier: string, value: string,\n    method: string | void, args: Function | void, getter: Function | void\n  ) {\n\n    const hooks = directives[name]\n\n    if (process.env.NODE_ENV === 'development') {\n      if (!hooks) {\n        logger.fatal(`The directive ${name} can't be found.`)\n      }\n    }\n\n    setPair(\n      currentVnode,\n      KEY_DIRECTIVES,\n      key,\n      {\n        ns: DIRECTIVE_CUSTOM,\n        name,\n        key,\n        value,\n        hooks,\n        modifier,\n        getter: getter ? createGetter(getter, $stack) : constant.UNDEFINED,\n        handler: method ? createMethodListener(method, args, $stack) : constant.UNDEFINED,\n      }\n    )\n\n  },\n\n  renderSpreadVnode = function (holder: ValueHolder) {\n\n    const { value, keypath } = holder\n\n    if (is.object(value)) {\n\n      // 数组也算一种对象\n      // 延展操作符不支持数组\n      if (process.env.NODE_ENV === 'development') {\n        if (is.array(value)) {\n          logger.fatal(`The spread operator can't be used by an array.`)\n        }\n      }\n\n      for (let key in value) {\n        setPair(currentVnode, 'props', key, value[key])\n      }\n\n      if (keypath) {\n        const key = keypathUtil.join(DIRECTIVE_BINDING, keypath)\n        setPair(\n          currentVnode,\n          KEY_DIRECTIVES,\n          key,\n          {\n            ns: DIRECTIVE_BINDING,\n            name: constant.EMPTY_STRING,\n            key,\n            modifier: keypathUtil.join(keypath, constant.RAW_WILDCARD),\n            hooks: directives[DIRECTIVE_BINDING],\n          }\n        )\n      }\n\n    }\n\n  },\n\n  appendVnode = function (vnode: Data) {\n    const vnodeList = array.last(vnodeStack)\n    if (vnodeList) {\n      array.push(vnodeList, vnode)\n    }\n    return vnode\n  },\n\n  renderCommentVnode = function () {\n    // 注释节点和文本节点需要有个区分\n    // 如果两者都没有 tag，则 patchVnode 时，会认为两者是 patchable 的\n    return appendVnode({\n      tag: '!',\n      isComment: constant.TRUE,\n      text: constant.EMPTY_STRING,\n      keypath: $scope.$keypath,\n      context,\n    })\n  },\n\n  renderElementVnode = function (\n    tag: string,\n    attrs: Function | void,\n    childs: Function | void,\n    isStatic: true | void,\n    isOption: true | void,\n    isStyle: true | void,\n    isSvg: true | void,\n    html: any | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      isStatic,\n      isOption,\n      isStyle,\n      isSvg,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n    }\n\n    if (isDef(html)) {\n      vnode.html = toString(html)\n    }\n\n    if (attrs) {\n      currentVnode = vnode\n      attrs()\n      currentVnode = constant.UNDEFINED\n    }\n\n    if (childs) {\n      vnodeStack.push(vnode.children = [])\n      childs()\n      array.pop(vnodeStack)\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderComponentVnode = function (\n    tag: string,\n    attrs: Function | void,\n    slots: Record<string, Function> | void,\n    ref: string | void,\n    key: string | void\n  ) {\n\n    const vnode: Data = {\n      tag,\n      ref,\n      key,\n      context,\n      keypath: $scope.$keypath,\n      isComponent: constant.TRUE,\n    }\n\n    const componentList = array.last(slotComponentStack)\n    if (componentList) {\n      array.push(componentList, vnode)\n    }\n\n    if (attrs) {\n      currentVnode = vnode\n      attrs()\n      currentVnode = constant.UNDEFINED\n    }\n\n    if (slots) {\n      const vnodeSlots = {}\n      for (let name in slots) {\n        vnodeStack.push([])\n        slotComponentStack.push([])\n        slots[name]()\n        const vnodes = array.pop(vnodeStack) as VNode[]\n        const components = array.pop(slotComponentStack) as VNode[]\n        if (vnodes.length) {\n          vnodeSlots[name] = {\n            vnodes,\n            components,\n          }\n        }\n        else {\n          // 必须要有值，用于覆盖旧值\n          vnodeSlots[name] = constant.UNDEFINED\n        }\n      }\n      vnode.slots = vnodeSlots\n    }\n\n    return appendVnode(vnode)\n\n  },\n\n  renderExpressionIdentifier = function (\n    name: string,\n    lookup: boolean,\n    offset?: number,\n    holder?: boolean,\n    depIgnore?: boolean,\n    stack?: any[]\n  ) {\n    let myStack = stack || $stack, index = myStack.length - 1\n    if (offset) {\n      index -= offset\n    }\n    let result = findValue(myStack, index, name, lookup, depIgnore)\n    return holder ? result : result.value\n  },\n\n  renderExpressionMemberKeypath = function (\n    identifier: string,\n    runtimeKeypath: string[]\n  ) {\n    array.unshift(runtimeKeypath, identifier)\n    return array.join(runtimeKeypath, constant.RAW_DOT)\n  },\n\n  renderExpressionMemberLiteral = function (\n    value: any,\n    staticKeypath: string | void,\n    runtimeKeypath: string[] | void,\n    holder: boolean | void\n  ) {\n    if (runtimeKeypath !== constant.UNDEFINED) {\n      staticKeypath = array.join(runtimeKeypath as string[], constant.RAW_DOT)\n    }\n    const match = object.get(value, staticKeypath as string)\n    globalHolder.keypath = constant.UNDEFINED\n    globalHolder.value = match ? match.value : constant.UNDEFINED\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  renderExpressionCall = function (\n    fn: Function | void,\n    args: any[] | void,\n    holder: boolean | void\n  ) {\n    globalHolder.keypath = constant.UNDEFINED\n    // 当 holder 为 true, args 为空时，args 会传入 false\n    globalHolder.value = execute(fn, context, args || constant.UNDEFINED)\n    return holder ? globalHolder : globalHolder.value\n  },\n\n  // <slot name=\"xx\"/>\n  renderSlot = function (name: string, defaultRender?: Function) {\n\n    const vnodeList = array.last(vnodeStack),\n\n    slotProps = context.get(name)\n\n    if (vnodeList) {\n      if (slotProps) {\n        const { vnodes, components } = slotProps\n        for (let i = 0, length = vnodes.length; i < length; i++) {\n          array.push(vnodeList, vnodes[i])\n          vnodes[i].slot = name\n        }\n        for (let i = 0, length = components.length; i < length; i++) {\n          components[i].parent = context\n        }\n      }\n      else if (defaultRender) {\n        defaultRender()\n      }\n    }\n\n    // 不能重复输出相同名称的 slot\n    if (process.env.NODE_ENV === 'development') {\n      if (renderedSlots[name]) {\n        logger.fatal(`The slot \"${string.slice(name, SLOT_DATA_PREFIX.length)}\" can't render more than one time.`)\n      }\n      renderedSlots[name] = constant.TRUE\n    }\n\n  },\n\n  // {{#partial name}}\n  //   xx\n  // {{/partial}}\n  renderPartial = function (name: string, render: Function) {\n    localPartials[name] = render\n  },\n\n  // {{> name}}\n  renderImport = function (name: string) {\n    if (localPartials[name]) {\n      localPartials[name]()\n    }\n    else {\n      const partial = partials[name]\n      if (partial) {\n        partial(\n          renderExpressionIdentifier,\n          renderExpressionMemberKeypath,\n          renderExpressionMemberLiteral,\n          renderExpressionCall,\n          renderTextVnode,\n          renderAttributeVnode,\n          renderPropertyVnode,\n          renderLazyVnode,\n          renderTransitionVnode,\n          renderBindingVnode,\n          renderModelVnode,\n          renderEventMethodVnode,\n          renderEventNameVnode,\n          renderDirectiveVnode,\n          renderSpreadVnode,\n          renderCommentVnode,\n          renderElementVnode,\n          renderComponentVnode,\n          renderSlot,\n          renderPartial,\n          renderImport,\n          renderEach,\n          renderRange,\n          renderEqualRange\n        )\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The partial \"${name}\" can't be found.`)\n      }\n    }\n  },\n\n  eachHandler = function (\n    generate: Function,\n    item: any,\n    key: string | number,\n    keypath: string,\n    index: string | void,\n    length: number | void\n  ) {\n\n    const lastScope = $scope, lastStack = $stack\n\n    // each 会改变 keypath\n    $scope = { $keypath: keypath }\n    $stack = lastStack.concat($scope)\n\n    // 避免模板里频繁读取 list.length\n    if (length !== constant.UNDEFINED) {\n      $scope.$length = length\n    }\n\n    // 业务层是否写了 expr:index\n    if (index) {\n      $scope[index] = key\n    }\n\n    // 无法通过 context.get($keypath + key) 读取到数据的场景\n    // 必须把 item 写到 scope\n    if (!keypath) {\n      $scope.$item = item\n    }\n\n    generate()\n\n    $scope = lastScope\n    $stack = lastStack\n\n  },\n\n  renderEach = function (\n    generate: Function,\n    holder: ValueHolder,\n    index: string | void\n  ) {\n\n    const { keypath, value } = holder\n\n    if (is.array(value)) {\n      for (let i = 0, length = value.length; i < length; i++) {\n        eachHandler(\n          generate,\n          value[i],\n          i,\n          keypath\n            ? keypathUtil.join(keypath, constant.EMPTY_STRING + i)\n            : constant.EMPTY_STRING,\n          index,\n          length\n        )\n      }\n    }\n    else if (is.object(value)) {\n      for (let key in value) {\n        eachHandler(\n          generate,\n          value[key],\n          key,\n          keypath\n            ? keypathUtil.join(keypath, key)\n            : constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i < to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i > to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  },\n\n  renderEqualRange = function (\n    generate: Function,\n    from: number,\n    to: number,\n    index: string | void\n  ) {\n\n    let count = 0\n\n    if (from < to) {\n      for (let i = from; i <= to; i++) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n    else {\n      for (let i = from; i >= to; i--) {\n        eachHandler(\n          generate,\n          i,\n          count++,\n          constant.EMPTY_STRING,\n          index\n        )\n      }\n    }\n\n  }\n\n  return template(\n    renderExpressionIdentifier,\n    renderExpressionMemberKeypath,\n    renderExpressionMemberLiteral,\n    renderExpressionCall,\n    renderTextVnode,\n    renderAttributeVnode,\n    renderPropertyVnode,\n    renderLazyVnode,\n    renderTransitionVnode,\n    renderBindingVnode,\n    renderModelVnode,\n    renderEventMethodVnode,\n    renderEventNameVnode,\n    renderDirectiveVnode,\n    renderSpreadVnode,\n    renderCommentVnode,\n    renderElementVnode,\n    renderComponentVnode,\n    renderSlot,\n    renderPartial,\n    renderImport,\n    renderEach,\n    renderRange,\n    renderEqualRange\n  )\n\n}","import {\n  Listener,\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  SpecialEventHooks,\n} from 'yox-type/src/hooks'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\n\nlet guid = 0,\n\n// 这里先写 IE9 支持的接口\ntextContent = 'textContent',\n\ninnerHTML = 'innerHTML',\n\ncreateEvent = function (event: any, node: HTMLElement | Window | Document): any {\n  return event\n},\n\nfindElement = function (selector: string): Element | void {\n  const node = (constant.DOCUMENT as Document).querySelector(selector)\n  if (node) {\n    return node\n  }\n},\n\naddEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.addEventListener(type, listener, constant.FALSE)\n},\n\nremoveEventListener = function (node: HTMLElement | Window | Document, type: string, listener: (event: Event) => void) {\n  node.removeEventListener(type, listener, constant.FALSE)\n},\n\n// IE9 不支持 classList\naddElementClass = function (node: HTMLElement, className: string) {\n  node.classList.add(className)\n},\n\nremoveElementClass = function (node: HTMLElement, className: string) {\n  node.classList.remove(className)\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  if (constant.DOCUMENT) {\n\n    // 此时 document.body 不一定有值，比如 script 放在 head 里\n    if (!constant.DOCUMENT.documentElement.classList) {\n      addElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (!array.has(classes, className)) {\n          array.push(classes, className)\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n      removeElementClass = function (node: HTMLElement, className: string) {\n        const classes = node.className.split(CHAR_WHITESPACE)\n        if (array.remove(classes, className)) {\n          node.className = array.join(classes, CHAR_WHITESPACE)\n        }\n      }\n    }\n\n    // 为 IE9 以下浏览器打补丁\n    if (process.env.NODE_LEGACY) {\n\n      if (!constant.DOCUMENT.addEventListener) {\n\n        const PROPERTY_CHANGE = 'propertychange',\n\n        isBoxElement = function (node: HTMLInputElement) {\n          return node.tagName === 'INPUT'\n            && (node.type === 'radio' || node.type === 'checkbox')\n        }\n\n        class IEEvent {\n\n          currentTarget: HTMLElement | Window | Document\n\n          target: HTMLElement | EventTarget\n\n          originalEvent: Event\n\n          constructor(event: Event, element: HTMLElement | Window | Document) {\n\n            object.extend(this, event)\n\n            this.currentTarget = element\n            this.target = event.srcElement || element\n            this.originalEvent = event\n\n          }\n\n          preventDefault() {\n            this.originalEvent.returnValue = constant.FALSE\n          }\n\n          stopPropagation() {\n            this.originalEvent.cancelBubble = constant.TRUE\n          }\n\n        }\n\n        // textContent 不兼容 IE678\n        // 改用 data 属性\n        textContent = 'data'\n\n        createEvent = function (event, element) {\n          return new IEEvent(event, element)\n        }\n\n        findElement = function (selector: string): Element | void {\n          // 去掉 #\n          if (string.codeAt(selector, 0) === 35) {\n            selector = string.slice(selector, 1)\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The id selector, such as \"#id\", is the only supported selector for the legacy version.`)\n          }\n          const node = (constant.DOCUMENT as Document).getElementById(selector)\n          if (node) {\n            return node\n          }\n        }\n\n        addEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            addEventListener(\n              node,\n              PROPERTY_CHANGE,\n              // 借用 EMITTER，反正只是内部临时用一下...\n              listener[EMITTER] = function (event: any) {\n                if (event.propertyName === constant.RAW_VALUE) {\n                  event = new CustomEvent(event)\n                  event.type = constant.EVENT_INPUT\n                  execute(listener, this, event)\n                }\n              }\n            )\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            addEventListener(\n              node,\n              constant.EVENT_CLICK,\n              listener[EMITTER] = function (event: any) {\n                event = new CustomEvent(event)\n                event.type = constant.EVENT_CHANGE\n                execute(listener, this, event)\n              }\n            )\n          }\n          else {\n            node.attachEvent(`on${type}`, listener)\n          }\n        }\n\n        removeEventListener = function (node: any, type: string, listener: (event: Event) => void) {\n          if (type === constant.EVENT_INPUT) {\n            removeEventListener(node, PROPERTY_CHANGE, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else if (type === constant.EVENT_CHANGE && isBoxElement(node)) {\n            removeEventListener(node, constant.EVENT_CLICK, listener[EMITTER])\n            delete listener[EMITTER]\n          }\n          else {\n            node.detachEvent(`on${type}`, listener)\n          }\n        }\n\n      }\n\n    }\n\n  }\n}\n\nconst CHAR_WHITESPACE = ' ',\n\n/**\n * 绑定在 HTML 元素上的事件发射器\n */\nEMITTER = '$emitter',\n\n/**\n * 低版本 IE 上 style 标签的专有属性\n */\nSTYLE_SHEET = 'styleSheet',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_START = 'compositionstart',\n\n/**\n * 跟输入事件配套使用的事件\n */\nCOMPOSITION_END = 'compositionend',\n\ndomain = 'http://www.w3.org/',\n\nnamespaces = {\n  svg: domain + '2000/svg',\n  // xml: domain + 'XML/1998/namespace',\n  // xlink: domain + '1999/xlink',\n},\n\nemitterHolders: Record<string, Emitter> = {},\n\nspecialEvents: Record<string, SpecialEventHooks> = {}\n\nspecialEvents[constant.EVENT_MODEL] = {\n  on(node: HTMLElement | Window | Document, listener: NativeListener) {\n    let locked = constant.FALSE\n    on(node, COMPOSITION_START, listener[COMPOSITION_START] = function () {\n      locked = constant.TRUE\n    })\n    on(node, COMPOSITION_END, listener[COMPOSITION_END] = function (event: Event | CustomEvent) {\n      locked = constant.FALSE\n      listener(event)\n    })\n    addEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT] = function (event: Event | CustomEvent) {\n      if (!locked) {\n        listener(event)\n      }\n    })\n  },\n  off(node: HTMLElement | Window | Document, listener: NativeListener) {\n    off(node, COMPOSITION_START, listener[COMPOSITION_START])\n    off(node, COMPOSITION_END, listener[COMPOSITION_END])\n    removeEventListener(node, constant.EVENT_INPUT, listener[constant.EVENT_INPUT])\n    listener[COMPOSITION_START] =\n    listener[COMPOSITION_END] =\n    listener[constant.EVENT_INPUT] = constant.UNDEFINED\n  }\n}\n\nexport function createElement(tag: string, isSvg?: boolean): Element {\n  return isSvg\n    ? (constant.DOCUMENT as Document).createElementNS(namespaces.svg, tag)\n    : (constant.DOCUMENT as Document).createElement(tag)\n}\n\nexport function createText(text: string): Text {\n  return (constant.DOCUMENT as Document).createTextNode(text)\n}\n\nexport function createComment(text: string): Comment {\n  return (constant.DOCUMENT as Document).createComment(text)\n}\n\nexport function prop(node: HTMLElement, name: string, value?: string | number | boolean): string | number | boolean | void {\n  if (value !== constant.UNDEFINED) {\n    object.set(node, name, value, constant.FALSE)\n  }\n  else {\n    const holder = object.get(node, name)\n    if (holder) {\n      return holder.value\n    }\n  }\n}\n\nexport function removeProp(node: HTMLElement, name: string): void {\n  object.set(\n    node,\n    name,\n    constant.UNDEFINED\n  )\n}\n\nexport function attr(node: HTMLElement, name: string, value?: string): string | void {\n  if (value !== constant.UNDEFINED) {\n    node.setAttribute(name, value as string)\n  }\n  else {\n    // value 还可能是 null\n    const value = node.getAttribute(name)\n    if (value != constant.NULL) {\n      return value\n    }\n  }\n}\n\nexport function removeAttr(node: HTMLElement, name: string): void {\n  node.removeAttribute(name)\n}\n\nexport function before(parentNode: Node, node: Node, beforeNode: Node): void {\n  parentNode.insertBefore(node, beforeNode)\n}\n\nexport function append(parentNode: Node, node: Node): void {\n  parentNode.appendChild(node)\n}\n\nexport function replace(parentNode: Node, node: Node, oldNode: Node): void {\n  parentNode.replaceChild(node, oldNode)\n}\n\nexport function remove(parentNode: Node, node: Node): void {\n  parentNode.removeChild(node)\n}\n\nexport function parent(node: Node): Node | void {\n  const { parentNode } = node\n  if (parentNode) {\n    return parentNode\n  }\n}\n\nexport function next(node: Node): Node | void {\n  const { nextSibling } = node\n  if (nextSibling) {\n    return nextSibling\n  }\n}\n\nexport const find = findElement\n\nexport function tag(node: Node): string | void {\n  if (node.nodeType === 1) {\n    return string.lower((node as HTMLElement).tagName)\n  }\n}\n\nexport function text(node: Node, text?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (text !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = text\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = text as string\n        }\n        node[textContent] = text as string\n      }\n    }\n    else {\n      node[textContent] = text as string\n    }\n  }\n  else {\n    return node[textContent]\n  }\n}\n\nexport function html(node: Element, html?: string, isStyle?: boolean, isOption?: boolean): string | void {\n  if (html !== constant.UNDEFINED) {\n    if (process.env.NODE_LEGACY) {\n      if (isStyle && object.has(node, STYLE_SHEET)) {\n        node[STYLE_SHEET].cssText = html\n      }\n      else {\n        if (isOption) {\n          (node as HTMLOptionElement).value = html as string\n        }\n        node[innerHTML] = html as string\n      }\n    }\n    else {\n      node[innerHTML] = html as string\n    }\n  }\n  else {\n    return node[innerHTML]\n  }\n}\n\nexport const addClass = addElementClass\n\nexport const removeClass = removeElementClass\n\nexport function on(node: HTMLElement | Window | Document, type: string, listener: Listener, context?: any): void {\n\n  const emitterKey = node[EMITTER] || (node[EMITTER] = ++guid),\n\n  emitter = emitterHolders[emitterKey] || (emitterHolders[emitterKey] = new Emitter()),\n\n  nativeListeners = emitter.nativeListeners || (emitter.nativeListeners = {})\n\n  // 一个元素，相同的事件，只注册一个 native listener\n  if (!nativeListeners[type]) {\n\n    // 特殊事件\n    const special = specialEvents[type],\n\n    // 唯一的原生监听器\n    nativeListener = function (event: Event | CustomEvent) {\n\n      const customEvent = event instanceof CustomEvent\n        ? event\n        : new CustomEvent(event.type, createEvent(event, node))\n\n      if (customEvent.type !== type) {\n        customEvent.type = type\n      }\n\n      emitter.fire(type, [customEvent])\n\n    }\n\n    nativeListeners[type] = nativeListener\n\n    if (special) {\n      special.on(node, nativeListener)\n    }\n    else {\n      addEventListener(node, type, nativeListener)\n    }\n\n  }\n\n  emitter.on(\n    type,\n    {\n      fn: listener,\n      ctx: context,\n    }\n  )\n\n}\n\nexport function off(node: HTMLElement | Window | Document, type: string, listener: Function): void {\n\n  const emitterKey = node[EMITTER],\n\n  emitter = emitterHolders[emitterKey],\n\n  { listeners, nativeListeners } = emitter\n\n  // emitter 会根据 type 和 listener 参数进行适当的删除\n  emitter.off(type, listener)\n\n  // 如果注册的 type 事件都解绑了，则去掉原生监听器\n  if (nativeListeners && !emitter.has(type)) {\n\n    const special = specialEvents[type],\n\n    nativeListener = nativeListeners[type]\n\n    if (special) {\n      special.off(node, nativeListener)\n    }\n    else {\n      removeEventListener(node, type, nativeListener)\n    }\n\n    delete nativeListeners[type]\n\n  }\n\n  if (emitterHolders[emitterKey]\n    && object.falsy(listeners)\n  ) {\n    node[EMITTER] = constant.UNDEFINED\n    delete emitterHolders[emitterKey]\n  }\n\n}\n\nexport function addSpecialEvent(type: string, hooks: SpecialEventHooks): void {\n  if (process.env.NODE_ENV === 'development') {\n    if (specialEvents[type]) {\n      logger.fatal(`The special event \"${type}\" already exists.`)\n    }\n    logger.info(`The special event \"${type}\" is added successfully.`)\n  }\n  specialEvents[type] = hooks\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(constant.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, constant.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = constant.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      constant.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == constant.NULL || keypath === constant.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath) !== constant.UNDEFINED) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      constant.RAW_LENGTH,\n      newIsString ? newValue.length : constant.UNDEFINED,\n      oldIsString ? oldValue.length : constant.UNDEFINED\n    )\n    return constant.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : constant.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : constant.UNDEFINED\n\n    callback(\n      constant.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : constant.UNDEFINED,\n        oldValue ? oldValue[i] : constant.UNDEFINED\n      )\n    }\n\n    return constant.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : constant.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : constant.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (keypathUtil.matchFuzzy(keypath, watchKeypath) !== constant.UNDEFINED) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: any, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: constant.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === constant.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport Computed from './Computed'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === constant.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void\n\n    if (computed) {\n      result = object.get(computed, keypath)\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let next: any\n\n      keypathUtil.each(\n        keypath,\n        function (key, index, lastIndex) {\n\n          if (index === 0) {\n            if (computed && computed[key]) {\n              if (lastIndex === 0) {\n                computed[key].set(newValue)\n              }\n              else {\n                // 这里 next 可能为空\n                next = computed[key].get()\n              }\n            }\n            else {\n              if (lastIndex === 0) {\n                data[key] = newValue\n              }\n              else {\n                next = data[key] || (data[key] = {})\n              }\n            }\n            return\n          }\n\n          if (next) {\n            if (index === lastIndex) {\n              next[key] = newValue\n            }\n            else {\n              next = next[key] || (next[key] = {})\n            }\n          }\n\n        }\n      )\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = constant.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = constant.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = constant.TRUE,\n\n    sync = constant.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            constant.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === constant.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === constant.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return constant.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return constant.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return constant.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import execute from './execute'\n\nimport * as array from '../util/array'\nimport * as constant from '../util/constant'\n\n/**\n * 节流调用\n *\n * @param fn 需要节制调用的函数\n * @param delay 调用的时间间隔，单位毫秒\n * @param immediate 是否立即触发\n * @return 节流函数\n */\nexport default function (fn: Function, delay: number, immediate?: boolean) {\n\n  let timer: any\n\n  return function () {\n\n    if (!timer) {\n\n      const args = array.toArray(arguments)\n      if (immediate) {\n        execute(fn, constant.UNDEFINED, args)\n      }\n\n      timer = setTimeout(\n        function () {\n          timer = constant.UNDEFINED\n          if (!immediate) {\n            execute(fn, constant.UNDEFINED, args)\n          }\n        },\n        delay\n      )\n\n    }\n\n  }\n}\n","import {\n  Listener,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\nimport debounce from 'yox-common/src/function/debounce'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { key, name, modifier, handler } = directive, { lazy } = vnode\n\n  if (!handler) {\n    return\n  }\n\n  if (lazy) {\n\n    const value = lazy[name] || lazy[constant.EMPTY_STRING]\n\n    if (value === constant.TRUE) {\n      name = constant.EVENT_CHANGE\n    }\n    else if (value > 0) {\n      handler = debounce(\n        handler,\n        value,\n        // 避免连续多次点击，主要用于提交表单场景\n        // 移动端的 tap 事件可自行在业务层打补丁实现\n        name === constant.EVENT_CLICK || name === constant.EVENT_TAP\n      )\n    }\n\n  }\n\n  let element: HTMLElement\n\n  if (vnode.isComponent) {\n    const component = node as YoxInterface\n\n    if (modifier === MODIFER_NATIVE) {\n      element = component.$el as HTMLElement\n\n      domApi.on(element, name, handler)\n      vnode.data[key] = function () {\n        domApi.off(element, name, handler as Listener)\n      }\n    }\n    else {\n      // 还原命名空间\n      if (modifier) {\n        name += constant.RAW_DOT + modifier\n      }\n      // 监听组件事件不用处理父组件传下来的事件\n      let listener: Listener = function (event, data) {\n        if (event.phase !== CustomEvent.PHASE_DOWNWARD) {\n          return (handler as Listener)(event, data)\n        }\n      }\n      component.on(name, listener)\n      vnode.data[key] = function () {\n        component.off(name, listener)\n      }\n    }\n  }\n  else {\n    element = node as HTMLElement\n\n    domApi.on(element, name, handler)\n    vnode.data[key] = function () {\n      domApi.off(element, name, handler as Listener)\n    }\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n  LazyValue,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  DIRECTIVE_MODEL,\n} from 'yox-config/src/config'\n\nimport debounce from 'yox-common/src/function/debounce'\nimport execute from 'yox-common/src/function/execute'\nimport toString from 'yox-common/src/function/toString'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as domApi from 'yox-dom/src/dom'\n\n\ninterface NativeControl {\n\n  set(node: HTMLElement, value: any): void\n\n  sync(node: HTMLElement, keypath: string, context: YoxInterface): void\n\n  name: string\n\n}\n\nfunction debounceIfNeeded<T extends Function>(fn: T, lazy: LazyValue | void): T {\n  // 应用 lazy\n  return lazy && lazy !== constant.TRUE\n    ? debounce(fn as Function, lazy) as any\n    : fn\n}\n\nconst inputControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.value = toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    context.set(keypath, node.value)\n  },\n  name: constant.RAW_VALUE\n},\n\nradioControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = node.value === toString(value)\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    if (node.checked) {\n      context.set(keypath, node.value)\n    }\n  },\n  name: 'checked'\n},\n\ncheckboxControl: NativeControl = {\n  set(node: HTMLInputElement, value: any) {\n    node.checked = is.array(value)\n      ? array.has(value, node.value, constant.FALSE)\n      : !!value\n  },\n  sync(node: HTMLInputElement, keypath: string, context: YoxInterface) {\n    const value = context.get(keypath)\n    if (is.array(value)) {\n      if (node.checked) {\n        context.append(keypath, node.value)\n      }\n      else {\n        context.removeAt(\n          keypath,\n          array.indexOf(value, node.value, constant.FALSE)\n        )\n      }\n    }\n    else {\n      context.set(keypath, node.checked)\n    }\n  },\n  name: 'checked'\n},\n\nselectControl: NativeControl = {\n  set(node: HTMLSelectElement, value: any) {\n    array.each(\n      array.toArray(node.options),\n      node.multiple\n        ? function (option) {\n          option.selected = array.has(value, option.value, constant.FALSE)\n        }\n        : function (option, index) {\n          if (option.value == value) {\n            node.selectedIndex = index\n            return constant.FALSE\n          }\n        }\n    )\n  },\n  sync(node: HTMLSelectElement, keypath: string, context: YoxInterface) {\n    const { options } = node\n    if (node.multiple) {\n      const values: string[] = []\n      array.each(\n        array.toArray(options),\n        function (option) {\n          if (option.selected) {\n            array.push(\n              values,\n              option.value\n            )\n          }\n        }\n      )\n      context.set(keypath, values)\n    }\n    else {\n      context.set(\n        keypath,\n        options[node.selectedIndex].value\n      )\n    }\n  },\n  name: constant.RAW_VALUE\n}\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  let { context, lazy, isComponent } = vnode,\n\n  dataBinding = directive.modifier as string,\n\n  lazyValue = lazy && (lazy[DIRECTIVE_MODEL] || lazy[constant.EMPTY_STRING]),\n\n  set: Watcher | void,\n\n  unbind: Function\n\n  if (isComponent) {\n\n    let component = node as YoxInterface,\n\n    viewBinding = component.$model as string,\n\n    viewSyncing = debounceIfNeeded(\n      function (newValue: any) {\n        context.set(dataBinding, newValue)\n      },\n      lazyValue\n    )\n\n    set = function (newValue: any) {\n      if (set) {\n        component.set(viewBinding, newValue)\n      }\n    }\n\n    unbind = function () {\n      component.unwatch(viewBinding, viewSyncing)\n    }\n\n    component.watch(viewBinding, viewSyncing)\n\n  }\n  else {\n\n    let element = node as HTMLElement,\n\n    control = vnode.tag === 'select'\n      ? selectControl\n      : inputControl,\n\n    // checkbox,radio,select 监听的是 change 事件\n    eventName = constant.EVENT_CHANGE\n\n    if (control === inputControl) {\n      const type = (node as HTMLInputElement).type\n      if (type === 'radio') {\n        control = radioControl\n      }\n      else if (type === 'checkbox') {\n        control = checkboxControl\n      }\n      // 如果是输入框，则切换成 model 事件\n      // model 事件是个 yox-dom 实现的特殊事件\n      // 不会在输入法组合文字过程中得到触发事件\n      else if (lazyValue !== constant.TRUE) {\n        eventName = constant.EVENT_MODEL\n      }\n    }\n\n    set = function (newValue: any) {\n      if (set) {\n        control.set(element, newValue)\n      }\n    }\n\n    const sync = debounceIfNeeded(\n      function () {\n        control.sync(element, dataBinding, context)\n      },\n      lazyValue\n    )\n\n    unbind = function () {\n      domApi.off(element, eventName, sync)\n    }\n\n    domApi.on(element, eventName, sync)\n\n    control.set(element, directive.value)\n\n  }\n\n  // 监听数据，修改界面\n  context.watch(dataBinding, set as Watcher)\n\n  vnode.data[directive.key] = function () {\n    context.unwatch(dataBinding, set as Watcher)\n    set = constant.UNDEFINED\n    unbind()\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n  Directive,\n} from 'yox-type/src/vnode'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nexport const once = constant.TRUE\n\nexport function bind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n\n  // binding 可能是模糊匹配\n  // 比如延展属性 {{...obj}}，这里 binding 会是 `obj.*`\n  let binding = directive.modifier as string,\n\n  // 提前判断好是否是模糊匹配，避免 watcher 频繁执行判断逻辑\n  isFuzzy = keypathUtil.isFuzzy(binding),\n\n  watcher: Watcher | void = function (newValue: any, _: any, keypath: string) {\n\n    if (watcher) {\n      const name = isFuzzy\n        ? keypathUtil.matchFuzzy(keypath, binding) as string\n        : directive.name\n\n      if (vnode.isComponent) {\n        const component = node as YoxInterface\n        component.checkProp(name, newValue)\n        component.set(name, newValue)\n      }\n      else {\n        const element = node as HTMLElement\n        if (directive.hint !== constant.UNDEFINED) {\n          domApi.prop(element, name, newValue)\n        }\n        else {\n          domApi.attr(element, name, newValue)\n        }\n      }\n    }\n\n  }\n\n  vnode.context.watch(binding, watcher as Watcher)\n\n  vnode.data[directive.key] = function () {\n    vnode.context.unwatch(binding, watcher as Watcher)\n    watcher = constant.UNDEFINED\n  }\n\n}\n\nexport function unbind(node: HTMLElement | YoxInterface, directive: Directive, vnode: VNode) {\n  execute(vnode.data[directive.key])\n}\n\n","import {\n  Data,\n  Filter,\n  Partial,\n  ThisTask,\n  ThisWatcher,\n  ThisListener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  ComponentOptions,\n  ThisWatcherOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from 'yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  HOOK_BEFORE_PROPS_UPDATE,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as snabbdom from 'yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateGenerator from 'yox-template-compiler/src/generator'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nimport Observer from 'yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(\n    plugin: {\n      install(Y: typeof Yox): void\n    }\n  ): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string | Function, stringify?: boolean): string | Function {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数\n      if (is.func(template)) {\n        return template as Function\n      }\n      if (!compileCache[template as string]) {\n        const nodes = templateCompiler.compile(template as string)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template as string] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template as string]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return template\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options?: ComponentOptions) {\n\n    const instance = this, $options: ComponentOptions = options || constant.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(constant.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp($options.name, key, value, rule)\n            }\n            if (value === constant.UNDEFINED) {\n              value = rule.value\n              if (value !== constant.UNDEFINED) {\n                source[key] = rule.type === constant.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = constant.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = constant.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(constant.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, constant.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, constant.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, constant.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, constant.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, constant.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: constant.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: constant.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        instance.watch(newWatchers)\n\n        if (process.env.NODE_ENV !== 'pure') {\n          execute(instance.$options[HOOK_AFTER_CREATE], instance)\n          instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n        }\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            constant.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    if (watchers) {\n      instance.watch(watchers)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute(instance.$options[HOOK_AFTER_CREATE], instance)\n      instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n    }\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener, constant.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (event.ns === constant.UNDEFINED) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === constant.TRUE) {\n      downward = constant.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    // 向上发事件会经过自己\n    // 如果向下发事件再经过自己，就产生了一次重叠\n    // 这是没有必要的，而且会导致向下发事件时，外部能接收到该事件，但我们的本意只是想让子组件接收到事件\n\n    isComplete = downward && event.target === instance\n      ? constant.TRUE\n      : $emitter.fire(event, args)\n\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, constant.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, ThisWatcher<this> | ThisWatcherOptions<this>>,\n    watcher?: ThisWatcher<this> | ThisWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: ThisWatcher<this>\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = constant.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(props?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $options, $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (props) {\n          execute($options[HOOK_BEFORE_PROPS_UPDATE], instance, props)\n          instance.set(props)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!props && oldValue === template.get()) {\n          instance.update(\n            template.get(constant.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { name, propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(name, key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = constant.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: ThisTask<this>): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(componentName: string | undefined, key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (value !== constant.UNDEFINED) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value, componentName)\n      }\n      else {\n\n        let matched = constant.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = constant.TRUE\n                return constant.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`, componentName)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`, componentName)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is undefined.`, componentName)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Function, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Function>,\n  listener?: Function,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Function, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Function, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return constant.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return (this as YoxInterface).get(SLOT_DATA_PREFIX + name) !== constant.UNDEFINED\n    }\n  })\n}\n"],"names":["SYNTAX_IF","SYNTAX_ELSE","SYNTAX_ELSE_IF","SYNTAX_EACH","SYNTAX_PARTIAL","SYNTAX_IMPORT","SYNTAX_SPREAD","SYNTAX_COMMENT","SLOT_DATA_PREFIX","SLOT_NAME_DEFAULT","HINT_STRING","HINT_NUMBER","HINT_BOOLEAN","DIRECTIVE_ON","DIRECTIVE_LAZY","DIRECTIVE_MODEL","DIRECTIVE_EVENT","DIRECTIVE_BINDING","DIRECTIVE_CUSTOM","MODIFER_NATIVE","MODEL_PROP_DEFAULT","NAMESPACE_HOOK","HOOK_BEFORE_CREATE","HOOK_AFTER_CREATE","HOOK_BEFORE_MOUNT","HOOK_AFTER_MOUNT","HOOK_BEFORE_UPDATE","HOOK_AFTER_UPDATE","HOOK_BEFORE_DESTROY","HOOK_AFTER_DESTROY","HOOK_BEFORE_PROPS_UPDATE","TRUE","FALSE","NULL","UNDEFINED","MINUS_ONE","RAW_TRUE","RAW_SLOT","RAW_NAME","RAW_FILTER","RAW_PARTIAL","RAW_COMPONENT","RAW_DIRECTIVE","RAW_TRANSITION","RAW_VALUE","RAW_LENGTH","RAW_FUNCTION","RAW_TEMPLATE","RAW_WILDCARD","RAW_DOT","RAW_SLASH","KEYPATH_PARENT","KEYPATH_CURRENT","WINDOW","window","DOCUMENT","document","GLOBAL","global","EVENT_TAP","EVENT_CLICK","EVENT_CHANGE","EVENT_MODEL","EMPTY_FUNCTION","EMPTY_OBJECT","Object","freeze","EMPTY_ARRAY","EMPTY_STRING","func","value","constant.RAW_FUNCTION","array","Array","isArray","object","constant.NULL","string","number","isNaN","boolean","numeric","parseFloat","isFinite","fn","context","args","is.func","is.array","apply","constant.UNDEFINED","call","CustomEvent","[object Object]","type","originalEvent","this","phase","PHASE_CURRENT","instance","isPrevented","preventDefault","constant.TRUE","isStoped","stopPropagation","each","callback","reversed","length","i","constant.FALSE","nativePush","item","nativeUnshift","unshift","addItem","action","push","target","indexOf","strict","result","constant.MINUS_ONE","index","last","pop","remove","splice","has","toArray","execute","constant.EMPTY_ARRAY","slice","join","separator","falsy","key","camelizePattern","hyphenatePattern","capitalizePattern","camelizeCache","hyphenateCache","capitalizeCache","camelize","str","replace","$0","$1","upper","trim","constant.EMPTY_STRING","start","end","is.number","part","lastIndexOf","startsWith","endsWith","offset","charAt","codeAt","charCodeAt","toUpperCase","lower","toLowerCase","is.string","dotPattern","asteriskPattern","doubleAsteriskPattern","splitCache","patternCache","keypath","list","string.indexOf","constant.RAW_DOT","split","lastIndex","keypath1","keypath2","isFuzzy","string.has","constant.RAW_WILDCARD","matchFuzzy","pattern","cache","RegExp","match","holder","keys","clear","_","extend","original","merge","object1","object2","copy","deep","array.each","is.object","get","keypathUtil.each","hasValue","set","autofill","defaultValue","toString","DEBUG","INFO","WARN","ERROR","FATAL","nativeConsole","console","defaultLogLevel","test","constant.EMPTY_FUNCTION","stylePrefix","constant.WINDOW","navigator","userAgent","printLog","tag","msg","style","log","getLogLevel","constant.GLOBAL","logLevel","getStyle","backgroundColor","Error","Emitter","ns","listeners","filter","namespace","parse","isComplete","object.copy","event","options","matchNamespace","array.has","listener","ctx","num","max","off","prevent","stop","array.push","name","matchListener","createMatchListener","object.each","string.slice","matchTrue","nextTick","setImmediate","isNative","MessageChannel","channel","port1","onmessage","port2","postMessage","setTimeout","shared","NextTask","tasks","run","array.unshift","task","ID","VNODE","LOADING","COMPONENT","LEAVING","update","api","vnode","oldVnode","node","nativeAttrs","oldNativeAttrs","newValue","constant.EMPTY_OBJECT","oldValue","attr","removeAttr","nativeProps","oldNativeProps","prop","removeProp","data","directives","oldDirectives","field.COMPONENT","isKeypathChange","directive","once","bind","unbind","hooks","ref","props","slots","isComponent","model","$model","object.merge","forceUpdate","refs","$refs","isPatchable","createKeyToIndex","vnodes","startIndex","endIndex","insertBefore","parentNode","referenceNode","before","append","createComponent","child","parent","field.LOADING","directive.update","component.update","guid","createData","field.ID","createVnode","isComment","isText","isStyle","isOption","children","text","html","createText","createComment","componentOptions","loadComponent","object.has","field.VNODE","enterVnode","constant.RAW_COMPONENT","createElement","isSvg","addVnodes","nativeAttr.update","nativeProp.update","insertVnode","hasParent","enter","component","isStatic","$observer","nextTask","prepend","removeVnodes","removeVnode","done","destroyVnode","transition","$vnode","leave","field.LEAVING","leaveVnode","slot","directive.remove","destroy","patch","oldText","oldHtml","oldChildren","oldKeyToIndex","oldIndex","startVnode","endVnode","oldStartIndex","oldEndIndex","oldStartVnode","oldEndVnode","next","updateChildren","ELEMENT","ATTRIBUTE","DIRECTIVE","PROPERTY","TEXT","IF","ELSE_IF","ELSE","EACH","PARTIAL","IMPORT","EXPRESSION","SPREAD","specialTags","specialAttrs","name2Type","createAttribute","nodeType.ATTRIBUTE","createDirective","modifier","nodeType.DIRECTIVE","keypathUtil.join","createProperty","hint","expr","nodeType.PROPERTY","createEach","from","to","equal","nodeType.EACH","nodeType.TEXT","isLeaf","constant.RAW_SLOT","constant.RAW_TEMPLATE","nodeType.IF","nodeType.PARTIAL","componentNamePattern","htmlEntityPattern","selfClosingTagNames","svgTagNames","stringProperyNames","numberProperyNames","booleanProperyNames","attr2Prop","staticTag","dynamicTag","nodeType.ELEMENT","creator.createElement","is.numeric","LITERAL","IDENTIFIER","MEMBER","UNARY","BINARY","TERNARY","ARRAY","OBJECT","CALL","createBinary","left","operator","right","raw","nodeType.BINARY","createIdentifier","isProp","lookup","constant.KEYPATH_CURRENT","constant.KEYPATH_PARENT","createLiteral","createIdentifierInner","nodeType.LITERAL","createMemberIfNeeded","nodes","firstNode","shift","isLiteral","staticNodes","staticRaw","dynamicNodes","constant.RAW_SLASH","string.endsWith","nodeType.IDENTIFIER","firstName","array.join","firstRaw","createMemberInner","lead","nodeType.MEMBER","unary","+","-","~","!","!!","binary","*","/","%","<<",">>",">>>","<","<=",">",">=","==","!=","===","!==","&","^","|","&&","||","compile","content","parser","Parser","scanTernary","CODE_EOF","code","go","step","string.codeAt","isWhitespace","isDef","isIdentifierStart","scanTail","scanIdentifier","isDigit","scanNumber","CODE_SQUOTE","CODE_DQUOTE","scanString","CODE_DOT","scanPath","CODE_OPAREN","CODE_CPAREN","CODE_OBRACK","scanTuple","CODE_CBRACK","pick","nodeType.ARRAY","CODE_OBRACE","scanObject","scanOperator","interpreter.unary","skip","creator.createLiteral","nodeType.UNARY","creator.createUnary","endCode","loop","CODE_BACKSLASH","Function","values","isKey","CODE_CBRACE","CODE_COLON","CODE_COMMA","nodeType.OBJECT","creator.createObject","is","creator.createIdentifier","CODE_SLASH","isIdentifierPart","creator.createMemberIfNeeded","nodeType.CALL","keywordLiterals","CODE_DIVIDE","CODE_MODULO","CODE_WAVE","CODE_XOR","CODE_MULTIPLY","CODE_PLUS","CODE_MINUS","CODE_NOT","CODE_EQUAL","CODE_AND","CODE_OR","CODE_LESS","CODE_GREAT","token","operatorPrecedence","lastOperator","lastOperatorPrecedence","output","scanToken","interpreter.binary","creator.createBinary","yes","no","scanBinary","CODE_QUESTION","nodeType.TERNARY","creator.createTernary","message","constant.RAW_TRUE","BLOCK_MODE_NONE","BLOCK_MODE_SAFE","BLOCK_MODE_UNSAFE","directiveSeparator","breaklinePattern","rangePattern","tagPattern","commentPattern","openCommentPattern","closeCommentPattern","attributePattern","selfClosingTagPattern","slicePrefix","prefix","string.trim","currentElement","currentAttribute","startQuote","nodeList","nodeStack","ifStack","nextIndex","openBlockIndex","closeBlockIndex","blockMode","blockStack","indexList","popSelfClosingElementIfNeeded","popingTagName","lastNode","array.last","element","tagName","popStack","array.pop","isElement","isAttribute","isProperty","isDirective","currentBranch","processElementSingleText","processAttributeSingleText","processPropertySingleText","processDirectiveSingleText","nodeType.EXPRESSION","processElementSingleExpression","processAttributeSingleExpression","processPropertySingleExpression","removeComment","processAttributeEmptyChildren","processPropertyEmptyChildren","processDirectiveEmptyChildren","checkEach","checkPartial","checkElement","isSpecialAttr","bindSpecialAttr","openIndex","openText","closeIndex","closeText","helper.specialTags","setElementText","safe","replaceChild","toNumber","exprNodeType.IDENTIFIER","binding","string.startsWith","getAttributeDefaultValue","exprCompiler.compile","e","exprNodeType.LITERAL","partial","attrs","hasType","constant.RAW_VALUE","creator.createProperty","compatElement","isStringValueRequired","constant.RAW_NAME","helper.specialAttrs","oldNode","newNode","isAttr","array.indexOf","addChild","nodeType.ELSE","nodeType.ELSE_IF","prev","lastChild","textNode","toTextNode","addTextChild","creator.createText","htmlParsers","constant.RAW_TRANSITION","creator.createDirective","parts","string.camelize","lazy","creator.createAttribute","lowerName","string.lower","blockParsers","source","terms","literal","creator.createEach","nodeType.IMPORT","creator.createIf","creator.createElseIf","nodeType.SPREAD","creator.createSpread","creator.createExpression","parseHtml","parseBlock","string.charAt","helper.name2Type","isCondition","condition","prevNode","hasChildren","hasNext","currentNode","checkCondition","closeBlock","addIndex","COMMA","COLON","QUESTION","EMPTY","RETURN","toGroup","toObject","fields","items","toCall","removable","arg","trimArgs","JSON","stringify","collectStack","stringStack","nodeGenerator","RENDER_EXPRESSION_IDENTIFIER","RENDER_EXPRESSION_MEMBER_KEYPATH","RENDER_EXPRESSION_MEMBER_LITERAL","RENDER_EXPRESSION_CALL","RENDER_TEXT_VNODE","RENDER_ATTRIBUTE_VNODE","RENDER_PROPERTY_VNODE","RENDER_LAZY_VNODE","RENDER_TRANSITION_VNODE","RENDER_BINDING_VNODE","RENDER_MODEL_VNODE","RENDER_EVENT_METHOD_VNODE","RENDER_EVENT_NAME_VNODE","RENDER_DIRECTIVE_VNODE","RENDER_SPREAD_VNODE","RENDER_COMMENT_VNODE","RENDER_ELEMENT_VNODE","RENDER_COMPONENT_VNODE","RENDER_SLOT","RENDER_PARTIAL","RENDER_IMPORT","RENDER_EACH","RENDER_RANGE","RENDER_EQUAL_RANGE","ARG_STACK","renderExpression","depIgnore","stack","generate","renderIdentifier","renderMemberKeypath","renderMemberLiteral","renderCall","inner","isSpecialNode","needHolder","generateChildNode","generator.toString","generator.toGroup","generator.QUESTION","generator.COLON","generator.toArray","map","generator.toObject","identifier","generator.toCall","generator.TRUE","stringifyNodes","exprGenerator.generate","stringifyFunction","stringifyExpressionArg","stringifyValue","stringifyChildren","generator.EMPTY","generator.COMMA","getComponentSlots","addSlot","array.falsy","object.falsy","obj","stringifyObject","codeArgs","setPair","outputTag","outputAttrs","outputHTML","outputChilds","outputSlots","outputStatic","outputOption","outputStyle","outputSvg","outputRef","outputKey","renderName","exprNodeType.CALL","generator.RETURN","stringifyIf","generator.UNDEFINED","KEY_DIRECTIVES","textContent","innerHTML","createEvent","addEventListener","removeEventListener","addElementClass","className","classList","add","removeElementClass","constant.DOCUMENT","documentElement","classes","CHAR_WHITESPACE","array.remove","EMITTER","namespaces","svg","domain","emitterHolders","specialEvents","object.set","object.get","setAttribute","getAttribute","appendChild","constant.EVENT_MODEL","locked","on","find","selector","querySelector","addClass","removeClass","emitterKey","emitter","nativeListeners","special","nativeListener","customEvent","fire","createElementNS","createTextNode","removeAttribute","beforeNode","removeChild","nextSibling","nodeType","Computed","sync","deps","observer","getter","setter","unique","watcher","$2","diff","watcherOptions","fixed","dep","watch","force","lastComputed","current","unwatch","diffRecursion","watchFuzzyKeypaths","subKeypath","subNewValue","subOldValue","newKeypath","fuzzyKeypath","keypathUtil.matchFuzzy","newIsString","oldIsString","constant.RAW_LENGTH","diffString","newIsArray","oldIsArray","newLength","oldLength","Math","diffArray","newIsObject","oldIsObject","diffObject","isRecursive","fuzzyKeypaths","watchKeypath","keypathUtil.isFuzzy","keypathUtil.match","readValue","count","optionsHolder","immediate","Observer","syncEmitter","asyncEmitter","asyncChanges","currentComputed","computed","setValue","diffWatcher","keypaths","pending","diffAsync","change","filterWatcher","computedOptions","is.boolean","formatWatcherOptions","min","insert","object.clear","delay","timer","array.toArray","arguments","handler","constant.EVENT_CHANGE","debounce","constant.EVENT_CLICK","constant.EVENT_TAP","domApi.on","$el","domApi.off","PHASE_DOWNWARD","debounceIfNeeded","inputControl","radioControl","checked","checkboxControl","removeAt","selectControl","multiple","option","selected","selectedIndex","dataBinding","lazyValue","viewBinding","viewSyncing","control","eventName","checkProp","domApi.prop","domApi.attr","globalDirectives","globalTransitions","globalComponents","globalPartials","globalFilters","compileCache","TEMPLATE_COMPUTED","selectorPattern","Yox","$options","$emitter","events","$parent","propTypes","methods","watchers","extensions","object.extend","rule","addComputed","method","placeholder","el","root","template","transitions","components","partials","filters","domApi.find","domApi.html","domApi.append","domApi.createComment","$root","$context","setFlexibleOptions","constant.RAW_DIRECTIVE","constant.RAW_PARTIAL","constant.RAW_FILTER","newWatchers","render","$template","snabbdom.create","domApi","plugin","install","templateCompiler.compile","templateGenerator.generate","getResource","setResource","addEvents","downward","$children","PHASE_UPWARD","$components","$directives","$transitions","$partials","$filters","currentVnode","$scope","$keypath","$stack","vnodeStack","slotComponentStack","localPartials","findValue","defaultKeypath","scope","globalHolder","$item","createMethodListener","$event","$data","createGetter","renderTextVnode","vnodeList","lastVnode","renderAttributeVnode","renderPropertyVnode","renderLazyVnode","renderTransitionVnode","renderBindingVnode","renderModelVnode","renderEventMethodVnode","renderEventNameVnode","renderDirectiveVnode","renderSpreadVnode","appendVnode","renderCommentVnode","renderElementVnode","childs","renderComponentVnode","componentList","vnodeSlots","renderExpressionIdentifier","myStack","renderExpressionMemberKeypath","runtimeKeypath","renderExpressionMemberLiteral","staticKeypath","renderExpressionCall","renderSlot","defaultRender","slotProps","renderPartial","renderImport","renderEach","renderRange","renderEqualRange","eachHandler","lastScope","lastStack","concat","$length","templateRender.render","afterHook","snabbdom.patch","isRemove","snabbdom.destroy","toggle","increase","decrease","addEvent","registry","componentCallback","queue","promise","then","formatValue","logger"],"mappings":"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"}